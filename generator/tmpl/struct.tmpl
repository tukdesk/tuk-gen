{{ define "struct" }}// auto generated by tuk-gen
package {{ .Package }}

import (
    "fmt"
    "time"

    "github.com/tukdesk/tuk-gen/sql/db"
    "github.com/tukdesk/tuk-gen/sql/types"
)

var (
    _ fmt.Stringer
    _ time.Time
    _ db.RowScanner
    _ types.Id
)

{{ $objName := .Name }}
type {{ $objName }} struct {
    {{- range $pk := .PrimaryKey }}
    {{ $pk.Name }} {{ if $pk.Nullable }}*{{ end }}{{ $pk.Type.GoType }}
    {{- end}}
    {{- range $field := .Fields }}
    {{ $field.Name }} {{ if $field.Nullable }}*{{ end }}{{ $field.Type.GoType }}
    {{- end}}
}

func (*{{ $objName }}) PrimaryKey() []string {
    return []string{
        {{ range $pk := .PrimaryKey -}}
        "{{ $pk.Column }}",
        {{ end }}
    }
}

func (*{{ $objName }}) Fields() []string {
    return []string{
        {{ range $field := .Fields -}}
        "{{ $field.Column }}",
        {{ end }}
    }
}

func (*{{ $objName }}) FieldAll() []string {
    return []string{
        {{ range $pk := .PrimaryKey -}}
        "{{ $pk.Column }}",
        {{ end -}}
        {{ range $field := .Fields -}}
        "{{ $field.Column }}",
        {{ end }}
    }
}

{{ range $pk := .PrimaryKey }}
func (*{{ $objName }}) Field{{ $pk.Name }}() string {
    return "{{ $pk.Column }}"
}

{{ if $pk.Nullable -}}
func (this *{{ $objName }}) Get{{ $pk.Name }}() ({{ $pk.Type.GoType }}, bool) {
    if this.{{ $pk.Name }} == nil {
        return {{ $pk.Type.GoZero }}, false
    }
    return *this.{{ $pk.Name }}, true
}

func (this *{{ $objName }}) Set{{ $pk.Name }}ToNull() {
    this.{{ $pk.Name }} = nil
}

func (this *{{ $objName }}) Set{{ $pk.Name }}(v {{ $pk.Type.GoType }}) {
    this.{{ $pk.Name }} = {{ if $pk.Nullable }}&{{ end }}v
}
{{- end }}
{{- end }}

{{ range $field := .Fields }}
func (*{{ $objName }}) Field{{ $field.Name }}() string {
    return "{{ $field.Column }}"
}

{{ if $field.Nullable -}}
func (this *{{ $objName }}) Get{{ $field.Name }}() ({{ $field.Type.GoType }}, bool) {
    if this.{{ $field.Name }} == nil {
        return {{ $field.Type.GoZero }}, false
    }
    return *this.{{ $field.Name }}, true
}

func (this *{{ $objName }}) Set{{ $field.Name }}ToNull() {
    this.{{ $field.Name }} = nil
}

func (this *{{ $objName }}) Set{{ $field.Name }}(v {{ $field.Type.GoType }}) {
    this.{{ $field.Name }} = {{ if $field.Nullable }}&{{ end }}v
}
{{- end }}
{{ end }}
func (this *{{ $objName }}) Value(field string) interface{} {
    switch field {
    {{ range $pk := .PrimaryKey -}}
    case "{{ $pk.Column }}":
        return this.{{ $pk.Name }}

    {{ end }}
    {{ range $field := .Fields -}}
    case "{{ $field.Column }}":
        return this.{{ $field.Name }}

    {{ end }}
    default:
        panic(fmt.Errorf("unknown field %s", field))
    }
}

func (this *{{ $objName }}) Values() []interface{} {
    return []interface{} {
        {{ range $field := .Fields -}}
        this.{{ $field.Name }},
        {{ end }}
    }
}

func (this *{{ $objName }}) ValueAll() []interface{} {
    return []interface{} {
        {{ range $pk := .PrimaryKey -}}
        this.{{ $pk.Name }},
        {{ end -}}
        {{ range $field := .Fields -}}
        this.{{ $field.Name }},
        {{ end }}
    }
}

func (this *{{ $objName }}) Receiver(field string) interface{} {
    switch field {
    {{ range $pk := .PrimaryKey -}}
    case "{{ $pk.Column }}":
        return &this.{{ $pk.Name }}

    {{ end }}
    {{ range $field := .Fields -}}
    case "{{ $field.Column }}":
        return &this.{{ $field.Name }}

    {{ end }}
    default:
        panic(fmt.Errorf("unknown field %s", field))
    }
}

func (this *{{ $objName }}) ReceiverAll() []interface{} {
    return []interface{} {
        {{ range $pk := .PrimaryKey -}}
        &this.{{ $pk.Name }},
        {{ end -}}
        {{ range $field := .Fields -}}
        &this.{{ $field.Name }},
        {{ end }}
    }
}

func (this *{{ $objName }}) Scan(row db.RowScanner, fields ...string) error {
    rcvrs := make([]interface{}, len(fields))
    for i, field := range fields {
        rcvrs[i] = this.Receiver(field)
    }

    return row.Scan(rcvrs...)
}

func (this *{{ $objName }}) ScanAll(row db.RowScanner) error {
    rcvrs := this.ReceiverAll()
    return row.Scan(rcvrs...)
}
{{- end }}
