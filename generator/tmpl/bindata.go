// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1487144781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x6d\x6f\xdb\x38\x12\xfe\xee\x5f\x31\x67\xdc\x15\x52\xe1\x32\x39\xe0\x70\x1f\xba\xc8\x02\x69\x5e\x8a\x60\xdb\xa4\x6d\xba\xbb\x1f\x82\xa0\xd0\xcb\xc8\x65\x2c\x53\x0e\x49\x35\x35\x0c\xfd\xf7\xc5\x90\x94\x4c\xc9\x92\xed\x64\x5b\xa0\xdb\xa2\x88\x25\xce\x70\xe6\x99\x87\x33\x43\x52\xab\x15\xa4\x98\x71\x81\x30\x56\xf7\xf9\x7c\x2a\xc7\x50\x55\x07\x07\x10\x95\xba\x80\x29\x0a\x94\x91\xc6\x14\xe2\x25\xe8\x72\xf6\x62\x8a\x62\xb4\x5a\xc1\xbf\x8b\xf8\xee\x32\x9a\x23\xbc\x3c\x02\x66\x1e\x5e\x54\x95\x11\x28\x2d\xcb\x44\xd7\xb2\x85\xe4\x42\x67\x30\x56\xff\x51\xd7\xef\xdf\xbc\x25\xe3\xcd\x54\x9a\xb1\x88\x92\x59\x34\x45\x58\xad\x80\xbd\x73\xcf\x55\x35\x1a\xf1\xf9\xa2\x90\x1a\x82\x11\x00\xc0\x38\x8d\x74\x14\x47\x0a\x0f\xd4\x7d\x3e\x1e\xd9\xb1\x29\xd7\x9f\xcb\x98\x25\xc5\xfc\x60\x5a\x24\x32\xca\xf4\x41\x1a\xcb\xf1\x86\x50\x97\xb3\x14\xd5\xec\xc0\x81\x27\x13\x07\x69\xbc\x9f\x9e\x5e\x2e\x50\x8d\x47\xe1\x68\xf4\x25\x92\x0e\xcc\x27\x50\xf7\x39\xfb\x80\xaa\xcc\xb5\x1b\x48\x63\x76\x52\x08\xe1\xde\xcc\x24\x76\x91\x36\x42\xc9\x4e\x79\x94\x63\xa2\x2d\x72\x2e\x94\x4f\x60\x55\x59\x62\xe0\x08\x2e\xf1\xa1\x4f\x12\x08\x9e\x87\x04\x22\x2b\x45\x32\xa8\x84\x5f\x31\x29\x75\x21\x09\xcd\x99\x7b\x0e\xe1\x79\x67\x49\xaa\x0a\x56\x06\x85\x44\x5d\x4a\x01\xcf\x36\xe4\x56\x4c\xff\x6a\x8b\x2f\x9b\xa7\x89\x91\x55\xa3\xca\x61\xe9\x05\xb2\xdb\xe9\x00\x03\x64\x96\xc8\x83\xcd\xe9\xf6\xcd\x59\xb9\x8a\xef\x30\xd1\xd6\xcb\xda\xc6\xc8\x87\xec\x93\xd0\xa0\x0d\x36\x71\x85\xf0\x31\x8a\x73\x0c\x42\xf2\xc0\xc5\xb4\x8d\x73\x4c\x59\x69\x14\x2e\x52\x14\x9a\x67\x1c\x25\x54\xd5\x78\xbb\xc5\x33\x31\xe5\x62\xc3\xe4\x6a\x05\x3c\x03\x81\xc0\xac\x1c\xc6\x63\x53\x00\x5d\x77\x4e\x4a\x5e\xdc\x34\xcc\x15\x76\x55\xd3\x98\x9d\x62\x16\x95\xb9\xae\xbd\x35\xda\x22\x35\xca\x0d\x44\xfd\x99\xab\x9e\x15\x09\x81\x52\x36\x08\x21\x78\xee\xd2\x77\x02\x28\x25\xe5\x8c\x05\xcc\x33\xe0\x42\xa0\x24\x11\xfc\xeb\x08\x04\xcf\x61\x9d\x1b\xcd\x4a\x3a\x8d\x09\xc9\x5d\x76\x98\x9f\xa4\xb6\x48\x5d\x20\x8d\xd9\x6b\xd4\x06\x0a\xab\x01\x87\xb5\x17\xd2\x19\xb2\x2f\x78\x6e\x8c\xf8\x96\x9d\x28\x69\xbc\xee\x0e\xf5\x6d\xa9\xb4\x0b\xb7\x8e\xf6\x49\x51\xf6\xc0\x48\x63\x46\xd6\x7b\xc2\xdb\x0d\xab\xce\xd0\x20\xf4\xf3\x75\x8d\xcc\x18\x6c\x52\x7a\x08\x5d\x4b\xab\x07\xa1\x91\xaf\x19\xd8\x03\xd7\xf5\xfb\x37\x8e\xa9\x57\x25\xcf\x53\x94\xed\xb2\xb0\x71\x36\xd8\x99\x51\xdf\xc7\xac\x9e\xeb\x0b\xa1\x50\xea\x0b\xa1\x8b\x20\x29\xf2\x72\x2e\x80\x31\x66\x0b\xc5\x78\x94\xcc\x6a\x90\x6e\x8f\x57\xe3\x8a\x79\x46\xcc\xa8\xab\xe1\x90\x9d\x18\x93\xca\x99\x66\x8c\xed\x0b\xeb\x1a\xa9\x3f\x0f\x41\xb2\xd2\xad\x90\x5a\x06\xc8\x31\x3b\x97\xc5\xbc\x0d\x6f\x4f\x2c\xbf\x2f\xd2\x48\x63\xe0\x7c\xdb\xb7\xad\xbe\xdd\x84\xa7\xf8\x3a\xc5\x1c\xd7\xbe\xec\xdb\x56\x5f\x56\xe5\x49\xb1\xfd\xf9\x19\x25\x06\x0f\xf4\x17\xb8\xd0\x28\xb3\x28\xc1\x55\x35\xa1\x4a\x4e\x15\x91\xee\x8d\x9a\x8a\x30\x33\x06\xa1\x78\xf6\x9c\x8d\x3d\x17\xdc\xa6\x4f\x50\xc4\x77\xc6\x6b\x67\x1f\x09\x21\x58\x6f\xf0\x9b\x3d\x31\x47\x61\x66\x86\x70\x74\x04\x87\x03\x1d\xab\xd3\x0b\xa9\x38\xa9\x0d\x76\x0a\xc7\x0a\x15\xd1\x5d\x0b\x3b\x25\x62\xc6\xec\x76\xc7\xce\x39\xe6\xa9\x0a\x42\x13\x24\x4d\xcc\x0a\x09\x9f\x26\x50\xc4\x77\x34\x5d\x46\x62\x8a\x60\x62\x5a\x63\x32\xb6\x8f\xcc\x0f\xfb\x23\xca\x4b\x54\x84\xbd\x7e\x5c\x9b\x6a\x37\x0c\x82\x6b\x60\x12\x9a\x80\x26\xef\xc3\xea\x39\x17\xe9\x95\xc0\x57\xcb\x77\x92\xcf\x23\xb9\xfc\x0d\x97\x41\x66\x30\xc3\xcd\xad\x2d\xa7\x09\xcc\x70\x69\x8f\x7a\x8d\x0e\xfb\xb8\x5c\x20\x7b\x5d\xd0\x8f\x65\xbf\xb3\x1e\x9d\x25\xb0\xf9\x53\xf3\x65\x73\xc0\x4b\x8a\xb3\xfb\x60\xdc\x71\x60\x9b\x02\xed\xa8\xc6\x7f\x18\x6e\x76\x47\x87\xdd\xe1\x9d\x80\x4b\xaa\xc3\x7d\xe3\x3e\x2f\xf3\xbc\x1b\xfb\x0f\x1e\xaa\xc9\xd3\xc7\xc6\xe9\x07\xa8\x7a\x57\x97\x5e\xb7\x46\x3d\x81\x42\xa6\x28\x4d\xe5\xa5\x31\xbb\xa2\x97\x10\x82\x9b\xdb\xef\xcc\x85\x1a\x22\x63\x63\xd1\xcd\x7f\x0b\x72\xcf\x86\x52\xa7\x40\x9b\x9e\x7f\x26\x1b\xad\xbc\x78\x1a\x15\xeb\x4a\xf2\x72\xc3\x42\xae\x9b\xfa\x04\x8a\x2c\x53\xa8\xa1\xe4\x42\xff\xff\x7f\x03\x34\x6c\x27\x61\x6b\x57\x75\x9d\xda\xc2\xd8\xe8\xd5\x0e\x9d\x9b\xeb\x37\xd8\xe3\x3c\x0f\x5a\x3d\x71\xa3\x3d\xbb\x9d\xde\x9a\x18\xd8\xe9\xd9\x1b\x3e\xe7\x3a\xf8\x6f\x73\xc6\x35\xd1\xbb\xfd\x6c\xe3\x1c\xe7\x77\x69\x6f\x53\xab\x99\xb2\x2f\x27\xcd\x06\xe7\x81\xe3\x59\xcd\xe3\xaf\xad\xf8\x7c\x8b\x57\x46\x21\xb0\x7a\xad\xd9\xf5\x06\x42\x6c\x7b\x5b\x88\x5d\x89\xb5\x31\x72\x42\x63\xec\xf4\xec\xfa\xc4\x1b\xdf\x70\x44\x4a\xa7\xa8\x92\xc0\xaa\xdb\x94\x0b\x5b\xfa\x49\x21\x34\x17\x25\x36\x83\x0e\x4a\xaf\xad\xe3\x5e\x53\xf5\x5e\x55\x3c\x10\x66\xb3\x57\xbd\x2f\x51\x2e\x3f\x14\x0f\xde\x7e\x65\x73\x5b\x91\xca\xb3\x76\x16\xad\x2a\xff\xe2\x41\x61\xa3\x62\xd7\x49\x24\x68\xe9\x65\xf1\x10\xfe\xf2\xd4\x1b\x89\x44\xb5\xef\x85\xc4\x6b\x3c\x3b\x6b\x64\x02\x39\x65\xd3\xf6\x52\xd9\xd5\x31\x7e\xe0\x62\xf9\xa1\x6b\x84\xa8\x31\xec\x0f\x4f\xb6\xb5\x6e\xb4\x7e\xa2\xf2\xb2\xb5\x33\x8f\x66\xd8\x97\x5b\x87\x61\x53\x85\xaa\xb9\xe5\xaf\x6b\xb1\x53\x88\x3c\xa3\xa4\xbe\x50\x67\x52\x5e\x16\x1f\x8a\x07\x15\xa0\x6c\x32\xb3\xaf\x80\xda\x0b\xf0\xd8\x72\x24\xe2\x09\x18\xbb\xc4\xaf\x3a\xf0\xfd\xb8\xb3\x72\x7f\x47\x68\x77\x05\x3a\x27\x7b\x5d\x41\x0d\xb5\x85\x21\x2c\x1d\xf6\x89\xcf\x23\x88\x16\x0b\x14\x69\x60\xe2\x2c\xe2\xbb\xbe\xc3\xf7\x23\x9a\x88\xbd\xf7\xd9\x82\xa4\x73\x3d\x3c\x3f\x4e\x92\xa2\x14\x7a\x52\xd7\xac\x77\x91\x0d\x5c\xf7\x68\x75\x85\x2f\xe6\x22\x60\x17\x7a\x71\x63\x55\x6f\xbd\x5b\x98\x63\xc6\x65\xb2\x31\xba\xce\x64\xe7\x63\x4d\x85\xb5\x76\x63\xc6\x6f\xc1\x52\x68\xae\x1a\xb6\xfe\x5b\xd1\x2e\x66\x35\xc9\xde\x91\xd9\x25\xd5\xee\xd3\xcd\x62\x36\xf1\xac\x2f\x66\x61\xdf\x71\xc6\x5d\x8b\xdd\x59\xc6\x82\xdb\xe7\x08\xe3\xcf\xf3\x9a\xb1\xe3\xaa\x9f\xa8\x01\x7e\x5d\x63\x75\xbe\x07\x6e\x8c\x87\x7f\xf3\xbe\x58\x7f\x2f\x60\xd7\xa8\xdf\x46\x8b\xda\xdb\x77\x6e\xab\x26\x4f\xfd\xc2\xef\x5c\x18\xf7\xa8\xdd\xc3\x2d\x1b\x29\xa3\x36\x71\x9c\x65\x98\x68\x4c\xf7\xfa\xba\x64\xbf\x4c\xf4\x54\xc3\xc0\xda\x7c\xfb\x0c\xec\x26\xa0\xfb\xb8\x62\x8c\xed\x1f\x41\xcf\x25\x82\x31\xb6\xeb\x26\x39\x1c\xa1\xbf\x6b\x3f\x35\x52\x77\x63\xf8\x36\x01\x76\x2a\x6b\x00\xfc\xe3\x6a\xa0\xfe\x8e\xf5\xb3\x25\xbd\xf7\x41\xff\xaf\x00\x00\x00\xff\xff\xa4\xe0\x19\xb0\xa7\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7079, mode: os.FileMode(420), modTime: time.Unix(1487144780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x6b\xf3\x36\x14\xbe\xd7\xaf\x38\x98\xae\xd8\x25\x51\xee\x0b\xb9\x18\x63\x2b\x63\x30\x46\x5b\x76\xb1\x52\x86\x62\x1f\xa7\x5a\x6c\x29\x93\xe5\x84\x60\xf4\xdf\x5f\x64\xc9\xb1\x13\x7f\xa4\x09\x2f\xe5\xbd\xaa\x2a\x4b\xe7\xf9\xd0\xa3\xa3\x54\x15\x24\x98\x72\x81\x10\x14\x5a\x95\xb1\x0e\xc0\x98\xc5\x02\x58\xa9\x25\xac\x51\xa0\x62\x1a\x13\x58\x1d\x40\x97\x9b\xf9\x1a\x05\xd9\xb2\x78\xc3\xd6\x08\x55\x05\xf4\x2f\x3f\x36\x86\x10\x9e\x6f\xa5\xd2\x10\x12\x00\x80\x20\xcd\x75\xe0\x46\x9a\xe7\x18\x10\x37\x5e\x73\xfd\x51\xae\x68\x2c\xf3\x85\x2e\x37\x09\x16\x9b\x85\x2f\xbb\x28\xfe\xcf\x16\xc9\x2a\xf8\xd4\x3a\x7d\xd8\x62\x11\x90\x88\x90\x1d\x53\x1e\xf1\x5f\x48\x73\x4d\x5f\xb4\xe2\x62\x8d\xca\x4f\x59\x6c\xfa\xca\x73\xf4\xff\x27\x2b\xfa\x2c\xf7\x2f\x31\x13\xa2\x5d\x63\x8b\xd1\xdf\x13\x5b\xae\xaa\xe0\x4e\xae\xfe\xfb\x93\xe5\x08\x8f\x4b\xa0\xf5\xc0\x18\x62\xd7\x40\xf7\xa3\x31\xe0\xec\x82\xaa\x2e\x53\x9b\xa1\x78\xce\xd4\xe1\x0f\x3c\x34\xfb\xce\xa7\x5f\x0f\x5b\xa4\x4f\xd2\xfe\xb1\x55\xdd\xc6\x39\x28\x26\xd6\x08\x77\x29\xc7\x2c\xa9\x61\x7f\xb3\xa3\xa2\x5d\xe2\xbf\x75\xcb\xf2\xf4\x38\x59\x66\x19\x5b\x65\xf6\xc3\x43\x55\x01\x8a\x04\x8c\x69\xf7\x8c\x60\xa2\x48\x8c\x21\x86\x90\xb4\x14\x31\x84\x0f\xa7\xe2\x22\x70\x14\xc2\x08\xde\xde\x8b\xda\x53\x2f\x54\xa1\x2e\x95\x38\xce\xba\x49\xcf\x72\x4c\xc7\xdc\xe3\xd6\x47\xdb\x32\xfb\x45\x66\x65\x2e\xc0\x98\x60\xd6\xad\xe2\x04\xd4\x33\x17\x09\xfe\x9c\x65\x57\x50\x0c\xce\x8e\x63\x84\xc0\x97\xca\x68\xe9\x84\x11\x0c\xc9\x18\x27\x7d\xc9\x9c\xe1\x4c\xde\x04\x33\xe1\x8a\x31\x97\x48\x9c\x86\x77\x02\xbf\x67\xa8\x87\x1e\xc8\xfa\xfc\x08\xab\x3f\x78\x01\x3d\xec\x27\xd4\x43\xc8\xe1\xd8\xbd\x98\xc1\x4a\xca\x2c\xf2\x9c\x78\x0a\xb6\x2c\xed\xdf\xbc\xe5\x12\x04\xcf\xa0\xcd\x94\xa7\xdf\xab\xfb\x0f\x2a\x59\xd7\x4d\x59\x56\xa0\x8f\x41\x67\xc3\xc3\x30\xc0\x0c\xb4\x2a\xb1\x3d\xd9\x61\x75\x2f\x03\xea\x5e\xa5\x35\x27\x6c\x24\x8c\xf1\xb7\xf4\x6f\x29\x1f\xee\xfa\x1a\xbd\x77\x17\x21\xc7\xda\xd5\xfd\xf1\x9a\xec\x88\x21\xbe\x2b\xd9\x40\xb5\xd7\x67\x8a\xe6\xdf\x2c\x2b\x31\x74\x81\x74\x91\x8a\x80\x0b\x8d\x2a\x65\x31\x56\xc6\xb3\x2a\xf6\x5c\xc7\x1f\xe0\x96\xb9\xa9\x98\x15\x38\x11\xf8\xc7\xf3\xc3\x6d\x84\x0d\xdc\x26\x42\x3e\xd9\x34\x8e\x98\xbd\x90\x8f\xc2\x9d\xfa\x78\x44\xea\x34\x96\x04\x53\x56\x66\xba\xad\xb0\x65\x82\xc7\xa1\x7d\x08\x7f\x55\x4a\xaa\x34\x0c\x4a\xb1\x11\x72\x2f\xbc\xfe\x9f\x8a\x60\xe6\x86\x51\x74\xde\x9a\x26\x4c\x76\xef\x40\xdf\xdb\x63\xa7\xed\x7f\xba\xa2\x97\x8e\xdc\x84\xcb\xcd\x74\x82\x71\xf3\x30\x5c\xcd\x79\xe2\xac\xaf\x7e\x24\xbe\xb3\xb0\x67\x8c\x91\xef\x50\x7d\x45\xe4\xef\xbf\x38\xf3\xf7\x3f\x54\xe8\x1b\xa7\x6f\x4e\xd1\x94\x7d\x57\xc7\x68\xc4\x9b\x9b\x73\x64\x7f\xfe\x86\x4a\xee\x4f\x7f\x0d\x7b\x8b\x0a\xa0\x94\x36\xd1\x42\xeb\x67\xa3\x38\xde\xa9\xc2\x52\xcc\xd9\x06\xc3\x13\xe1\x33\xc8\x50\xb8\x54\x16\xde\xe2\x54\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xce\xeb\x69\x8b\xbe\xf1\x77\x58\xba\xcb\x72\x1a\xf1\xe6\xb4\xba\x8e\x2b\xb9\xa7\x4e\x80\xdd\x4a\x29\x8d\x3e\x23\xd7\x1e\x64\x4f\xf1\x88\xbe\x13\x22\x75\x02\x2e\xe2\x77\x9e\xae\x6f\x01\x00\x00\xff\xff\x2f\xa1\x45\x6c\x50\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3408, mode: os.FileMode(420), modTime: time.Unix(1487144780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

