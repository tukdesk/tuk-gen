// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcb\x4e\x33\x31\x0c\x85\xd7\xf1\x53\xf8\x9f\x55\xfb\xab\x24\x7b\xa4\xae\xd8\x53\x04\x0f\x80\x72\xf1\x84\x68\xa6\xce\x34\x17\x2a\x14\xe5\xdd\x51\x80\x0a\x89\xdd\x67\x9f\x73\x6c\xcb\xad\xa1\xa3\x39\x30\xe1\x94\x2f\xab\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x81\xa5\x2e\x77\x9e\x18\x36\x6d\x17\xed\x09\x5b\x43\xf9\xf4\xc3\xbd\x03\x84\xf3\x16\x53\xc1\x1d\x88\xc9\x87\xf2\x56\x8d\xb4\xf1\xac\x4a\x5d\x1c\xe5\x45\x19\x9d\x49\xe5\xcb\xaa\x9c\x99\x60\x0f\xf0\xae\xd3\xb0\xbe\xa2\x33\xf2\x39\x5e\x5f\xac\x66\xa6\x74\x53\xc2\x28\x1e\x22\x33\xfe\x77\x46\x0e\x00\x98\x2b\x5b\x3c\x6d\xc4\x3b\x62\x1f\x98\x0e\x98\x63\x4d\x96\x30\x97\x14\xd8\x1f\x30\x6e\x25\xa3\x94\xd2\x19\x79\xda\x4a\x88\xbc\x47\x4a\x29\x26\x6c\x20\xec\x61\x30\xde\x1f\xc7\xbe\x47\xba\xfe\x99\xf1\x1d\x96\x52\xee\x41\x84\xf9\xcb\xfa\xef\x88\x1c\xd6\x91\x15\x89\x4a\x4d\x3c\xba\x20\x3a\x80\xf8\xbd\xee\x88\x16\x6e\x32\x87\x15\x3a\x40\x6b\x48\xec\xc6\x47\x3e\x03\x00\x00\xff\xff\x58\x2f\x1e\xac\x5c\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 348, mode: os.FileMode(420), modTime: time.Unix(1485606521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdf\x6f\xdb\xb6\x13\x7f\xf7\x5f\x71\x5f\xe3\xbb\x42\x2a\x5c\x26\x0f\xc3\x1e\x3a\x78\x40\x9a\xa4\x45\xb0\x36\x69\x9b\x6e\x7b\x08\x82\x42\x3f\x4e\x2e\x63\x99\x72\x48\xaa\xa9\x61\xe8\x7f\x1f\x8e\xa4\x64\x4a\x96\x12\x25\x6b\x1f\xb6\xa2\xa8\x25\xde\xf1\xee\x73\xc7\xfb\x1c\x4f\xdd\x6e\x21\xc5\x8c\x0b\x84\xa9\xba\xcd\x57\x0b\x39\x85\xaa\x3a\x38\x80\xa8\xd4\x05\x2c\x50\xa0\x8c\x34\xa6\x10\x6f\x40\x97\xcb\x17\x0b\x14\x93\xed\x16\xfe\x5f\xc4\x37\xe7\xd1\x0a\xe1\xe5\x1c\x98\x79\x78\x51\x55\x46\xa0\xb4\x2c\x13\x5d\xcb\xd6\x92\x0b\x9d\xc1\x54\xfd\xa4\x2e\x3f\xbc\x7d\x47\xc6\x9b\xad\xb4\x63\x1d\x25\xcb\x68\x81\xb0\xdd\x02\x7b\xef\x9e\xab\x6a\x32\xe1\xab\x75\x21\x35\x04\x13\x00\x80\x69\x1a\xe9\x28\x8e\x14\x1e\xa8\xdb\x7c\x3a\xb1\x6b\x0b\xae\xbf\x94\x31\x4b\x8a\xd5\xc1\xa2\x48\x64\x94\xe9\x83\x34\x96\xd3\x3d\xa1\x2e\x97\x29\xaa\xe5\x41\xbd\xff\x20\x8d\x47\x28\xe9\xcd\x1a\xd5\x74\x12\x4e\x26\x5f\x23\xe9\x60\x7c\x06\x75\x9b\xb3\x8f\xa8\xca\x5c\xbb\x85\x34\x66\xc7\x85\x10\xee\xcd\x6c\x62\x67\x69\x23\x94\xec\x84\x47\x39\x26\xda\x62\xe6\x42\xf9\xa9\xab\x2a\x9b\x12\x98\xc3\x39\xde\xf5\x49\x02\xc1\xf3\x90\x40\x64\xa5\x48\x06\x95\xf0\x1b\x26\xa5\x2e\x24\xa1\x39\x75\xcf\x21\x3c\xef\x1c\x46\x55\xc1\xd6\xa0\x90\xa8\x4b\x29\xe0\xd9\x9e\xdc\x8a\xe9\x4f\x6d\xf1\x65\xf3\x34\x33\xb2\x6a\x52\x39\x2c\xbd\x40\x1e\x76\x3a\x90\x01\x32\x4b\xc9\x83\xfd\xed\xf6\xcd\x59\x29\xe2\x1b\xeb\x62\x67\x60\xe2\xe3\xf5\x33\xd0\x40\x0d\xf6\x41\x85\xf0\x29\x8a\x73\x0c\x42\x32\xcf\xc5\xa2\x0d\x72\x4a\xc5\x68\x14\xce\x52\x14\x9a\x67\x1c\x25\x54\xd5\xf4\x7e\x8b\xa7\x62\xc1\xc5\x9e\xc9\xed\x16\x78\x06\x02\x81\x59\x39\x4c\xa7\xa6\xee\xbb\xee\x9c\x94\xbc\xb8\x6d\x98\x2b\xec\xaa\xa6\x31\x3b\xc1\x2c\x2a\x73\x5d\x7b\x6b\xb4\x45\x6a\x94\x1b\x88\xfa\x0b\x57\x3d\xc7\x11\x02\xd5\x6b\x10\x42\xf0\xdc\xd5\xee\x0c\x50\x4a\x2a\x18\x0b\x98\x67\xc0\x85\x40\x49\x22\xf8\xdf\x1c\x04\xcf\x61\x57\x18\xcd\x31\x3a\x8d\x19\xc9\x5d\x69\x98\x9f\xa4\xb6\x48\xe4\x4f\x63\xf6\x06\xb5\x81\xc2\x6a\xc0\x61\xed\x85\x74\x86\xec\x0b\x9e\x1b\x23\xbe\x65\x27\x4a\x1a\xaf\x0f\x87\xfa\xae\x54\xda\x85\x5b\x47\xfb\xa4\x28\x7b\x60\xa4\x31\x23\xeb\x3d\xe1\x3d\x0c\xab\xae\xd0\x20\xf4\xeb\x75\x87\xcc\x18\x6c\x4a\x7a\x08\x5d\x4b\xab\x07\xa1\x91\xef\x32\x30\x02\xd7\xe5\x87\xb7\x2e\x53\xaf\x4a\x9e\xa7\x28\xdb\xb4\xb0\x71\x36\xd8\x99\x51\x1f\x63\x56\xaf\xf4\x99\x50\x28\xf5\x99\xd0\x45\x90\x14\x79\xb9\x12\xc0\x18\xb3\x44\x31\x1e\x25\xb3\x1a\xa4\xdb\xe3\xd5\xb8\x62\x9e\x11\xb3\xea\x38\x1c\xb2\x63\x63\x52\x39\xd3\x8c\xb1\xb1\xb0\x2e\x91\x9a\xf3\x10\x24\x2b\xbd\x17\x52\xcb\x00\x39\x66\xaf\x65\xb1\x6a\xc3\x1b\x89\xe5\x8f\x75\x1a\x69\x0c\x9c\x6f\xfb\x76\xaf\x6f\xb7\xe1\x29\xbe\x4e\x30\xc7\x9d\x2f\xfb\x76\xaf\x2f\xab\xf2\xa4\xd8\xfe\xfa\x82\x12\x83\x3b\xfa\x17\xb8\xd0\x28\xb3\x28\xc1\x6d\x35\x23\x26\xa7\x8a\x92\xee\xad\x1a\x46\x98\x1d\x83\x50\x3c\x7b\xce\xc6\xc8\x03\xb7\xe5\x13\x14\xf1\x8d\xf1\xda\xb9\x47\x42\x08\x76\xb7\xfb\x7e\x4f\xcc\x51\x98\x9d\x21\xcc\xe7\x70\x38\xd0\xb1\x3a\xbd\x90\xc8\x49\x6d\xb0\x43\x1c\x2b\x54\x94\xee\x5a\xd8\xa1\x88\x59\x2b\xe2\x1b\xf6\x9a\x63\x9e\xaa\x20\x34\x11\xd2\xae\xac\x90\xf0\x79\x66\xee\xc1\x97\x73\x90\x91\x58\x20\x98\x80\x76\x80\x8c\xe1\xb9\xf9\x61\x7f\x46\x79\x89\x8a\x80\xd7\x8f\x3b\x53\xed\x6e\x41\x58\x0d\x46\x82\x12\xd0\xe6\x31\x29\x7d\xcd\x45\x7a\x21\xf0\xd5\xe6\xbd\xe4\xab\x48\x6e\x7e\xc7\x4d\xb0\xc4\x8d\x9d\xe6\x9a\x25\xf6\x69\xb3\x46\xf6\xa6\xa0\x1f\x9b\xe9\x4e\xee\x3b\xe9\xb6\xb5\x52\xe7\xc6\x9e\xb7\x57\x00\xa7\xb7\xc1\xb4\xe3\xc0\x36\x00\xba\x3d\x67\xb0\xc4\x4d\x18\xee\x77\x42\x07\xd5\x16\xce\xd8\xd8\xfc\xc0\x14\x45\xa6\xe0\xea\xfa\xde\xe0\x66\x50\xc8\x14\xa5\xa9\xb0\x34\x66\x17\xf4\x12\x42\x70\x75\xfd\x83\x43\x56\x43\x31\xd7\x4c\x39\x34\x7f\x2d\xb8\x91\x84\x69\xa5\xac\x21\xe6\x83\xc7\xf7\xb8\xb2\x77\x1d\xb4\x5d\xf2\x47\x79\x6e\x2b\xb5\xaf\x9d\x3a\x46\x1a\x54\xae\x57\xec\xdd\x91\x3e\x09\xbc\x86\x61\x9f\x67\x6e\xef\x71\xd3\x3c\x7c\x3e\x14\x77\x84\xcf\xf0\xe1\x43\x89\x72\xf3\xb1\xb8\xf3\x38\x61\x53\xac\x48\xe5\x59\x3b\x0b\xdb\xca\x9f\x6c\x88\x9d\xa8\xd8\x65\x12\x09\x0a\x46\x16\x77\xe1\xaf\x4f\x1d\x79\x24\xaa\xb1\x13\xcf\xee\xc4\x9b\xf3\x9a\x41\x91\x65\x0a\xf5\x0c\x72\xbe\xe2\x1a\x4a\x2e\xf4\x2f\x3f\x3f\xb1\x4e\xff\xdd\x67\xcb\x33\x97\x0b\xf8\xad\xd5\xc3\x7d\x8b\x17\x46\x21\xb0\x7a\xdd\xdd\x36\x83\xc3\x9b\xdf\x92\x3c\x30\x5a\xad\xad\x75\xdb\xa6\x2c\x7b\x8d\xdb\x9e\xc0\xce\x14\xe1\xa3\x35\x76\x72\x7a\x79\xec\xad\xef\x61\x24\xa5\x13\x54\x49\x60\xd5\x6d\x2f\x08\x5b\xfa\x49\x21\x34\x17\x25\x36\x8b\x0e\x4a\xaf\xad\xa3\x5e\x53\x4d\x15\x9a\x72\x5f\x45\x4b\xec\xab\x8f\xc3\xb0\x21\x8e\x6a\x26\xff\x1d\x7d\x3a\xdc\xe1\x19\x15\xe6\x99\x3a\x95\xf2\xbc\xf8\x58\xdc\xa9\x00\x65\x53\x5d\x7d\x35\xdf\x3e\x80\xc7\x32\x88\x12\x4f\xc0\xd8\x39\x7e\xd3\x81\xef\xc7\x5d\xa1\xfd\x24\x6e\x13\x99\x4a\xd7\x23\xb2\x1a\x62\xf2\x10\x96\x4e\xf6\x29\x9f\x73\x88\xd6\x6b\x14\x69\x60\xe2\x2c\xe2\x9b\xbe\x3b\xf9\x11\xbc\xb7\xb3\xe0\x45\x7c\x43\x7c\x33\x5f\xc9\x47\x49\x52\x94\x42\xcf\x20\x33\x33\x84\x3f\xdc\x06\xae\x03\xb4\x98\xfd\xd5\xcc\x07\xf6\xa0\xd7\x57\x56\xf5\xda\x9b\xcc\x5c\x66\x5c\x25\x1b\xa3\xbb\x4a\x76\x3e\x76\xa9\xb0\xd6\xae\xcc\xfa\x35\xd8\x14\x9a\x09\x24\x30\x4b\xad\x68\xd7\xcb\x3a\xc9\xde\x14\xe1\x8a\xea\xe1\x7b\x71\xbd\x9c\x79\xd6\xd7\xcb\xb0\xef\x22\x74\xa3\xb2\xbb\x0a\x2d\xb8\x31\x37\xa0\xbf\xcf\x6b\xa8\x2e\x57\xfd\x89\x1a\xc8\xaf\x9b\x21\x9d\xef\x81\x29\xf2\xf0\x1f\xce\x90\xf5\x37\x04\xbb\x44\xfd\x2e\x5a\xd7\xde\x7e\xf4\x95\x89\x1d\xe2\x77\xe6\xc8\x11\xdc\x3d\xbc\xe7\xee\x63\xd4\x26\x8e\xb2\x0c\x13\x8d\xe9\xa8\x2f\x4e\xfb\xb5\xd2\xc3\x86\x81\xb3\xf9\xfe\x15\xd8\x2d\x40\xf7\xc1\x35\x7a\xf8\xb4\xfa\x3d\xe3\x27\x63\xec\xa1\xe1\x7a\x38\xc2\xe6\x22\x7e\x6a\x98\x6e\xd0\xfc\x3e\xd1\xed\xcf\x95\x7d\xc8\x1f\x47\x80\xfa\xc3\xf6\xbf\x56\xf1\xde\xff\xf0\xfd\x1d\x00\x00\xff\xff\x46\x7d\x3a\x4c\xaf\x17\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 6063, mode: os.FileMode(420), modTime: time.Unix(1486812322, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6b\xeb\x36\x14\x7f\xd7\xa7\x38\x98\xbb\x62\x97\x44\x79\xbf\x90\x87\x31\xb6\xcb\x18\x8c\xd1\x96\x3d\xac\x94\x21\xdb\xc7\xa9\x16\x5b\xca\x64\x39\x21\x18\x7d\xf7\x21\x4b\x8e\x9d\xf8\x4f\x9a\x30\xca\x7d\xaa\x2a\x4b\xe7\xf7\x47\x3f\x1d\xa5\xae\x21\xc5\x8c\x0b\x84\xa0\xd4\xaa\x4a\x74\x00\xc6\xac\x56\xc0\x2a\x2d\x61\x83\x02\x15\xd3\x98\x42\x7c\x04\x5d\x6d\x97\x1b\x14\x64\xc7\x92\x2d\xdb\x20\xd4\x35\xd0\x3f\xfc\xd8\x18\x42\x78\xb1\x93\x4a\x43\x48\x00\x00\x82\xac\xd0\x81\x1b\x69\x5e\x60\x40\xdc\x78\xc3\xf5\x7b\x15\xd3\x44\x16\x2b\x5d\x6d\x53\x2c\xb7\xab\x98\x95\xb8\x2a\xff\xcd\x57\x69\x1c\x5c\x5f\xa4\x8f\x3b\x2c\x03\x12\x11\xb2\x67\xca\x63\xfd\x0d\x59\xa1\xe9\xb3\x56\x5c\x6c\x50\xf9\x29\x8b\x4a\x5f\x78\x81\xfe\xff\x34\xa6\x4f\xf2\xf0\x9c\x30\x21\xba\x35\xb6\x18\xfd\x35\xb5\xe5\xea\x1a\xbe\xc8\xf8\x9f\xdf\x59\x81\xf0\x75\x0d\xb4\x19\x18\x43\xec\x1a\xe8\x7f\x34\x06\x9c\x51\x50\x37\x65\x1a\x1b\x14\x2f\x98\x3a\xfe\x86\xc7\x76\xdf\xe5\xf4\xcb\x71\x87\xf4\x9b\xb4\x7f\x6c\x55\xb7\x71\x09\x8a\x89\x0d\xc2\x97\x8c\x63\x9e\x36\xb0\xbf\xd8\x51\xd9\x2d\xf1\xdf\xfa\x65\x79\x76\x9a\xac\xf2\x9c\xc5\xb9\xfd\xf0\x58\xd7\x80\x22\x05\x63\xba\x3d\x13\x98\x28\x52\x63\x88\x21\x24\xab\x44\x02\xe1\xe3\xb9\xb8\x08\x1c\x85\x30\x82\xd7\xb7\xb2\xf1\xd4\x0b\x55\xa8\x2b\x25\x4e\xb3\x6e\xd2\xb3\x9c\xd2\xb1\xf4\xb8\xcd\xb9\x76\xcc\x7e\x92\x79\x55\x08\x30\x26\x58\xf4\xab\x38\x01\xcd\xcc\x55\x82\x3f\xe6\xf9\x0d\x14\x83\x8b\xe3\x98\x20\xf0\xa9\x32\x3a\x3a\x61\x04\x63\x32\xa6\x49\x5f\x33\x67\x3c\x93\x77\xc1\xcc\xb8\x62\xcc\x35\x12\xe7\xe1\x9d\xc1\x1f\x18\xea\xa1\x47\xb2\xbe\x3c\xc1\xea\x77\x5e\xc2\x00\xfb\x1b\xea\x31\xe4\x70\xea\x5e\x2c\x20\x96\x32\x8f\x3c\x27\x9e\x81\x2d\x4b\x87\x37\x6f\xbd\x06\xc1\x73\xe8\x32\xe5\xe9\x0f\xea\xfe\x85\x4a\x36\x75\x33\x96\x97\xe8\x63\xd0\xdb\xf0\x38\x0e\xb0\x00\xad\x2a\xec\x4e\x76\x5c\xdd\xf3\x88\xba\x17\x69\xcd\x09\x5b\x09\x53\xfc\x2d\xfd\x7b\xca\x87\xfb\xa1\x46\xef\xdd\x55\xc8\xa9\x76\xf5\x70\xba\x26\x7b\x62\x88\xef\x4a\x36\x50\xdd\xf5\x99\xa3\xf9\x27\xcb\x2b\x0c\x5d\x20\x5d\xa4\x22\xe0\x42\xa3\xca\x58\x82\xb5\xf1\xac\xca\x03\xd7\xc9\x3b\xb8\x65\x6e\x2a\x61\x25\xce\x04\xfe\xeb\xe5\xe1\xb6\xc2\x46\x6e\x13\x21\x1f\x6c\x1a\x27\xcc\x41\xc8\x27\xe1\xce\x7d\x3c\x21\xf5\x1a\x4b\x8a\x19\xab\x72\xdd\x55\xd8\x31\xc1\x93\xd0\x3e\x84\x3f\x2b\x25\x55\x16\x06\x95\xd8\x0a\x79\x10\x5e\xff\x0f\x65\xb0\x70\xc3\x28\xba\x6c\x4d\x33\x26\xbb\x77\x60\xe8\xed\xa9\xd3\x0e\x3f\xdd\xd0\x4b\x27\x6e\xc2\xf5\x66\x3a\xc3\xb8\x7d\x18\x6e\xe6\x3c\x73\xd6\x37\x3f\x12\xff\xb3\xb0\x27\x4c\x90\xef\x51\x7d\x46\xe4\x1f\x3e\x39\xf3\x0f\xdf\x55\xe8\x5b\xa7\xef\x4e\xd1\x9c\x7d\x37\xc7\x68\xc2\x9b\xbb\x73\x64\x7f\xfe\x86\x4a\x1e\xce\x7f\x0d\x7b\x8b\x4a\xa0\x94\xb6\xd1\x42\xeb\x67\xab\x38\xd9\xab\xd2\x52\x2c\xd8\x16\xc3\x33\xe1\x0b\xc8\x51\xb8\x54\x96\xde\xe2\x4c\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xde\xeb\x69\x8b\xbe\xf2\x37\x58\xbb\xcb\x72\x1e\xf1\xf6\xb4\xfa\x8e\x2b\x79\xa0\x4e\x80\xdd\x4a\x29\x8d\x3e\x22\xd7\x1e\xe4\x40\xf1\x84\xbe\x33\x22\x4d\x02\xae\xe2\xf7\x9e\xae\xff\x02\x00\x00\xff\xff\x68\xf2\x51\x67\x4a\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1485582894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

