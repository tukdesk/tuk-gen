// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\xeb\x08\x92\x51\x8b\x29\xcc\xcc\xe2\x3c\xfc\xba\xa0\xd9\x59\xd9\xfe\x29\x5b\x67\x31\x98\x72\x99\xa5\x06\xfd\x23\x96\x2a\xbf\xb6\xa5\xcb\x1e\xf7\xe5\xe9\x3b\x00\x00\xff\xff\xe2\xda\x6e\x23\xac\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 428, mode: os.FileMode(420), modTime: time.Unix(1488782067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1488782067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x4d\x6f\xdc\x36\x13\xbe\xef\xaf\x98\x77\x91\x37\x90\x02\x85\x76\x80\xa2\x87\x14\x2e\xe0\xf8\xa3\x30\x9a\xd8\x49\x9c\xb6\x07\xc3\x08\xf4\x31\xda\xc8\xab\xa5\xd6\x24\x15\xc7\x58\xe8\xbf\x17\x43\x52\x12\xa5\x95\xd6\x8a\x83\x00\x4d\x7c\xf0\x4a\x9c\xe1\xcc\xc3\xe1\x3c\xc3\xa1\x36\x1b\x48\x30\xcd\x38\xc2\x5c\xde\xe6\xab\x85\x98\x43\x55\xed\xed\x41\x58\xaa\x02\x16\xc8\x51\x84\x0a\x13\x88\xee\x41\x95\xcb\xe7\x0b\xe4\xb3\xcd\x06\x9e\x14\xd1\xcd\x79\xb8\x42\x78\x79\x00\x4c\x3f\x3c\xaf\x2a\x2d\x90\x4a\x94\xb1\xaa\x65\x6b\x91\x71\x95\xc2\x5c\xfe\x5f\x5e\xbe\x7b\xfd\x86\x8c\x37\x53\x69\xc6\x3a\x8c\x97\xe1\x02\x61\xb3\x01\xf6\xd6\x3e\x57\xd5\x6c\x96\xad\xd6\x85\x50\xe0\xcd\x00\x00\xe6\x49\xa8\xc2\x28\x94\xb8\x27\x6f\xf3\xf9\xcc\x8c\x2d\x32\xf5\xa9\x8c\x58\x5c\xac\xf6\x16\x45\x2c\xc2\x54\xed\x25\x91\x98\x6f\x09\x55\xb9\x4c\x50\x2e\xf7\x2c\x78\x32\xb1\x97\x44\xd3\xf4\xd4\xfd\x1a\xe5\x7c\xe6\xcf\x66\x9f\x43\x61\xc1\x7c\x04\x79\x9b\xb3\xf7\x28\xcb\x5c\xd9\x81\x24\x62\x47\x05\xe7\xf6\x4d\x4f\x62\x67\x49\x23\x14\xec\x38\x0b\x73\x8c\x95\x41\x9e\x71\xe9\x06\xb0\xaa\x4c\x60\xe0\x00\xce\xf1\x6e\x48\xe2\xf1\x2c\xf7\x09\x44\x5a\xf2\x78\x54\x09\xbf\x60\x5c\xaa\x42\x10\x9a\x13\xfb\xec\xc3\xb3\xde\x96\x54\x15\x6c\x34\x0a\x81\xaa\x14\x1c\x9e\x6e\xc9\x8d\x98\xfe\x6a\x8b\x2f\x9b\xa7\x40\xcb\xaa\x59\x65\xb1\x0c\x02\x79\xd8\xe9\x48\x04\xc8\x2c\x05\x0f\xb6\xa7\x9b\x37\x6b\xe5\x22\xba\xc1\x58\x19\x2f\xad\x8d\x99\x0b\xd9\x0d\x42\x83\xd6\xdb\xc6\xe5\xc3\x87\x30\xca\xd1\xf3\xc9\x43\xc6\x17\x5d\x9c\x73\xca\x4a\xad\x70\x96\x20\x57\x59\x9a\xa1\x80\xaa\x9a\xef\xb6\x78\xc2\x17\x19\xdf\x32\xb9\xd9\x40\x96\x02\x47\x60\x46\x0e\xf3\xb9\x26\x40\xdf\x9d\x95\x92\x17\x3b\x0d\x73\x89\x7d\xd5\x24\x62\xc7\x98\x86\x65\xae\x6a\x6f\x8d\x36\x4f\xb4\x72\x03\x51\x7d\xca\xe4\xc0\x8e\xf8\x40\x29\xeb\xf9\xe0\x3d\xb3\xe9\x1b\x00\x0a\x41\x39\x63\x00\x67\x29\x64\x9c\xa3\x20\x11\xfc\xef\x00\x78\x96\x43\x9b\x1b\xcd\x4e\x5a\x8d\x80\xe4\x36\x3b\xf4\x4f\x5c\x5b\xa4\x2a\x90\x44\xec\x0f\x54\x1a\x0a\xab\x01\xfb\xb5\x17\xd2\x19\xb3\xcf\xb3\x5c\x1b\x71\x2d\x5b\x51\xdc\x78\x7d\x78\xa9\x6f\x4a\xa9\xec\x72\xeb\xd5\x3e\x6a\x95\x03\x30\x92\x88\x91\xf5\x81\xe5\x3d\x0c\xab\xce\x50\xcf\x77\xf3\xb5\x45\xa6\x0d\x36\x29\x3d\x86\xae\xa3\x35\x80\x50\xcb\xdb\x08\x4c\xc0\x75\xf9\xee\xb5\x8d\xd4\xab\x32\xcb\x13\x14\x5d\x5a\x98\x75\x36\xd8\x99\x56\x9f\x62\x56\xad\xd4\x19\x97\x28\xd4\x19\x57\x85\x17\x17\x79\xb9\xe2\xc0\x18\x33\x44\xd1\x1e\x05\x33\x1a\xa4\x3b\xe0\x55\xbb\x62\x8e\x11\x3d\x6a\x39\xec\xb3\x23\x6d\x52\x5a\xd3\x8c\xb1\xa9\xb0\x2e\x91\xea\xf3\x18\x24\x23\xdd\x09\xa9\x63\x80\x1c\xb3\x53\x51\xac\xba\xf0\x26\x62\xf9\x6b\x9d\x84\x0a\x3d\xeb\xdb\xbc\xed\xf4\x6d\x27\x3c\xc6\xd7\x31\xe6\xd8\xfa\x32\x6f\x3b\x7d\x19\x95\x47\xad\xed\x9f\x4f\x28\xd0\xbb\xa3\xff\x90\x71\x85\x22\x0d\x63\xdc\x54\x01\x31\x39\x91\x14\x74\x67\x54\x33\x42\xcf\x18\x85\xe2\xd8\xb3\x36\x26\x6e\xb8\x49\x1f\xaf\x88\x6e\xb4\xd7\xde\x39\xe2\x83\xd7\x1e\xf0\xdb\x35\x31\x47\xae\x67\xfa\x70\x70\x00\xfb\x23\x15\xab\x57\x0b\x89\x9c\x54\x06\x7b\xc4\x31\x42\x49\xe1\xae\x85\x3d\x8a\xe8\x31\x73\xdc\xb1\xd3\x0c\xf3\x44\x7a\xbe\x5e\x24\x4d\x4c\x0b\x01\x1f\x03\x28\xa2\x1b\x9a\x2e\x42\xbe\x40\xd0\x6b\x6a\x31\x69\xdb\x07\xfa\x87\xfd\x1d\xe6\x25\x4a\xc2\x5e\x3f\xb6\xa6\xba\x05\x83\xe0\x6a\x98\x84\xc6\xa3\xc9\x53\xa2\x7a\x9a\xf1\xe4\x82\xe3\xab\xfb\xb7\x22\x5b\x85\xe2\xfe\x4f\xbc\xf7\x52\x8d\x19\xae\xae\x0d\x9d\x02\xd3\xe6\x35\x72\x76\x5a\xf2\xf8\xc3\xfd\x1a\x93\x43\xb1\x90\x26\xf6\xbd\xdd\xe8\x6d\x40\xc8\x93\x36\x56\x3a\x0b\x0e\x79\xe2\x35\xeb\xdd\x6c\x6c\x1c\x9e\xac\x97\xba\x33\x6d\x7d\x35\x27\x28\xfd\x39\xf3\x4f\x6e\x3d\x3a\x77\x9f\xac\x97\xb6\x7a\xd0\xd1\xab\x81\xd2\x50\xbd\xba\xc0\x75\x41\x47\xac\x35\x66\xc2\x67\x72\xba\xc6\x65\xf2\x32\xe4\x89\xbf\x5d\x86\x6d\x90\x6c\x60\x02\xb0\xd9\xbb\x3f\x35\xc0\xa7\x65\x9e\xf7\x83\xfc\x2d\x31\x1d\x03\xd8\x71\xa0\x53\x7a\xc0\x4b\xed\x60\x7a\x72\x6c\x27\x84\x09\x5d\xcd\xf5\x00\x8a\x34\x95\xa8\xa0\xcc\xb8\xfa\xf5\x97\x00\x0a\x91\xa0\xd0\x2c\x4d\x22\x76\x41\x2f\x0f\xa6\xc8\x4e\xb2\x59\x02\x1b\x18\x5b\x14\xb6\xe8\xec\x5c\x97\x77\x87\x79\xee\x75\xa8\xb2\xc5\x5a\x7b\x00\x18\x13\xfa\x00\x78\x9d\xad\x32\xe5\xbd\x68\xfa\x1c\xbd\x54\x5b\xd3\xb6\xce\x72\x97\xa9\x4e\x61\xab\xc3\x62\x5e\x8e\x9a\x22\xe7\x20\xc9\xd2\x3a\x68\xbf\x77\x16\xe3\x5a\xbc\xd0\x0a\x9e\xd1\xeb\xcc\xae\x8b\x08\x85\xd6\x29\x23\x26\xec\xad\x31\x72\x42\x63\xec\xf8\xe4\xf2\xc8\x19\xdf\x72\x44\x4a\xc7\x28\x63\xcf\xa8\x1b\x4a\xf9\x1d\xfd\xb8\xe0\x2a\xe3\x25\x36\x83\x16\xca\xa0\xad\xc3\x41\x53\x75\xbd\x2a\xee\x08\xb3\xae\x57\xef\x4a\x14\xf7\xef\x8b\x3b\xa7\x66\x99\xdc\x96\xa4\xf2\xb4\x9b\x32\x9b\xca\x6d\x3e\x69\xd9\x28\xd9\x65\x1c\x72\x4f\x14\x77\x01\xb4\x9b\xf8\xdb\x63\xbb\x53\x81\x72\x6a\x73\x4a\xdc\x98\x4a\x8c\x00\x72\xca\xaa\xdd\xfc\xb8\xba\xfe\x31\x18\xf2\x9f\x26\x06\xc5\x41\x87\x7a\x7c\xb2\x21\xb8\xd6\xfa\x89\x38\x65\x08\xb3\x0a\x97\x38\x94\x48\xfb\x7e\x43\x3d\xd9\x5c\xef\x5a\x02\xf6\xd8\x97\xa5\x94\xc1\x67\xf2\x44\x88\xf3\xe2\x7d\x71\x27\x3d\x14\x4d\x1a\x0e\xb1\xa5\xbb\x01\x5f\xcb\xbd\x04\x53\x14\x1a\x1a\x3b\xca\x0b\x89\x75\x4e\xd3\x86\xe8\xd1\x73\xfc\xa2\x3c\xd7\xbf\x6d\x9e\x86\xcb\x43\xb7\x44\x50\xe3\x54\x97\x08\x39\xa1\x46\x8c\x61\xed\xed\x0e\xc5\xfb\x00\xc2\xf5\x1a\x79\xe2\xe9\x38\x14\xd1\xcd\x50\x57\xf6\x15\x15\xe5\xa8\x28\xb9\xf2\xba\x15\xc4\x07\xcf\xd6\x8c\xe9\xb5\x60\x8c\xc2\xf3\x58\x3b\x78\xe1\xcf\xbf\x37\x87\x27\x54\xf8\xcf\xa1\x00\x8d\x07\xf4\xfa\xcc\xaa\x6c\x55\x2f\xee\xcc\x96\x3d\xd5\x0a\x7e\xef\xfb\x41\xc9\x4d\x7f\x3f\x21\xa2\xe6\x8a\x65\xea\x1d\xb5\xd0\xfd\x8f\x4f\x75\x3e\xb8\x57\xc7\xc1\x78\x7f\xd6\xad\xb7\x61\xd8\xfa\xca\xa8\x5e\x3b\xf7\x1e\x9b\x7a\xb6\x84\x68\xa3\x6d\x09\xb1\x3e\xda\xc0\x1a\x6b\x57\x7a\xfc\x1a\x4c\x8e\xea\xe6\xde\x54\xd9\x4e\x28\x4d\x47\x4c\x1a\x4e\x6b\x67\x43\xd2\x34\xb0\x96\xf6\x74\x19\xb4\x57\xff\x00\xf6\x03\x7d\x22\xac\x97\x7e\xf7\xde\xc1\xb1\x45\xb6\x5e\x3a\xa8\x8c\xb5\x26\xa9\x6d\x8f\xdb\xed\xb9\x0b\x8e\x81\x03\xb7\xe0\xe8\xfb\x43\x59\xaf\x67\xb9\x17\x5c\xf7\xee\xb7\x6b\xe0\xb0\xf6\x4c\x29\xe5\xfb\x81\x8d\xd5\x94\x66\xd5\xba\xeb\x9f\xc0\x76\xeb\x86\xf7\x6d\x64\xbb\xed\x69\x6a\x7d\x8f\x5c\x19\xf7\xbf\xf1\xc2\x58\x7f\x30\x60\x97\xa8\xde\x84\xeb\xda\xdb\xf7\xa6\x26\xf6\x0e\x80\xde\x8d\x71\x42\x0d\xdf\xdf\xd1\x3d\x31\x3a\x2e\x0e\xd3\x14\x63\x85\xc9\xa4\xcf\x4b\xe6\xd3\xc4\x38\x47\x47\xb6\xe8\x07\xe6\x85\xfd\x7a\xf3\x15\x34\x98\x1c\xc6\xef\x71\x7a\xd4\x1f\x9b\x7e\xb6\xc4\x74\xbe\xba\xff\x1b\x00\x00\xff\xff\x4e\x11\xa7\x9d\x4c\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 6988, mode: os.FileMode(420), modTime: time.Unix(1488886648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x8b\xe3\x36\x14\x7d\xd7\xaf\xb8\x98\xed\x60\x0f\x89\xf2\xbe\x90\x87\x52\xda\xa5\x14\xca\xb2\x33\xf4\xa1\xcb\x52\x14\xfb\x3a\xa3\xc6\x96\x52\x59\x4e\x08\x46\xff\xbd\xc8\x92\x13\x7f\x4f\xb2\x9d\x21\x7d\x8a\x2c\xcb\xf7\x9c\x7b\x74\xee\x95\x52\x55\x90\x60\xca\x05\x42\x50\x68\x55\xc6\x3a\x00\x63\x56\x2b\x60\xa5\x96\xb0\x45\x81\x8a\x69\x4c\x60\x73\x02\x5d\xee\x96\x5b\x14\x64\xcf\xe2\x1d\xdb\x22\x54\x15\xd0\xcf\x7e\x6c\x0c\x21\x3c\xdf\x4b\xa5\x21\x24\x00\x00\x41\x9a\xeb\xc0\x8d\x34\xcf\x31\x20\x6e\xbc\xe5\xfa\xa5\xdc\xd0\x58\xe6\x2b\x5d\xee\x12\x2c\x76\x2b\x1f\x76\x55\xfc\x93\xad\x92\x4d\x70\xd5\x3a\x7d\xda\x63\x11\x90\x88\x90\x03\x53\x1e\xf1\x2f\x48\x73\x4d\x9f\xb4\xe2\x62\x8b\xca\x4f\x59\x6c\xfa\xcc\x73\xf4\xcf\xc9\x86\x7e\x91\xc7\xa7\x98\x09\x71\x59\x63\x83\xd1\x5f\x13\x1b\xae\xaa\xe0\x83\xdc\xfc\xfd\x3b\xcb\x11\x3e\xae\x81\xd6\x03\x63\x88\x5d\x03\xed\x97\xc6\x80\x93\x0b\xaa\x3a\x4c\x55\x2d\x41\x31\xb1\x45\xf8\xb0\xdf\xd5\x9f\x7e\x56\x3c\x67\xea\xf4\x1b\x9e\x6c\x00\xb7\xc6\xbe\x6c\x62\xda\x47\x9e\xba\x99\x32\xcb\xd8\x26\xb3\xb3\x8f\x55\x05\x28\x12\x30\xc6\xaf\x7e\x3e\xed\x91\x7e\x92\xf6\xe7\x12\x67\x69\xd7\xb4\x9e\x3c\x72\xca\x31\x4b\x6a\xf0\x5f\xec\xa8\x68\x03\xd7\xef\xfa\xd8\x7e\x72\x0a\xde\xbd\x9e\x65\x60\x08\x49\x4b\x11\x43\xf8\xd8\x55\x27\x82\x4b\xfe\x61\x04\x5f\xbf\x15\xf5\xc6\x78\xb5\x14\xea\x52\x89\xf3\xac\x9b\xf4\x4c\x27\x55\x5c\x7a\xf0\xda\x20\x5e\x9d\x9f\x64\x56\xe6\x02\x8c\x09\x16\xed\x18\x2e\x85\x7a\x66\x8e\xa2\x53\xe9\xbb\xe8\x0d\xa4\x1e\xb0\x73\xe2\xbd\x01\xc1\x1f\xb3\xec\x3e\x0a\xb6\x97\xbf\x5b\xe6\x73\x7c\x8d\x99\x15\xa6\x5b\x4f\x61\x04\x63\x0a\x0d\xf3\xf4\xa8\xfd\xda\x5b\x9e\xd1\xf4\x0b\x2f\x60\x00\xf9\x09\xf5\x00\x30\x1c\x2d\xd2\x05\x6c\xa4\xcc\x22\xcf\x83\xa7\x60\x03\xd2\x5e\xf5\xaf\xd7\x20\x78\x06\x97\x8d\xf3\x7c\xbb\x11\xff\x44\x25\xeb\x88\x29\xcb\x0a\xf4\xaa\xb5\x56\x3f\x8e\x84\x5e\x80\x56\x25\x5e\x5c\x35\x9e\xce\x53\x3f\x9d\x67\x69\xa5\x08\x1b\xda\xa3\x9c\x2d\xe5\x9b\x03\x87\x07\x18\x95\x69\x1e\x69\xb4\x3b\x3e\x9c\x0d\x74\x20\x86\xf8\x2e\x64\x6d\xd2\x1a\x92\x19\xab\x5e\x61\xa8\x4e\x9f\x9c\xf3\x54\xdf\xe5\x2d\x5b\xf5\xda\xea\x95\xce\xea\x23\x87\x53\x2d\x78\xda\x5f\xdd\x26\x3f\x67\xb1\x4e\xdc\xeb\x5d\xd6\x01\xb8\xc9\x68\x9d\x2f\xa7\xbc\xd6\xe3\x7f\x83\xdd\xba\xe2\x1d\x86\x39\x4e\x99\xae\x0f\x39\x75\x32\xce\x58\xaf\x19\xcd\xd1\xfc\x83\x65\x25\x86\xce\x90\xce\x52\x11\x70\xa1\x51\xa5\x2c\xc6\xca\x78\x56\xc5\x91\xeb\xf8\x05\xdc\xb2\xe6\x62\xf1\x7a\x3f\x8f\x59\x81\x23\x8d\xee\x63\x7f\xe3\x47\x2a\x8d\x90\x61\x5f\xbe\xa2\xd7\x5f\x10\xfb\x65\x30\x0d\xda\x51\x7a\x0c\x37\xc1\x94\x95\x99\xbe\x44\xd8\x33\xc1\xe3\xd0\x5e\xeb\x7e\x56\x4a\xaa\x34\x0c\x4a\xb1\x13\xf2\x28\xbc\x42\x3f\x14\xc1\xc2\x0d\xa3\xa8\x7f\x96\xce\x6c\x83\x3b\xf1\x87\xea\x9f\xcf\xd4\xe1\xab\x1b\x8e\xc0\x89\x5a\x79\xfd\xf4\x9f\x61\xdc\x5c\x01\xfe\x03\xe7\xf9\xdb\xc0\xd8\x31\x32\xc1\xf8\x7e\x52\x7c\xc1\x18\xf9\x01\xd5\xbd\xcb\xe8\xe1\x2e\x75\xf4\xf0\xbf\x2a\xa4\x66\x2f\xde\xdd\x99\x63\x62\xbf\xc5\x4d\x75\x42\xce\xef\x36\xa7\xfd\x4f\x19\x2a\x79\xec\xfe\xc5\xf4\xaa\x16\x40\x29\x6d\xfc\x8a\x76\x0b\x1a\x91\xe2\x83\x2a\x2c\xc5\x9c\xed\x30\xec\x68\xb5\x80\x0c\x85\xb3\x7a\xe1\x77\x25\x95\x0a\xb8\x0f\x69\x3f\x72\x79\x7a\x84\xd6\x31\x6f\x83\x7e\xe5\xdf\x60\xed\x2a\xb0\x5b\x37\xcd\x06\xb7\x37\x49\xc9\x23\x75\x09\xd8\x4f\x29\xa5\xd1\x35\xe9\xda\xbd\x1f\x64\x3c\x91\x5f\x87\x48\x6d\x9a\x57\xf1\x5b\x67\xec\xbf\x01\x00\x00\xff\xff\xd0\x98\x2c\xb2\xa5\x10\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 4261, mode: os.FileMode(420), modTime: time.Unix(1488782073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

