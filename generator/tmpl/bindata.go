// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1487144781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6d\x6f\xd3\xc8\x13\x7f\x9f\x4f\x31\x7f\xeb\x7f\xc8\x46\x61\x5b\xa4\xd3\xbd\xe0\xd4\x93\xa0\x0f\xa8\x3a\x68\x81\x72\x77\x2f\xaa\x0a\xf9\x61\x1c\xdc\x38\xeb\x74\x77\x4d\x89\x22\x7f\xf7\xd3\xec\xae\x9d\xb5\x63\x27\xa6\x80\xc4\x81\x10\xb1\x3d\xb3\x33\xbf\x99\x9d\xf9\xed\x03\xeb\x35\x24\x98\x66\x1c\xc1\x93\x77\xf9\x62\x26\x3c\xa8\xaa\x83\x03\x08\x4b\x55\xc0\x0c\x39\x8a\x50\x61\x02\xd1\x0a\x54\x39\x7f\x32\x43\x3e\x59\xaf\xe1\xff\x45\x74\x7b\x11\x2e\x10\x9e\x1d\x01\xd3\x0f\x4f\xaa\x4a\x0b\xa4\x12\x65\xac\x6a\xd9\x52\x64\x5c\xa5\xe0\xc9\x5f\xe4\xd5\xdb\x57\xaf\xc9\x78\x33\x94\x46\x2c\xc3\x78\x1e\xce\x10\xd6\x6b\x60\x6f\xec\x73\x55\x4d\x26\xd9\x62\x59\x08\x05\xfe\x04\x00\xc0\x4b\x42\x15\x46\xa1\xc4\x03\x79\x97\x7b\x13\xf3\x6d\x96\xa9\x8f\x65\xc4\xe2\x62\x71\x30\x2b\x62\x11\xa6\xea\x20\x89\x84\xb7\x25\x54\xe5\x3c\x41\x39\x3f\xb0\xe0\xc9\xc4\x41\x12\x8d\xd3\x53\xab\x25\x4a\x6f\x12\x4c\x26\x9f\x42\x61\xc1\x7c\x00\x79\x97\xb3\x77\x28\xcb\x5c\xd9\x0f\x49\xc4\x8e\x0b\xce\xed\x9b\x1e\xc4\xce\x93\x46\x28\xd8\x49\x16\xe6\x18\x2b\x83\x3c\xe3\xd2\x4d\x60\x55\x99\xc4\xc0\x11\x5c\xe0\x7d\x9f\xc4\xe7\x59\x1e\x10\x88\xb4\xe4\xf1\xa0\x12\x7e\xc6\xb8\x54\x85\x20\x34\xa7\xf6\x39\x80\xc7\x9d\x29\xa9\x2a\x58\x6b\x14\x02\x55\x29\x38\x3c\xda\x92\x1b\x31\xfd\xa9\x2d\x3e\x6b\x9e\xa6\x5a\x56\x4d\x2a\x8b\xa5\x17\xc8\x7e\xa7\x03\x19\x20\xb3\x94\x3c\xd8\x1e\x6e\xde\xac\x95\xcb\xe8\x16\x63\x65\xbc\x6c\x6c\x4c\x5c\xc8\x6e\x12\x1a\xb4\xfe\x36\xae\x00\xde\x87\x51\x8e\x7e\x40\x1e\x32\x3e\x6b\xe3\xf4\xa8\x2a\xb5\xc2\x79\x82\x5c\x65\x69\x86\x02\xaa\xca\xdb\x6d\xf1\x94\xcf\x32\xbe\x65\x72\xbd\x86\x2c\x05\x8e\xc0\x8c\x1c\x3c\x4f\x37\x40\xd7\x9d\x95\x92\x17\x3b\x0c\x73\x89\x5d\xd5\x24\x62\x27\x98\x86\x65\xae\x6a\x6f\x8d\x36\x4f\xb4\x72\x03\x51\x7d\xcc\x64\xcf\x8c\x04\x40\x25\xeb\x07\xe0\x3f\xb6\xe5\x3b\x05\x14\x82\x6a\xc6\x00\xce\x52\xc8\x38\x47\x41\x22\xf8\xdf\x11\xf0\x2c\x87\x4d\x6d\x34\x33\x69\x35\xa6\x24\xb7\xd5\xa1\x7f\xe2\xda\x22\xb1\x40\x12\xb1\x97\xa8\x34\x14\x56\x03\x0e\x6a\x2f\xa4\x33\x64\x9f\x67\xb9\x36\xe2\x5a\xb6\xa2\xb8\xf1\xba\x3f\xd4\xd7\xa5\x54\x36\xdc\x3a\xda\x07\x45\xd9\x03\x23\x89\x18\x59\xef\x09\x6f\x3f\xac\xba\x42\xfd\xc0\xad\xd7\x0d\x32\x6d\xb0\x29\xe9\x21\x74\x2d\xad\x1e\x84\x5a\xbe\xc9\xc0\x08\x5c\x57\x6f\x5f\xd9\x4c\xbd\x28\xb3\x3c\x41\xd1\x6e\x0b\x13\x67\x83\x9d\x69\xf5\x31\x66\xd5\x42\x9d\x73\x89\x42\x9d\x73\x55\xf8\x71\x91\x97\x0b\x0e\x8c\x31\xd3\x28\xda\xa3\x60\x46\x83\x74\x7b\xbc\x6a\x57\xcc\x31\xa2\xbf\xda\x1e\x0e\xd8\xb1\x36\x29\xad\x69\xc6\xd8\x58\x58\x57\x48\xfc\x3c\x04\xc9\x48\x77\x42\x6a\x19\x20\xc7\xec\x4c\x14\x8b\x36\xbc\x91\x58\xfe\x5a\x26\xa1\x42\xdf\xfa\x36\x6f\x3b\x7d\xdb\x01\x0f\xf1\x75\x82\x39\x6e\x7c\x99\xb7\x9d\xbe\x8c\xca\x83\x62\xfb\xe7\x23\x0a\xf4\xef\xe9\x5f\xc8\xb8\x42\x91\x86\x31\xae\xab\x29\x75\x72\x22\x29\xe9\xce\x57\xdd\x11\x7a\xc4\x20\x14\xc7\x9e\xb5\x31\x72\xc2\x4d\xf9\xf8\x45\x74\xab\xbd\x76\xd6\x91\x00\xfc\xcd\x02\xbf\xcd\x89\x39\x72\x3d\x32\x80\xa3\x23\x38\x1c\x60\xac\x0e\x17\x52\x73\x12\x0d\x76\x1a\xc7\x08\x25\xa5\xbb\x16\x76\x5a\x44\x7f\x33\xcb\x1d\x3b\xcb\x30\x4f\xa4\x1f\xe8\x20\x69\x60\x5a\x08\xf8\x30\x85\x22\xba\xa5\xe1\x22\xe4\x33\x04\x1d\xd3\x06\x93\xb6\x7d\xa4\x7f\xd8\xdf\x61\x5e\xa2\x24\xec\xf5\xe3\xc6\x54\x9b\x30\x08\xae\x86\x49\x68\x7c\x1a\x3c\x26\xab\x67\x19\x4f\x2e\x39\xbe\x58\xbd\x11\xd9\x22\x14\xab\x3f\x71\xe5\xa7\x1a\x33\x5c\xdf\x98\x76\x9a\xc2\x1c\x57\x66\xab\xd7\xe8\xb0\xf7\xab\x25\xb2\x97\x05\xfd\x98\xec\x77\xe6\xa3\x33\x05\xa6\x7e\xea\x7c\x99\x1a\x70\x8a\xe2\xf4\xce\xf7\x3a\x0e\x0c\x29\xd0\x8a\xaa\xfd\x07\xc1\x36\x3b\x5a\xec\x16\xef\x14\x6c\x51\x1d\x8e\x8d\xfb\xac\xcc\xf3\x6e\xec\x3f\x78\xa8\xba\x4e\xbf\x34\x4e\x37\x40\xd9\x3b\xbb\xf4\xba\x33\xea\x29\x14\x22\x41\xa1\x3b\x2f\x89\xd8\x25\xbd\x04\xe0\x5f\xdf\x7c\xe7\x5c\xc8\xa1\x64\x6c\x4d\xba\xfe\x6b\x40\x8e\x24\x94\xba\x04\xda\xe9\xf9\x6f\x66\xa3\x55\x17\x0f\x4b\xc5\xa6\x93\x9c\xda\x30\x90\x6b\x52\x9f\x42\x91\xa6\x12\x15\x94\x19\x57\xbf\xfd\x3a\x90\x86\xdd\x49\xd8\xc9\xaa\x96\xa9\x0d\x8c\x2d\xae\xb6\xe8\xec\x58\x97\x60\x9f\xe7\xb9\xdf\xe2\xc4\x2d\x7a\xb6\x2b\xbd\x31\x31\xb0\xd2\xb3\x57\xd9\x22\x53\xfe\xd3\x66\x8f\xab\xa3\xb7\xeb\xd9\xd6\x3e\xce\x65\x69\x67\x51\xab\x33\x65\x5e\x8e\x9b\x05\xce\x01\x97\xa5\x75\x1e\xff\x68\xc5\xe7\x5a\xbc\xd4\x0a\xbe\xd1\x6b\x8d\xae\x17\x10\xca\xb6\xb3\x84\x98\x99\xd8\x18\x23\x27\xf4\x8d\x9d\x9c\x5e\x1d\x3b\xdf\xb7\x1c\x91\xd2\x09\xca\xd8\x37\xea\xa6\xe4\x82\x96\x7e\x5c\x70\x95\xf1\x12\x9b\x8f\x16\x4a\xaf\xad\xe7\xbd\xa6\xea\xb5\xaa\xb8\x27\xcc\x7a\xad\x7a\x5b\xa2\x58\xbd\x2b\xee\x9d\xf5\xca\xd4\xb6\x24\x95\x47\xed\x2a\x5a\x57\xee\xc1\x83\xc2\x46\xc9\xae\xe2\x90\xd3\xd4\x8b\xe2\x3e\xf8\xfd\xa1\x27\x12\x81\x72\xec\x81\xc4\x21\x9e\xbd\x3d\x32\x85\x9c\xaa\x69\x77\xab\xec\x63\x8c\x1f\xb8\x59\x7e\xe8\x1e\xa1\xd4\xe8\xec\x0f\x0f\x36\xbd\xae\xb5\x7e\xa2\xf6\x32\xbd\xb3\x08\xe7\xd8\x57\x5b\x87\x41\xd3\x85\xb2\x39\xe5\x6f\x7a\xb1\xd3\x88\x59\x4a\x45\x7d\x2e\x4f\x85\xb8\x28\xde\x15\xf7\xd2\x47\xd1\x54\x66\x5f\x03\xb5\x27\xe0\x4b\xdb\x91\x12\x4f\xc0\xd8\x05\x7e\x56\xbe\xeb\xc7\xee\x95\xfb\x19\xa1\xcd\x0a\xb4\x4f\x76\x58\x41\x0e\xd1\xc2\x10\x96\x4e\xf6\x29\x9f\x47\x10\x2e\x97\xc8\x13\x5f\xc7\x59\x44\xb7\x7d\x9b\xef\x2f\x20\x91\xe3\xa2\xe4\xca\x6f\x93\x46\x00\xbe\xa5\x89\x51\xed\x4f\xb2\x9d\x9d\xeb\xc5\xda\xc9\xd3\xc0\xfb\xde\x7d\x3a\x82\xd0\x3f\x85\x02\x34\x1e\xd0\x31\x9a\xc8\x2c\x89\x17\xf7\x7a\xba\xfc\x47\x5a\x21\xe8\x5c\x15\x95\xdc\x1c\xe5\x46\x64\xd5\x9c\xa6\x0d\xcd\xd1\x69\xa9\x7b\xcf\x38\xad\x09\xd1\xb9\x25\xe8\xcd\xf9\x27\x7d\xca\x32\x5d\xb4\xbc\x36\xaa\x37\xce\x11\xd7\x96\x9d\xa5\x09\x6d\x74\x43\x13\xd6\xc7\x26\xb1\xc6\xda\xb5\xfe\x7e\x03\xa6\x3e\xf5\x39\xce\x90\x6b\x2b\x95\xcb\x79\x5d\xc1\xce\x79\xc4\xa6\x64\xff\xd6\x71\x39\x9f\x3a\xd6\x97\xf3\xa0\x6f\xaf\x68\xef\x1c\xec\x46\xd1\x80\x1b\xb3\x3f\x74\xc7\x39\x2b\x9d\xcd\x55\x7f\xa2\x06\xf2\x6b\x57\x2d\xeb\x7b\xe0\x38\x7e\xf8\x95\x87\xf1\xfa\x32\x86\x5d\xa1\x7a\x1d\x2e\x6b\x6f\xdf\xbb\x17\xb0\xc3\xaa\x9d\xd3\xf8\x08\x62\x3c\xdc\xb1\x4b\x61\xc4\xc1\xcf\xd3\x14\x63\x85\xc9\xa8\xab\x3b\x73\xed\x33\xdc\x14\x03\x53\xf4\xed\x0b\xb1\x5b\x87\xf6\x02\x4b\x1b\x1b\x1f\x48\xcf\x41\x8d\x31\xb6\xef\xb4\x3e\x1c\xa1\xbb\x33\x7a\x68\xa4\xf6\x54\xf6\x6d\x02\xfc\xba\x55\xa1\xbf\x15\xea\xbb\xc2\x9f\xad\xf6\x9d\xff\x34\xf9\x37\x00\x00\xff\xff\xde\x79\x01\xc9\x0b\x1d\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7435, mode: os.FileMode(420), modTime: time.Unix(1487150763, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x6b\xf3\x36\x14\xbe\xd7\xaf\x38\x98\xae\xd8\x25\x51\xee\x0b\xb9\x18\x63\x2b\x63\x30\x46\x5b\x76\xb1\x52\x86\x62\x1f\xa7\x5a\x6c\x29\x93\xe5\x84\x60\xf4\xdf\x5f\x64\xc9\xb1\x13\x7f\xa4\x09\x2f\xe5\xbd\xaa\x2a\x4b\xe7\xf9\xd0\xa3\xa3\x54\x15\x24\x98\x72\x81\x10\x14\x5a\x95\xb1\x0e\xc0\x98\xc5\x02\x58\xa9\x25\xac\x51\xa0\x62\x1a\x13\x58\x1d\x40\x97\x9b\xf9\x1a\x05\xd9\xb2\x78\xc3\xd6\x08\x55\x05\xf4\x2f\x3f\x36\x86\x10\x9e\x6f\xa5\xd2\x10\x12\x00\x80\x20\xcd\x75\xe0\x46\x9a\xe7\x18\x10\x37\x5e\x73\xfd\x51\xae\x68\x2c\xf3\x85\x2e\x37\x09\x16\x9b\x85\x2f\xbb\x28\xfe\xcf\x16\xc9\x2a\xf8\xd4\x3a\x7d\xd8\x62\x11\x90\x88\x90\x1d\x53\x1e\xf1\x5f\x48\x73\x4d\x5f\xb4\xe2\x62\x8d\xca\x4f\x59\x6c\xfa\xca\x73\xf4\xff\x27\x2b\xfa\x2c\xf7\x2f\x31\x13\xa2\x5d\x63\x8b\xd1\xdf\x13\x5b\xae\xaa\xe0\x4e\xae\xfe\xfb\x93\xe5\x08\x8f\x4b\xa0\xf5\xc0\x18\x62\xd7\x40\xf7\xa3\x31\xe0\xec\x82\xaa\x2e\x53\x9b\xa1\x78\xce\xd4\xe1\x0f\x3c\x34\xfb\xce\xa7\x5f\x0f\x5b\xa4\x4f\xd2\xfe\xb1\x55\xdd\xc6\x39\x28\x26\xd6\x08\x77\x29\xc7\x2c\xa9\x61\x7f\xb3\xa3\xa2\x5d\xe2\xbf\x75\xcb\xf2\xf4\x38\x59\x66\x19\x5b\x65\xf6\xc3\x43\x55\x01\x8a\x04\x8c\x69\xf7\x8c\x60\xa2\x48\x8c\x21\x86\x90\xb4\x14\x31\x84\x0f\xa7\xe2\x22\x70\x14\xc2\x08\xde\xde\x8b\xda\x53\x2f\x54\xa1\x2e\x95\x38\xce\xba\x49\xcf\x72\x4c\xc7\xdc\xe3\xd6\x47\xdb\x32\xfb\x45\x66\x65\x2e\xc0\x98\x60\xd6\xad\xe2\x04\xd4\x33\x17\x09\xfe\x9c\x65\x57\x50\x0c\xce\x8e\x63\x84\xc0\x97\xca\x68\xe9\x84\x11\x0c\xc9\x18\x27\x7d\xc9\x9c\xe1\x4c\xde\x04\x33\xe1\x8a\x31\x97\x48\x9c\x86\x77\x02\xbf\x67\xa8\x87\x1e\xc8\xfa\xfc\x08\xab\x3f\x78\x01\x3d\xec\x27\xd4\x43\xc8\xe1\xd8\xbd\x98\xc1\x4a\xca\x2c\xf2\x9c\x78\x0a\xb6\x2c\xed\xdf\xbc\xe5\x12\x04\xcf\xa0\xcd\x94\xa7\xdf\xab\xfb\x0f\x2a\x59\xd7\x4d\x59\x56\xa0\x8f\x41\x67\xc3\xc3\x30\xc0\x0c\xb4\x2a\xb1\x3d\xd9\x61\x75\x2f\x03\xea\x5e\xa5\x35\x27\x6c\x24\x8c\xf1\xb7\xf4\x6f\x29\x1f\xee\xfa\x1a\xbd\x77\x17\x21\xc7\xda\xd5\xfd\xf1\x9a\xec\x88\x21\xbe\x2b\xd9\x40\xb5\xd7\x67\x8a\xe6\xdf\x2c\x2b\x31\x74\x81\x74\x91\x8a\x80\x0b\x8d\x2a\x65\x31\x56\xc6\xb3\x2a\xf6\x5c\xc7\x1f\xe0\x96\xb9\xa9\x98\x15\x38\x11\xf8\xc7\xf3\xc3\x6d\x84\x0d\xdc\x26\x42\x3e\xd9\x34\x8e\x98\xbd\x90\x8f\xc2\x9d\xfa\x78\x44\xea\x34\x96\x04\x53\x56\x66\xba\xad\xb0\x65\x82\xc7\xa1\x7d\x08\x7f\x55\x4a\xaa\x34\x0c\x4a\xb1\x11\x72\x2f\xbc\xfe\x9f\x8a\x60\xe6\x86\x51\x74\xde\x9a\x26\x4c\x76\xef\x40\xdf\xdb\x63\xa7\xed\x7f\xba\xa2\x97\x8e\xdc\x84\xcb\xcd\x74\x82\x71\xf3\x30\x5c\xcd\x79\xe2\xac\xaf\x7e\x24\xbe\xb3\xb0\x67\x8c\x91\xef\x50\x7d\x45\xe4\xef\xbf\x38\xf3\xf7\x3f\x54\xe8\x1b\xa7\x6f\x4e\xd1\x94\x7d\x57\xc7\x68\xc4\x9b\x9b\x73\x64\x7f\xfe\x86\x4a\xee\x4f\x7f\x0d\x7b\x8b\x0a\xa0\x94\x36\xd1\x42\xeb\x67\xa3\x38\xde\xa9\xc2\x52\xcc\xd9\x06\xc3\x13\xe1\x33\xc8\x50\xb8\x54\x16\xde\xe2\x54\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xce\xeb\x69\x8b\xbe\xf1\x77\x58\xba\xcb\x72\x1a\xf1\xe6\xb4\xba\x8e\x2b\xb9\xa7\x4e\x80\xdd\x4a\x29\x8d\x3e\x23\xd7\x1e\x64\x4f\xf1\x88\xbe\x13\x22\x75\x02\x2e\xe2\x77\x9e\xae\x6f\x01\x00\x00\xff\xff\x2f\xa1\x45\x6c\x50\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3408, mode: os.FileMode(420), modTime: time.Unix(1487144780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

