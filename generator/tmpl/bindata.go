// Code generated by go-bindata.
// sources:
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcb\x4e\x33\x31\x0c\x85\xd7\xf1\x53\xf8\x9f\x55\xfb\xab\x24\x7b\xa4\xae\xd8\x53\x04\x0f\x80\x72\xf1\x84\x68\xa6\xce\x34\x17\x2a\x14\xe5\xdd\x51\x80\x0a\x89\xdd\x67\x9f\x73\x6c\xcb\xad\xa1\xa3\x39\x30\xe1\x94\x2f\xab\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x81\xa5\x2e\x77\x9e\x18\x36\x6d\x17\xed\x09\x5b\x43\xf9\xf4\xc3\xbd\x03\x84\xf3\x16\x53\xc1\x1d\x88\xc9\x87\xf2\x56\x8d\xb4\xf1\xac\x4a\x5d\x1c\xe5\x45\x19\x9d\x49\xe5\xcb\xaa\x9c\x99\x60\x0f\xf0\xae\xd3\xb0\xbe\xa2\x33\xf2\x39\x5e\x5f\xac\x66\xa6\x74\x53\xc2\x28\x1e\x22\x33\xfe\x77\x46\x0e\x00\x98\x2b\x5b\x3c\x6d\xc4\x3b\x62\x1f\x98\x0e\x98\x63\x4d\x96\x30\x97\x14\xd8\x1f\x30\x6e\x25\xa3\x94\xd2\x19\x79\xda\x4a\x88\xbc\x47\x4a\x29\x26\x6c\x20\xec\x61\x30\xde\x1f\xc7\xbe\x47\xba\xfe\x99\xf1\x1d\x96\x52\xee\x41\x84\xf9\xcb\xfa\xef\x88\x1c\xd6\x91\x15\x89\x4a\x4d\x3c\xba\x20\x3a\x80\xf8\xbd\xee\x88\x16\x6e\x32\x87\x15\x3a\x40\x6b\x48\xec\xc6\x47\x3e\x03\x00\x00\xff\xff\x58\x2f\x1e\xac\x5c\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 348, mode: os.FileMode(420), modTime: time.Unix(1485606521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x5b\x6f\xdb\xb8\x12\x7e\xf7\xaf\x98\x63\x9c\x53\x50\x85\x4b\xe7\xe1\xe0\x3c\xf4\xc0\x0b\xa4\x4d\x5a\x04\xdb\x26\x6d\xdd\xdd\x7d\x08\x8a\x42\x97\x91\xcb\x58\xa6\x1c\x92\x6a\x6a\x18\xfa\xef\x8b\x21\xa9\x9b\x2d\x3b\x8a\xbb\xbb\x45\x01\x4b\x9c\xe1\xf0\x9b\x6f\x2e\x1c\x65\xbb\x85\x04\x53\x21\x11\xc6\xfa\x3e\x5b\x2d\xd4\x18\xca\x72\x3a\x85\xb0\x30\x39\x2c\x50\xa2\x0a\x0d\x26\x10\x6d\xc0\x14\xcb\x17\x0b\x94\xa3\xed\x16\xfe\x9d\x47\x77\xd7\xe1\x0a\xe1\xe5\x0c\xb8\x7d\x78\x51\x96\x56\xa0\x8d\x2a\x62\x53\xc9\xd6\x4a\x48\x93\xc2\x58\xff\x47\xcf\x3f\xbe\x7b\x4f\xc6\xeb\xad\xb4\x63\x1d\xc6\xcb\x70\x81\xb0\xdd\x02\xff\xe0\x9f\xcb\x72\x34\x12\xab\x75\xae\x0c\xb0\x11\x00\xc0\x38\x09\x4d\x18\x85\x1a\xa7\xfa\x3e\x1b\x8f\xdc\xda\x42\x98\x6f\x45\xc4\xe3\x7c\x35\x5d\xe4\xb1\x0a\x53\x33\x4d\x22\x35\xde\x13\x9a\x62\x99\xa0\x5e\x4e\xab\xfd\xd3\x24\x1a\xa0\x64\x36\x6b\xd4\xe3\x51\x30\x1a\x7d\x0f\x95\x87\xf1\x15\xf4\x7d\xc6\x3f\xa1\x2e\x32\xe3\x17\x92\x88\xbf\xce\xa5\xf4\x6f\x76\x13\xbf\x4a\x6a\xa1\xe2\x17\x22\xcc\x30\x36\x0e\xb3\x90\xba\x4d\x5d\x59\x3a\x4a\x60\x06\xd7\xf8\xd0\x27\x61\x52\x64\x01\x81\x48\x0b\x19\x1f\x54\xc2\x1f\x18\x17\x26\x57\x84\xe6\xd2\x3f\x07\xf0\x7c\x27\x18\x65\x09\x5b\x8b\x42\xa1\x29\x94\x84\x67\x7b\x72\x27\xa6\x7f\x95\xc5\x97\xf5\xd3\xc4\xca\xca\x51\xe9\xb1\xf4\x02\x79\xfc\xd0\x03\x0c\x90\x59\x22\x0f\xf6\xb7\xbb\x37\x6f\x25\x8f\xee\xdc\x11\x8d\x81\x51\x1b\x6f\x9b\x81\x1a\x2a\xdb\x07\x15\xc0\xe7\x30\xca\x90\x05\x64\x5e\xc8\x45\x17\xe4\x98\x92\xd1\x2a\x5c\x25\x28\x8d\x48\x05\x2a\x28\xcb\xf1\x71\x8b\x97\x72\x21\xe4\x51\x93\x4e\xa3\x6b\xc9\x7c\x13\xba\x87\xb5\x00\x28\xad\x58\x00\xec\xb9\x4f\xb1\x09\xa0\x52\x14\x57\x67\x57\xa4\x20\xa4\x44\x45\x22\xf8\xd7\x0c\xa4\xc8\xa0\x89\x5f\xcd\xb6\xd7\x98\x90\xdc\x47\xd0\xfe\xc4\x95\x45\xaa\xd1\x24\xe2\x6f\xd1\x58\x28\xbc\xf2\x22\xa8\x4e\x21\x9d\x43\xf6\xa5\xc8\xac\x91\xb6\x65\x2f\x8a\xeb\x53\x1f\x77\xf5\x7d\xa1\x8d\x77\xb7\xf2\xf6\x24\x2f\x7b\x60\x24\x11\x27\xeb\x3d\xee\x3d\x0e\xab\x4a\x24\x16\xb4\xd3\xaa\x41\x66\x0d\xd6\x99\x77\x08\x5d\x47\xab\x07\xa1\x95\x37\x0c\x0c\xc0\x35\x37\x2b\x73\x25\x35\x2a\x73\x25\x4d\xce\xe2\x3c\x2b\x56\x12\x38\xe7\x2e\xf1\x2c\x89\x8a\x3b\x0d\xd2\xf5\x98\x34\x85\xda\x91\x50\x3b\xc6\xe7\x1f\xdf\xb1\xa0\x0d\x47\xf3\x96\x69\xab\xed\x2b\x25\xe0\xaf\xed\x41\xda\x1f\xc8\x39\x1f\x0a\x76\x8e\xd4\x02\x0f\x01\x75\xd2\x13\x80\x76\xcc\x12\x1c\xfe\x46\xe5\xab\x2e\xe8\x81\x08\x7f\x5b\x27\xa1\x41\xe6\x11\xb9\xb7\x13\x10\x79\x33\xa7\x20\xb8\xc0\x0c\x1b\x04\xee\xed\x04\x04\x6e\xe3\x49\x3c\xb8\xb8\xb3\x3c\xba\xd3\x14\xa3\x9d\x36\x1b\x00\x6b\x2e\xbf\xfd\x5e\x94\xa1\xb4\x3b\x03\x98\xcd\xe0\xec\x40\xa7\xd8\xe9\x41\x54\x14\x3d\x6e\x39\xa1\x26\xdf\x2b\xe1\x4e\xc6\xdb\xb5\x3c\xba\xe3\x6f\x04\x66\x89\x66\x81\xcd\x45\xda\x95\xe6\x0a\xbe\x4e\xec\x35\xf1\x72\x06\x2a\x94\x0b\x04\xeb\x50\x03\xc8\x1a\x9e\xd9\x1f\xfe\x7b\x98\x15\xa8\x09\x78\xf5\xd8\x98\xea\x56\x29\x61\xb5\x18\x09\x0a\xa3\xcd\x43\x28\x7d\x23\x64\x72\x23\xf1\xd5\xe6\x83\x12\xab\x50\x6d\x7e\xc5\x0d\x5b\xe2\xc6\x0d\x3b\xf5\x12\xff\xbc\x59\x23\x7f\x9b\xd3\x8f\x63\x7a\x87\xfb\x1d\xba\x8f\xf2\xd6\xee\x2a\xfe\x78\x3b\x1f\xb8\x64\xe1\x97\xf7\x6c\xbc\x73\xba\x2b\x6b\xba\x95\x26\xb0\xc4\x4d\x60\xe3\x34\xd4\xbb\xb6\x6b\x9a\x7c\xd3\x70\xfb\xe5\xa8\x7b\x13\xc8\x55\x82\x8a\xf4\x92\x88\xdf\xd0\x73\x00\xec\xf6\xcb\x5f\xe8\xf3\xd3\x1c\xd6\xce\xe3\x09\x9c\xd9\xff\x0e\xdd\x13\xa2\xcb\x1e\xbe\xa1\x42\x3b\xec\xbd\x2a\x44\x96\xa0\x9a\xd0\xed\x97\x90\x87\x42\x1a\x54\x69\x18\xe3\xf6\x27\xc3\x5a\x95\x43\xcb\x33\xdf\xfe\xba\xc5\x70\x9e\x65\x2e\x87\x7b\x7a\x21\xff\x83\x80\x3a\xb8\x1e\xa2\xcd\x76\xc7\x61\xfe\x50\xdb\xff\x58\xa0\xda\x7c\xca\x1f\x5a\xb9\xee\x68\xb6\x5d\xe8\x59\xd7\x8b\x6d\xd9\x9e\x14\xa8\xea\x50\xf3\x79\x1c\x4a\x82\xa2\xf2\x87\xe0\xff\xa7\x8e\x10\x0a\xf5\xd0\x09\xc2\x46\x7d\x58\x1c\x26\x90\xa7\xa9\x46\x33\x81\x4c\xac\x84\x81\x42\x48\xf3\xbf\xff\xfe\x0d\x59\xf9\xf4\x90\xd5\xdc\xf4\xc4\xae\x96\x1d\x0b\xa2\x48\xbd\x73\xf0\x4b\xa7\x09\xb7\x7b\xde\x8d\x55\x60\x4e\xaf\xd3\xea\xa8\x8d\x5b\x4a\x0e\x6f\x7e\x47\x72\x66\xb5\x3a\x5b\xab\xbe\x4b\xbc\xb5\x3a\xaf\xa3\xb4\x31\x45\xf8\x68\x8d\x5f\x5c\xce\x5f\xb7\xd6\xf7\x30\x92\xd2\x05\xea\x98\x39\x75\x57\xb1\x41\x47\x3f\xce\xa5\x11\xb2\xc0\x7a\xd1\x43\xe9\xb5\x75\xde\x6b\xaa\x4e\x37\x9b\xd7\xab\x70\x89\x7d\x11\x3f\x6b\x2a\x44\xd7\x23\x73\x53\x27\x3b\x45\x22\x52\x1a\x16\xaf\xf4\xa5\x52\xd7\xf9\xa7\xfc\x41\x33\x54\x75\xbe\xf4\x25\x77\x37\x00\x4f\x2d\x15\x22\x9e\x80\xf1\x6b\xfc\x61\x58\xfb\x1c\x7f\x07\xf6\x57\x6b\xb7\x62\x29\x15\x5b\x15\xab\x0f\x95\xec\x21\x2c\x3b\xec\x13\x9f\x33\x08\xd7\x6b\x94\x09\xb3\x7e\xe6\xd1\x5d\xdf\xa5\xfa\x84\x02\x77\x93\xd5\x4d\x74\x47\xf5\x63\xbf\x02\xcf\xe3\x38\x2f\xa4\x99\x40\x6a\x87\x80\xf6\x58\xc9\x7c\x49\x0f\xaf\xd5\xef\xf6\xf6\x77\x59\xb0\xbe\x75\x76\xda\x4d\xc3\xd3\xe6\xd3\xdc\x9e\xd8\xa4\xb9\x07\xd0\xf0\xe4\xac\xdd\xda\xf5\x2f\xe0\xf8\xb5\xf3\x05\xb3\x4b\x1d\x2a\xd6\xcb\x2a\x02\xad\x19\xa1\xe7\x5e\xf3\xa3\x65\xf7\x66\x5b\x2f\x27\x2d\xe3\xeb\x65\x50\x5d\x65\x0e\xc1\x90\x4b\xcc\xdb\x1d\xda\x3b\x3d\x51\xfd\x2c\x1d\x60\xde\x8f\x87\x1e\xd3\x81\x01\xf1\xec\x27\xc7\xc3\x6a\x82\xe7\x73\x34\xef\xc3\x75\x75\x5a\x05\xc0\xf9\xb7\x97\xd1\xed\x46\x71\xa0\xb1\x76\x1b\x45\xb7\x01\xec\x0c\x84\x03\x6a\xf8\xec\xc8\x65\xc7\xa9\x5d\x9c\xa7\x29\xc6\x06\x93\x41\x5f\x82\x6e\xda\xef\xa9\x8a\x53\x6a\x60\x68\x26\xfa\x2f\x95\x41\x99\x38\xdc\x89\x9e\x41\x92\x73\xfe\xd8\xa0\x7c\xa2\x93\xf5\x05\x7c\xa2\xa7\xcd\xd4\x38\xdc\xc1\xe1\x63\xe2\x93\x9d\xda\x2b\x86\xea\x63\xf2\xf8\xc4\xf7\x4f\x67\xf3\x76\x0b\x28\x13\xfb\x57\xdf\x3f\x03\x00\x00\xff\xff\xf6\x84\x5c\x36\x73\x16\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 5747, mode: os.FileMode(420), modTime: time.Unix(1485607877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6b\xeb\x36\x14\x7f\xd7\xa7\x38\x98\xbb\x62\x97\x44\x79\xbf\x90\x87\x31\xb6\xcb\x18\x8c\xd1\x96\x3d\xac\x94\x21\xdb\xc7\xa9\x16\x5b\xca\x64\x39\x21\x18\x7d\xf7\x21\x4b\x8e\x9d\xf8\x4f\x9a\x30\xca\x7d\xaa\x2a\x4b\xe7\xf7\x47\x3f\x1d\xa5\xae\x21\xc5\x8c\x0b\x84\xa0\xd4\xaa\x4a\x74\x00\xc6\xac\x56\xc0\x2a\x2d\x61\x83\x02\x15\xd3\x98\x42\x7c\x04\x5d\x6d\x97\x1b\x14\x64\xc7\x92\x2d\xdb\x20\xd4\x35\xd0\x3f\xfc\xd8\x18\x42\x78\xb1\x93\x4a\x43\x48\x00\x00\x82\xac\xd0\x81\x1b\x69\x5e\x60\x40\xdc\x78\xc3\xf5\x7b\x15\xd3\x44\x16\x2b\x5d\x6d\x53\x2c\xb7\xab\x98\x95\xb8\x2a\xff\xcd\x57\x69\x1c\x5c\x5f\xa4\x8f\x3b\x2c\x03\x12\x11\xb2\x67\xca\x63\xfd\x0d\x59\xa1\xe9\xb3\x56\x5c\x6c\x50\xf9\x29\x8b\x4a\x5f\x78\x81\xfe\xff\x34\xa6\x4f\xf2\xf0\x9c\x30\x21\xba\x35\xb6\x18\xfd\x35\xb5\xe5\xea\x1a\xbe\xc8\xf8\x9f\xdf\x59\x81\xf0\x75\x0d\xb4\x19\x18\x43\xec\x1a\xe8\x7f\x34\x06\x9c\x51\x50\x37\x65\x1a\x1b\x14\x2f\x98\x3a\xfe\x86\xc7\x76\xdf\xe5\xf4\xcb\x71\x87\xf4\x9b\xb4\x7f\x6c\x55\xb7\x71\x09\x8a\x89\x0d\xc2\x97\x8c\x63\x9e\x36\xb0\xbf\xd8\x51\xd9\x2d\xf1\xdf\xfa\x65\x79\x76\x9a\xac\xf2\x9c\xc5\xb9\xfd\xf0\x58\xd7\x80\x22\x05\x63\xba\x3d\x13\x98\x28\x52\x63\x88\x21\x24\xab\x44\x02\xe1\xe3\xb9\xb8\x08\x1c\x85\x30\x82\xd7\xb7\xb2\xf1\xd4\x0b\x55\xa8\x2b\x25\x4e\xb3\x6e\xd2\xb3\x9c\xd2\xb1\xf4\xb8\xcd\xb9\x76\xcc\x7e\x92\x79\x55\x08\x30\x26\x58\xf4\xab\x38\x01\xcd\xcc\x55\x82\x3f\xe6\xf9\x0d\x14\x83\x8b\xe3\x98\x20\xf0\xa9\x32\x3a\x3a\x61\x04\x63\x32\xa6\x49\x5f\x33\x67\x3c\x93\x77\xc1\xcc\xb8\x62\xcc\x35\x12\xe7\xe1\x9d\xc1\x1f\x18\xea\xa1\x47\xb2\xbe\x3c\xc1\xea\x77\x5e\xc2\x00\xfb\x1b\xea\x31\xe4\x70\xea\x5e\x2c\x20\x96\x32\x8f\x3c\x27\x9e\x81\x2d\x4b\x87\x37\x6f\xbd\x06\xc1\x73\xe8\x32\xe5\xe9\x0f\xea\xfe\x85\x4a\x36\x75\x33\x96\x97\xe8\x63\xd0\xdb\xf0\x38\x0e\xb0\x00\xad\x2a\xec\x4e\x76\x5c\xdd\xf3\x88\xba\x17\x69\xcd\x09\x5b\x09\x53\xfc\x2d\xfd\x7b\xca\x87\xfb\xa1\x46\xef\xdd\x55\xc8\xa9\x76\xf5\x70\xba\x26\x7b\x62\x88\xef\x4a\x36\x50\xdd\xf5\x99\xa3\xf9\x27\xcb\x2b\x0c\x5d\x20\x5d\xa4\x22\xe0\x42\xa3\xca\x58\x82\xb5\xf1\xac\xca\x03\xd7\xc9\x3b\xb8\x65\x6e\x2a\x61\x25\xce\x04\xfe\xeb\xe5\xe1\xb6\xc2\x46\x6e\x13\x21\x1f\x6c\x1a\x27\xcc\x41\xc8\x27\xe1\xce\x7d\x3c\x21\xf5\x1a\x4b\x8a\x19\xab\x72\xdd\x55\xd8\x31\xc1\x93\xd0\x3e\x84\x3f\x2b\x25\x55\x16\x06\x95\xd8\x0a\x79\x10\x5e\xff\x0f\x65\xb0\x70\xc3\x28\xba\x6c\x4d\x33\x26\xbb\x77\x60\xe8\xed\xa9\xd3\x0e\x3f\xdd\xd0\x4b\x27\x6e\xc2\xf5\x66\x3a\xc3\xb8\x7d\x18\x6e\xe6\x3c\x73\xd6\x37\x3f\x12\xff\xb3\xb0\x27\x4c\x90\xef\x51\x7d\x46\xe4\x1f\x3e\x39\xf3\x0f\xdf\x55\xe8\x5b\xa7\xef\x4e\xd1\x9c\x7d\x37\xc7\x68\xc2\x9b\xbb\x73\x64\x7f\xfe\x86\x4a\x1e\xce\x7f\x0d\x7b\x8b\x4a\xa0\x94\xb6\xd1\x42\xeb\x67\xab\x38\xd9\xab\xd2\x52\x2c\xd8\x16\xc3\x33\xe1\x0b\xc8\x51\xb8\x54\x96\xde\xe2\x4c\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xde\xeb\x69\x8b\xbe\xf2\x37\x58\xbb\xcb\x72\x1e\xf1\xf6\xb4\xfa\x8e\x2b\x79\xa0\x4e\x80\xdd\x4a\x29\x8d\x3e\x22\xd7\x1e\xe4\x40\xf1\x84\xbe\x33\x22\x4d\x02\xae\xe2\xf7\x9e\xae\xff\x02\x00\x00\xff\xff\x68\xf2\x51\x67\x4a\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1485582894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

