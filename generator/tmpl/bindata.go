// Code generated by go-bindata.
// sources:
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xdf\x6f\xdb\x36\x10\x7e\xd7\x5f\x71\x13\xb6\x82\x2c\x5c\xba\xcf\x1d\xfc\xd0\xa6\x4e\x11\xac\x4b\x9b\xb8\xd8\x1e\x8a\xa2\xd0\x8f\xb3\x43\x9b\x22\x6d\x92\x9a\x2b\x08\xfc\xdf\x07\x92\xb2\x22\x3b\xb6\x17\x04\x2d\xd6\x27\x4b\x27\xde\x77\xdf\xdd\xf7\xf1\x92\xb6\x85\x12\xe7\x5c\x22\xa4\x66\x23\xaa\x85\x4e\xc1\xb9\xf1\x18\xb2\xda\x2a\x58\xa0\x44\x9d\x59\x2c\x21\x6f\xc0\xd6\xab\x17\x0b\x94\x49\xdb\xc2\xaf\x2a\x5f\x5e\x67\x15\xc2\xab\x09\xb0\xf0\xf0\xc2\xb9\xf0\xc1\x58\x5d\x17\x76\xf7\x6d\xad\xb9\xb4\x73\x48\xcd\x6f\x66\x76\xf3\xfe\x4f\x0f\xde\xa7\xfa\x8c\x75\x56\xac\xb2\x05\x42\xdb\x02\xfb\xd8\x3d\x3b\x97\x24\xbc\x5a\x2b\x6d\x81\x24\x00\x00\x69\x99\xd9\x2c\xcf\x0c\x8e\xcd\x46\xa4\x49\x8c\x2d\xb8\xbd\xab\x73\x56\xa8\x6a\x6c\xeb\x55\x89\x66\x35\xde\x1d\x19\x97\x79\xfa\xdf\x87\x6c\xb3\x46\x93\x26\x34\x49\xfe\xc9\x74\x57\xe9\x2b\x98\x8d\x60\xb7\x68\x6a\x61\xbb\x40\x99\xb3\x0b\x25\x65\xf7\x16\x92\xd8\x55\x19\x49\x70\x69\x86\xb3\x70\x2e\xf6\x08\x13\x78\x76\x30\x0a\xe7\x5a\xe7\x4b\xcd\x6b\x59\xc0\xb1\x1c\x42\xe1\xf9\x83\x1c\x68\x43\x19\x8d\xb6\xd6\xf2\x54\xb5\xc4\x25\x89\xa7\x05\x0f\xd3\xe3\x5b\x87\xa2\xf2\x65\x2c\x71\x0f\xe0\x53\x03\x23\xf2\xb0\x36\x85\x4f\x59\x2e\x90\x50\x8f\xc2\xe5\x62\x9f\x4b\xea\x05\x0b\x07\xc0\xb9\xf4\x3c\xce\x54\x2e\xb8\x3c\x0b\x14\x4f\xec\x23\xd9\x3b\x6e\x8e\x8c\x84\x82\x57\x83\x50\x20\xcf\x3b\x65\x46\x80\x5a\x2b\x4d\x3b\xdc\x62\x17\xf2\xf6\x2b\x73\xf6\x0e\x6d\xc0\x62\x3b\x1a\x34\x4a\x37\x0f\x67\x7e\x99\x80\xe4\xa2\x4b\x1d\xd0\x92\x5c\x04\x90\x10\x77\xc9\x90\x71\x2c\x20\xb9\x78\x04\xd7\x2b\x69\x50\x5b\xa2\xf2\xa5\x01\xc6\xd8\xc1\xf8\x29\x90\x7b\xbb\x1d\xb4\xc1\xe7\x20\x50\x86\x4c\x0a\x93\x09\xbc\x3c\xc1\xd1\xf3\x18\x70\xdc\xeb\x3e\xb4\x1d\xc7\xf5\xd4\x9e\x8d\xad\xac\x87\xf2\xb8\x6c\x76\xf3\x9e\xc5\x8e\xae\xa4\x55\x71\xaa\x9d\x49\x28\xbb\x50\xa2\xae\xa4\x89\x51\x95\x2f\xd9\x25\x47\x51\x1a\x42\x19\x63\xb1\xfc\x5c\x69\xf8\x3a\x0a\x3e\x7c\x35\x01\x9d\xc9\x05\x42\x98\xcc\x3d\x93\x50\x6e\x12\x7e\xd8\x5f\x99\xa8\xd1\xf8\x09\xc4\xc7\xd7\x42\x0c\xc0\x3a\x7e\x9b\x1a\x75\xd3\x37\xdc\xb3\x7c\x53\x73\x51\x12\x0f\xf3\x3d\xd4\x66\xd3\x6f\x58\x90\x50\x8a\x3e\x42\xf4\x4b\x2e\xcb\x0f\x12\xdf\x34\x1f\x35\xaf\x32\xdd\xfc\x81\x0d\x59\x61\x13\x77\x5c\x1f\x62\x9f\x9a\x35\xb2\x77\xca\xff\x44\x2f\x1c\xb8\xe3\x9c\xaf\xbf\x83\xb2\x1a\x8d\x47\x7a\xb6\x5f\xb4\x75\x51\xaa\xa0\x5d\x5f\x69\x28\xe7\x71\x5b\xcc\x50\x60\x61\x49\xcc\xf3\x22\xb1\x9e\xc3\xa5\x56\xd5\x81\x57\xfa\x6f\x7f\xdf\xa1\x46\xd2\xa3\x4c\x37\x24\x3d\x98\x52\xb4\x95\x5f\x0d\x23\x58\x61\x43\xe9\x0f\xd7\x5d\x6d\x7b\xc8\x1b\x5f\xe5\x56\x6d\x77\xda\x0f\x31\xbd\x85\xd1\xb0\x59\x91\x49\xef\x4c\xad\xb6\xf4\xf7\xa7\x9a\x4c\xa3\x79\xec\x46\xf1\xe6\x1a\x3a\xcb\x78\x6b\x19\xf8\xfc\xe5\xac\xbb\x46\xa0\x74\x89\x3a\x2c\xa1\x32\x67\x1f\xfc\x0b\x05\xf2\xf9\xcb\xff\xe2\xb9\x2a\x5b\xe1\xb1\xda\x2f\x47\x61\xe7\xf9\x86\xba\x2d\xfd\xd3\xfa\xd0\xec\x8c\xb8\x5b\x6a\x7e\xa2\x83\xb5\x16\xa7\x7d\x3f\x14\x3e\x8f\x31\xf6\x76\x3a\xbb\x18\xc4\x0f\x97\x5e\x50\xe6\x2d\x9a\x82\xc4\xe3\xb1\x2c\xdd\x3b\x5f\x28\x69\xb9\xac\xb1\x0f\x76\xd3\x3d\x8a\xf5\xfa\x28\xd4\x8f\xdf\x9e\x6a\x6b\xf6\x81\xc3\x5d\xda\x5d\xa4\x0e\xb5\xcc\xd9\x95\x99\x6a\x7d\xad\x6e\xd5\xd6\x10\xd4\xbd\xf3\x8e\x5d\x8e\x01\xfc\x13\x18\x79\xa1\x3c\x2b\x76\x8d\xdf\x2c\x19\xd6\xe9\xfe\x20\x1d\xdf\x84\xfb\x37\xde\x1b\x70\x70\xe3\xcd\xa9\x2b\x7f\x8a\xcb\x81\x5a\xfe\x3e\x4c\x20\x5b\xaf\x51\x96\x24\xf4\xa9\xf2\x25\x3d\xbf\x20\xda\x16\x50\x96\xe1\x9f\xe7\x7f\x03\x00\x00\xff\xff\xfc\xf3\xc2\x77\xba\x0b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 3002, mode: os.FileMode(420), modTime: time.Unix(1484249909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5b\x6b\xc3\x36\x14\x7e\xd7\xaf\x38\x98\xae\xd8\x25\x51\xde\x0b\x79\x18\x63\x2b\x63\x30\x46\x5b\xf6\xb0\x52\x86\x6c\x1f\xa7\x5a\x6c\x29\x93\xe5\x84\x60\xf4\xdf\x87\x2c\xf9\x92\xd8\x4e\xda\x3c\x94\x3d\x55\xd5\xe5\x7c\x17\x7d\x3a\x4e\x5d\x43\x8a\x19\x17\x08\x41\xa9\x55\x95\xe8\x00\x8c\x59\xad\x80\x55\x5a\xc2\x06\x05\x2a\xa6\x31\x85\xf8\x08\xba\xda\x2e\x37\x28\xc8\x8e\x25\x5b\xb6\x41\xa8\x6b\xa0\x7f\xf8\xb1\x31\x84\xf0\x62\x27\x95\x86\x90\x00\x00\x04\x59\xa1\x03\x37\xd2\xbc\xc0\x80\xb8\xf1\x86\xeb\x8f\x2a\xa6\x89\x2c\x56\xba\xda\xa6\x58\x6e\x57\x31\x2b\x71\x55\xfe\x9b\xaf\xd2\x38\xb8\xbe\x49\x1f\x77\x58\x06\x24\x22\x64\xcf\x94\xc7\xfa\x1b\xb2\x42\xd3\x17\xad\xb8\xd8\xa0\xf2\x53\x16\x95\xbe\xf2\x02\xfd\xff\x69\x4c\x9f\xe5\xe1\x25\x61\x42\xf4\x7b\x6c\x31\xfa\x6b\x6a\xcb\xd5\x35\xdc\xc9\xf8\x9f\xdf\x59\x81\xf0\xb8\x06\xda\x0c\x8c\x21\x76\x0f\x0c\x17\x8d\x01\x67\x14\xd4\x4d\x99\xc6\x06\xc5\x0b\xa6\x8e\xbf\xe1\xb1\x3d\x77\x3e\xfd\x7a\xdc\x21\x7d\x92\xf6\x8f\xad\xea\x0e\x2e\x41\x31\xb1\x41\xb8\xcb\x38\xe6\x69\x03\xfb\x8b\x1d\x95\xfd\x16\xbf\x36\x2c\xcb\xb3\x6e\xb2\xca\x73\x16\xe7\x76\xe1\xa1\xae\x01\x45\x0a\xc6\xf4\x67\x66\x30\x51\xa4\xc6\x10\x43\x48\x56\x89\x04\xc2\x87\x53\x71\x11\x38\x0a\x61\x04\x6f\xef\x65\xe3\xa9\x17\xaa\x50\x57\x4a\x74\xb3\x6e\xb2\xb9\xb0\x33\xad\x3f\xc9\xbc\x2a\x04\x18\x13\x2c\xba\x3d\x75\x3d\xab\x75\xe9\xb9\xb5\xa5\x3c\xfb\x99\x2a\x4e\x64\x33\x73\x49\x44\x4f\x27\x8c\x60\x4a\xc6\x3c\xe9\x6b\xd6\x4c\x5f\xf8\x4d\x30\x17\x5c\x31\xe6\x1a\x89\xd3\x64\x5c\xc0\x1f\x19\xea\xa1\x27\x82\xb4\xec\x60\xf5\x07\x2f\x61\x84\xfd\x84\x7a\x0a\x39\x9c\x0b\xdd\x02\x62\x29\xf3\xc8\x73\xe2\x19\xd8\xb2\x74\x1c\xeb\xf5\x1a\x04\xcf\xa1\xcf\x94\xa7\x3f\xaa\xfb\x17\x2a\xd9\xd4\xcd\x58\x5e\xa2\x8f\xc1\xe0\xc0\xc3\x34\xc0\x02\xb4\xaa\xb0\xbf\xd9\x69\x75\x2f\x13\xea\x5e\xa5\x35\x27\x6c\x25\xcc\xf1\xb7\xf4\x6f\x29\x1f\xee\xc7\x1a\xbd\x77\x57\x21\xe7\x7a\xc1\x7d\xf7\x4c\xf6\xc4\x10\xff\xe4\x6d\xa0\xfa\xe7\x73\x89\xe6\x9f\x2c\xaf\x30\x74\x81\x74\x91\x8a\x80\x0b\x8d\x2a\x63\x09\xd6\xc6\xb3\x2a\x0f\x5c\x27\x1f\xe0\xb6\xb9\xa9\x84\x95\x78\x21\xf0\x8f\xe7\x97\xdb\x0a\x9b\x78\x4d\x84\x7c\xb2\x69\x74\x98\xa3\x90\xcf\xc2\x9d\xfa\xd8\x21\x0d\x1a\x4b\x8a\x19\xab\x72\xdd\x57\xd8\x31\xc1\x93\xd0\x7e\x65\x7e\x56\x4a\xaa\x2c\x0c\x2a\xb1\x15\xf2\x20\xbc\xfe\x1f\xca\x60\xe1\x86\x51\x74\xde\x9a\x2e\x98\xfc\x63\x13\xac\xb7\xf7\xb1\xbb\x5d\xaf\x1d\x2f\x0d\x23\x31\xe1\xdc\x97\x5b\xee\xcc\x83\xb9\xde\x73\xa7\x85\x3d\x63\x82\x7c\x8f\xea\x3b\x02\x74\xff\xcd\x09\xba\xff\x5f\x45\xa8\x75\xfa\xe6\x14\x5d\xb2\xef\xcb\x31\x9a\xf1\xe6\xe6\x1c\xd9\x5f\x6a\xa1\x92\x87\xd3\x1f\x6e\xde\xa2\x12\x28\xa5\x6d\xb4\xd0\xfa\xd9\x2a\x4e\xf6\xaa\xb4\x14\x0b\xb6\xc5\xf0\x44\xf8\x02\x72\x14\x2e\x95\xa5\xb7\x38\x93\x0a\xb8\x2f\x69\x0f\x39\x9d\x1e\x61\xf0\x2d\xb2\x45\xdf\xf8\x3b\xac\xdd\x63\x39\x8d\x78\x7b\x5b\x43\xc7\x95\x3c\x50\x27\xc0\x1e\xa5\x94\x46\x9f\x91\x6b\x2f\x72\xa4\x78\x46\xdf\x09\x91\x26\x01\x57\xf1\x07\x1f\x82\xff\x02\x00\x00\xff\xff\xd1\x3b\x86\x51\xf5\x0b\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3061, mode: os.FileMode(420), modTime: time.Unix(1484249212, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

