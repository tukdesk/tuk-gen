// Code generated by go-bindata.
// sources:
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x5d\x6f\xd3\x30\x14\x7d\xf7\xaf\xb8\x44\x30\xd9\xd3\xe6\xbc\x83\xf6\xb2\x69\x9b\x10\x03\x36\x3a\x89\x47\x94\x8f\xdb\xd4\x24\xb1\x5b\xdb\xa1\x8a\x2c\xff\x77\x64\xc7\x2d\xed\x3a\x0a\xea\x53\x63\xdf\x73\xcf\x39\xf7\xf8\xaa\xce\x41\x8d\x73\x21\x11\x32\xb3\xea\xfa\x46\x67\xe0\x7d\x9e\x43\x31\x58\x05\x0d\x4a\xd4\x85\xc5\x1a\xca\x11\xec\xd0\x5e\x36\x28\x89\x73\xf0\x56\x95\x3f\xbf\x14\x3d\xc2\xfb\x2b\xe0\xf1\xe3\xd2\xfb\x58\x30\x56\x0f\x95\xdd\xd4\x96\x5a\x48\x3b\x87\xcc\xbc\x33\xb3\xa7\x87\xcf\x81\x7c\xdb\xea\x3d\x59\x16\x55\x5b\x34\x08\xce\x01\x7f\x4c\xdf\xde\x13\x22\xfa\xa5\xd2\x16\x28\x01\x00\xc8\x1a\x61\x17\x43\xc9\x2b\xd5\xe7\x76\x68\x6b\x34\x6d\x5e\x16\x06\x73\xb3\xea\xf2\xba\xcc\xfe\x0d\xb2\xe3\x12\x4d\x46\x18\x21\xbf\x0a\x9d\x58\x7f\x40\x5d\xf2\x1b\x25\x65\x3a\x45\x0c\xff\x58\x93\x78\x16\xd2\xec\x4e\xe9\xfd\xe4\x1e\xae\xe0\xec\xc5\x90\xde\x3b\x1f\x98\xe7\x83\xac\xe0\xb5\x1e\xca\xe0\xfc\xa0\x07\x5c\x94\xd1\x68\x07\x2d\xff\xa6\x46\x3c\x21\xc1\x16\x1c\xb6\x4f\x27\x70\x01\x12\x95\xe9\xa1\x06\x83\xe7\xa2\xec\x90\xb2\x80\x16\xb2\xd9\xd7\xcc\x42\xe6\x11\x00\xde\x67\xc7\x79\x6e\x65\x23\xe4\x51\xa2\x09\xb1\xcf\x64\x17\xc2\xbc\x32\x3a\x83\x90\x3a\x65\x40\xcf\xd3\x0b\x5c\x00\x6a\xad\x34\x4b\xbc\xd5\xe6\x2a\x2c\x50\x5d\xf2\x7b\xb4\x91\x8b\x6f\x6c\xb0\xe9\x89\xe6\x11\xf3\xe6\x0a\xa4\xe8\x52\xeb\x8e\x2d\x29\xba\x48\x12\xef\x3d\xd9\x75\x3c\x09\x48\xd1\xfd\x87\xd7\x3b\x21\xeb\xaf\x12\xaf\xc7\x47\x2d\xfa\x42\x8f\x9f\x70\xa4\x2d\x8e\xd3\xc6\x6e\xaf\xf8\xf3\xb8\x44\x7e\xaf\xc2\x4f\x6c\x9b\x62\xfc\xf3\xa0\xc7\x46\x8c\xb3\x4d\x99\x9c\x3e\x98\x09\x4c\x67\xfb\xa2\xce\xc7\xe2\x5c\x60\x57\xc7\xba\x46\xc3\xef\xe2\x29\x49\x19\xdb\xdb\x50\x08\x7e\xf8\x0c\x3b\xac\x2c\x9d\xe0\x9c\x73\xc6\xb7\xd2\x77\x5a\xf5\xd3\x1b\xa4\x95\xda\xa9\x7d\x5f\xa0\x46\x1a\x19\x6e\x57\x34\x7b\x11\xcc\x8d\xea\x86\x5e\x86\xc5\xb8\x80\x16\x47\xc6\x26\xc3\xab\x01\xf5\xb8\x4d\x20\x36\x5f\x0f\xa2\xab\x67\x4f\x0f\x34\x98\x3a\x3d\x09\xb5\xde\x32\x3e\x05\x91\x6f\x6a\x4d\xa3\x5a\x52\x4e\x9c\x29\x8d\x59\x55\x48\xaa\xd5\x9a\x7d\x38\x75\x99\x34\x9a\xcd\x2e\x39\x07\x28\xeb\xf8\x4f\xf8\x3b\x00\x00\xff\xff\xa2\xac\xcb\x7a\x55\x05\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 1365, mode: os.FileMode(420), modTime: time.Unix(1484244471, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x5d\x6b\xdb\x3c\x14\xbe\xd7\xaf\x38\x98\xbe\xc5\x2e\x89\x72\x5f\xc8\xc5\xcb\xd8\xca\x18\x8c\xd1\xf6\x6a\xa5\x0c\xd9\x3e\x4e\xb5\xd8\x52\x26\xc9\x09\xc1\xe8\xbf\x0f\x59\x8a\x9d\xc4\x76\xd2\xb5\x37\x55\xf4\x71\x9e\x0f\x3d\x3a\x6e\x1a\xc8\xb1\xe0\x02\x21\xd2\x46\xd5\x99\x89\xc0\xda\xc5\x02\x58\x6d\x24\xac\x50\xa0\x62\x06\x73\x48\xf7\x60\xea\xf5\x7c\x85\x82\x6c\x58\xb6\x66\x2b\x84\xa6\x01\xfa\x23\x8c\xad\x25\x84\x57\x1b\xa9\x0c\xc4\x04\x00\x20\x2a\x2a\x13\xf9\x91\xe1\x15\x46\xc4\x8f\x57\xdc\xbc\xd5\x29\xcd\x64\xb5\x30\xf5\x3a\x47\xbd\x5e\xa4\x4c\xe3\x42\xff\x29\x17\x79\x1a\x5d\xdf\x64\xf6\x1b\xd4\x11\x49\x08\xd9\x32\x15\xb0\x7e\x41\x51\x19\xfa\x64\x14\x17\x2b\x54\x61\xca\xa1\xd2\x67\x5e\x61\xf8\x9d\xa7\xf4\x51\xee\x9e\x32\x26\x44\xbf\xc7\x15\xa3\x5f\x73\x57\xae\x69\xe0\x46\xa6\xbf\xbf\xb3\x0a\xe1\x7e\x09\xb4\x1d\x58\x4b\xdc\x1e\x38\x5e\xb4\x16\xbc\x51\xd0\xb4\x65\x5a\x1b\x14\xaf\x98\xda\x7f\xc3\xfd\xe1\xdc\xf9\xf4\xf3\x7e\x83\xf4\x41\xba\x7f\xae\xaa\x3f\x38\x07\xc5\xc4\x0a\xe1\xa6\xe0\x58\xe6\x2d\xec\x17\x37\xd2\xfd\x96\xb0\x76\x5c\x96\x17\xdd\x64\x5d\x96\x2c\x2d\xdd\xc2\x5d\xd3\x00\x8a\x1c\xac\xed\xcf\x4c\x60\xa2\xc8\xad\x25\x96\x90\xa2\x16\x19\xc4\x77\xa7\xe2\x12\xf0\x14\xe2\x04\x5e\x5e\x75\xeb\x69\x10\xaa\xd0\xd4\x4a\x74\xb3\x7e\xb2\xbd\xb0\x33\xad\x9f\x64\x59\x57\x02\xac\x8d\x66\xdd\x9e\xa6\x99\xd4\x3a\x0f\xdc\x0e\xa5\x02\xfb\x89\x2a\x5e\x64\x3b\x73\x49\x44\x4f\x27\x4e\x60\x4c\xc6\x34\xe9\x6b\xd6\x8c\x5f\xf8\x87\x60\x2e\xb8\x62\xed\x35\x12\xa7\xc9\xb8\x80\x3f\x30\x34\x40\x8f\x04\x69\xde\xc1\x9a\x37\xae\x61\x80\xfd\x80\x66\x0c\x39\x9e\x0a\xdd\x0c\x52\x29\xcb\x24\x70\xe2\x05\xb8\xb2\x74\x18\xeb\xe5\x12\x04\x2f\xa1\xcf\x54\xa0\x3f\xa8\xfb\x13\x95\x6c\xeb\x16\xac\xd4\x18\x62\x70\x74\xe0\x6e\x1c\x60\x06\x46\xd5\xd8\xdf\xec\xb8\xba\xa7\x11\x75\xcf\xd2\x99\x13\x1f\x24\x4c\xf1\x77\xf4\x3f\x52\x3e\xde\x0e\x35\x06\xef\xae\x42\x4e\xf5\x82\xdb\xee\x99\x6c\x89\x25\xe1\xc9\xbb\x40\xf5\xcf\xe7\x12\xcd\x47\xcc\x90\x6f\x51\xc5\x3e\x93\x3e\x55\x09\x70\x61\x50\x15\x2c\xc3\xc6\x06\x62\x7a\xc7\x4d\xf6\x06\x7e\x9b\x9f\xca\x98\xc6\x0b\x99\xbf\x3f\xbf\xdf\xdb\x83\xb8\x91\x17\x45\xc8\x3b\x1b\x47\x07\x3a\x08\xfa\x34\xde\xa9\x99\x1d\xd4\x51\x77\xc9\xb1\x60\x75\x69\xfa\x12\x1b\x26\x78\x16\xbb\x4f\xcd\x67\xa5\xa4\x2a\xe2\xa8\x16\x6b\x21\x77\x22\x38\xf0\x9f\x8e\x66\x7e\x98\x24\xe7\xfd\xe9\xb2\xd3\xff\xb7\x01\x7b\x79\x1d\x5a\xdc\xf5\xdc\xe1\x92\xfb\xbb\x64\xdf\x3f\xf7\xde\x09\x6f\xde\xd1\x7d\x27\xe2\x9e\x31\x11\x2b\xb9\x3b\xfd\xf4\x06\x8b\x34\x50\x4a\x0f\xd1\x42\xe7\xe7\x41\x71\xb6\x55\xda\x51\xac\xd8\x1a\xe3\x13\xe1\x33\x28\x51\xf8\x54\xea\x60\x71\x21\x15\xf0\x50\xd2\x1d\xf2\x3a\x03\xc2\x51\x37\x71\x45\x5f\xf8\x2b\x2c\xfd\x6b\x3a\x8d\xf8\xe1\xb6\x8e\x1d\x57\x72\x47\xbd\x00\x77\x94\x52\x9a\xbc\x47\xae\xbb\xc8\x81\xe2\x09\x7d\x27\x44\xda\x04\x5c\xc5\x3f\x7a\xca\x7f\x03\x00\x00\xff\xff\xb4\x76\x4f\xd1\xb7\x09\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 2487, mode: os.FileMode(420), modTime: time.Unix(1484244422, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

