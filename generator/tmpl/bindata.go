// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcb\x4e\x33\x31\x0c\x85\xd7\xf1\x53\xf8\x9f\x55\xfb\xab\x24\x7b\xa4\xae\xd8\x53\x04\x0f\x80\x72\xf1\x84\x68\xa6\xce\x34\x17\x2a\x14\xe5\xdd\x51\x80\x0a\x89\xdd\x67\x9f\x73\x6c\xcb\xad\xa1\xa3\x39\x30\xe1\x94\x2f\xab\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x81\xa5\x2e\x77\x9e\x18\x36\x6d\x17\xed\x09\x5b\x43\xf9\xf4\xc3\xbd\x03\x84\xf3\x16\x53\xc1\x1d\x88\xc9\x87\xf2\x56\x8d\xb4\xf1\xac\x4a\x5d\x1c\xe5\x45\x19\x9d\x49\xe5\xcb\xaa\x9c\x99\x60\x0f\xf0\xae\xd3\xb0\xbe\xa2\x33\xf2\x39\x5e\x5f\xac\x66\xa6\x74\x53\xc2\x28\x1e\x22\x33\xfe\x77\x46\x0e\x00\x98\x2b\x5b\x3c\x6d\xc4\x3b\x62\x1f\x98\x0e\x98\x63\x4d\x96\x30\x97\x14\xd8\x1f\x30\x6e\x25\xa3\x94\xd2\x19\x79\xda\x4a\x88\xbc\x47\x4a\x29\x26\x6c\x20\xec\x61\x30\xde\x1f\xc7\xbe\x47\xba\xfe\x99\xf1\x1d\x96\x52\xee\x41\x84\xf9\xcb\xfa\xef\x88\x1c\xd6\x91\x15\x89\x4a\x4d\x3c\xba\x20\x3a\x80\xf8\xbd\xee\x88\x16\x6e\x32\x87\x15\x3a\x40\x6b\x48\xec\xc6\x47\x3e\x03\x00\x00\xff\xff\x58\x2f\x1e\xac\x5c\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 348, mode: os.FileMode(420), modTime: time.Unix(1485606521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xdf\x6f\xdb\xb6\x13\x7f\xf7\x5f\x71\x5f\xe3\xbb\x42\x2a\x5c\x3a\x0f\xc3\x1e\x3a\x78\x40\xda\xa4\x45\xb0\x36\x69\x9b\x6e\x7b\x08\x82\x42\x3f\x4e\x2e\x63\x99\x72\x48\xaa\xa9\x61\xe8\x7f\x1f\x8e\xa4\x64\x4a\x96\x12\x25\xeb\x56\x14\xb5\xc4\x3b\xde\x7d\xee\xf8\xb9\xe3\xa9\xbb\x1d\xa4\x98\x71\x81\x30\x55\xb7\xf9\x7a\x29\xa7\x50\x55\xf3\x39\x44\xa5\x2e\x60\x89\x02\x65\xa4\x31\x85\x78\x0b\xba\x5c\xbd\x58\xa2\x98\xec\x76\xf0\xff\x22\xbe\x39\x8f\xd6\x08\x2f\x17\xc0\xcc\xc3\x8b\xaa\x32\x02\xa5\x65\x99\xe8\x5a\xb6\x91\x5c\xe8\x0c\xa6\xea\x27\x75\xf9\xf1\xdd\x7b\x32\xde\x6c\xa5\x1d\x9b\x28\x59\x45\x4b\x84\xdd\x0e\xd8\x07\xf7\x5c\x55\x93\x09\x5f\x6f\x0a\xa9\x21\x98\x00\x00\x4c\xd3\x48\x47\x71\xa4\x70\xae\x6e\xf3\xe9\xc4\xae\x2d\xb9\xfe\x5a\xc6\x2c\x29\xd6\xf3\x65\x91\xc8\x28\xd3\xf3\x34\x96\xd3\x03\xa1\x2e\x57\x29\xaa\xd5\xbc\xde\x3f\x4f\xe3\x11\x4a\x7a\xbb\x41\x35\x9d\x84\x93\xc9\xb7\x48\x3a\x18\x5f\x40\xdd\xe6\xec\x13\xaa\x32\xd7\x6e\x21\x8d\xd9\xeb\x42\x08\xf7\x66\x36\xb1\xb3\xb4\x11\x4a\x76\xc2\xa3\x1c\x13\x6d\x31\x73\xa1\xfc\xd4\x55\x95\x4d\x09\x2c\xe0\x1c\xef\xfa\x24\x81\xe0\x79\x48\x20\xb2\x52\x24\x83\x4a\xf8\x1d\x93\x52\x17\x92\xd0\x9c\xba\xe7\x10\x9e\x77\x0e\xa3\xaa\x60\x67\x50\x48\xd4\xa5\x14\xf0\xec\x40\x6e\xc5\xf4\xa7\xb6\xf8\xb2\x79\x9a\x19\x59\x35\xa9\x1c\x96\x5e\x20\x0f\x3b\x1d\xc8\x00\x99\xa5\xe4\xc1\xe1\x76\xfb\xe6\xac\x14\xf1\x8d\x75\xb1\x37\x30\xf1\xf1\xfa\x19\x68\xa0\x06\x87\xa0\x42\xf8\x1c\xc5\x39\x06\x21\x99\xe7\x62\xd9\x06\x39\x25\x32\x1a\x85\xb3\x14\x85\xe6\x19\x47\x09\x55\x35\xbd\xdf\xe2\xa9\x58\x72\x71\x60\x72\xb7\x03\x9e\x81\x40\x60\x56\x0e\xd3\xa9\xe1\x7d\xd7\x9d\x93\x92\x17\xb7\x0d\x73\x85\x5d\xd5\x34\x66\x27\x98\x45\x65\xae\x6b\x6f\x8d\xb6\x48\x8d\x72\x03\x51\x7f\xe5\xaa\xe7\x38\x42\x20\xbe\x06\x21\x04\xcf\x1d\x77\x67\x80\x52\x12\x61\x2c\x60\x9e\x01\x17\x02\x25\x89\xe0\x7f\x0b\x10\x3c\x87\x3d\x31\x9a\x63\x74\x1a\x33\x92\x3b\x6a\x98\x9f\xa4\xb6\x48\xc5\x9f\xc6\xec\x2d\x6a\x03\x85\xd5\x80\xc3\xda\x0b\xe9\x0c\xd9\x17\x3c\x37\x46\x7c\xcb\x4e\x94\x34\x5e\x1f\x0e\xf5\x7d\xa9\xb4\x0b\xb7\x8e\xf6\x49\x51\xf6\xc0\x48\x63\x46\xd6\x7b\xc2\x7b\x18\x56\xcd\xd0\x20\xf4\xf9\xba\x47\x66\x0c\x36\x94\x1e\x42\xd7\xd2\xea\x41\x68\xe4\xfb\x0c\x8c\xc0\x75\xf9\xf1\x9d\xcb\xd4\xab\x92\xe7\x29\xca\x76\x59\xd8\x38\x1b\xec\xcc\xa8\x8f\x31\xab\xd7\xfa\x4c\x28\x94\xfa\x4c\xe8\x22\x48\x8a\xbc\x5c\x0b\x60\x8c\xd9\x42\x31\x1e\x25\xb3\x1a\xa4\xdb\xe3\xd5\xb8\x62\x9e\x11\xb3\xea\x6a\x38\x64\xaf\x8d\x49\xe5\x4c\x33\xc6\xc6\xc2\xba\x44\x6a\xce\x43\x90\xac\xf4\x5e\x48\x2d\x03\xe4\x98\xbd\x91\xc5\xba\x0d\x6f\x24\x96\x3f\x36\x69\xa4\x31\x70\xbe\xed\xdb\xbd\xbe\xdd\x86\xa7\xf8\x3a\xc1\x1c\xf7\xbe\xec\xdb\xbd\xbe\xac\xca\x93\x62\xfb\xeb\x2b\x4a\x0c\xee\xe8\x5f\xe0\x42\xa3\xcc\xa2\x04\x77\xd5\x8c\x2a\x39\x55\x94\x74\x6f\xd5\x54\x84\xd9\x31\x08\xc5\xb3\xe7\x6c\x8c\x3c\x70\x4b\x9f\xa0\x88\x6f\x8c\xd7\xce\x3d\x12\x42\xb0\xbf\xdd\x0f\x7b\x62\x8e\xc2\xec\x0c\x61\xb1\x80\xa3\x81\x8e\xd5\xe9\x85\x54\x9c\xd4\x06\x3b\x85\x63\x85\x8a\xd2\x5d\x0b\x3b\x25\x62\xd6\x8a\xf8\x86\xbd\xe1\x98\xa7\x2a\x08\x4d\x84\xb4\x2b\x2b\x24\x7c\x99\x99\x7b\xf0\xe5\x02\x64\x24\x96\x08\x26\xa0\x3d\x20\x63\x78\x61\x7e\xd8\x9f\x51\x5e\xa2\x22\xe0\xf5\xe3\xde\x54\xbb\x5b\x10\x56\x83\x91\xa0\x04\xb4\x79\x4c\x4a\xdf\x70\x91\x5e\x08\x7c\xb5\xfd\x20\xf9\x3a\x92\xdb\xdf\x71\x1b\xac\x70\x6b\xa7\xb9\x66\x89\x7d\xde\x6e\x90\xbd\x2d\xe8\xc7\x66\xba\x93\xfb\x4e\xba\x2d\x57\xea\xdc\xd8\xf3\xf6\x08\x70\x7a\x1b\x4c\x3b\x0e\x6c\x03\xa0\xdb\x73\x06\x2b\xdc\x86\xe1\x61\x27\x74\x50\x2d\x71\xc6\xc6\xe6\x07\xa6\x28\x32\x05\x57\xd7\xf7\x06\x37\x83\x42\xa6\x28\x0d\xc3\xd2\x98\x5d\xd0\x4b\x08\xc1\xd5\xf5\xbf\x1c\xb2\x1a\x8a\xb9\xae\x94\x23\xf3\xd7\x82\x1b\x59\x30\xad\x94\x35\x85\xf9\xe0\xf1\x3d\x8e\xf6\xae\x83\xb6\x29\x7f\x9c\xe7\x96\xa9\x3d\xed\xd4\x6f\x00\xf6\x79\x66\xd3\x47\xf7\xbb\x6b\x06\x36\x13\xc5\x1d\x79\x32\xcc\xfe\x58\xa2\xdc\x7e\x2a\xee\x3c\x76\xdb\x64\x29\x52\x79\xd6\x8e\x67\x57\xf9\x33\x0a\xd5\x19\x2a\x76\x99\x44\x82\x60\xc9\xe2\x2e\xfc\xf5\xa9\xc3\x8b\x44\x35\x76\x76\xd9\x9f\x5d\x93\xf9\x19\x14\x59\xa6\x50\xcf\x20\xe7\x6b\xae\xa1\xe4\x42\xff\xf2\xf3\x13\x19\xf7\x43\x4f\xa9\x49\x41\xcf\x71\x35\xb2\xb1\xe7\xc6\x33\x17\x27\xfc\xd6\xea\xb4\x7e\x63\xbb\x30\x0a\x81\xd5\x6b\xf5\x33\xea\xd5\x26\x3b\xc3\x9b\xdf\x91\x3c\x30\x5a\xad\xad\x75\x73\xa5\x0c\x7a\xed\xd5\x66\x77\x6f\x8a\xf0\xd1\x1a\x3b\x39\xbd\x7c\xed\xad\x1f\x60\x24\xa5\x13\x54\x49\x60\xd5\x6d\xc5\x86\x2d\xfd\xa4\x10\x9a\x8b\x12\x9b\x45\x07\xa5\xd7\xd6\x71\xaf\xa9\x86\x61\x86\xca\xeb\x68\x85\x7d\x67\x7f\xb4\x2f\x0a\xd5\xcc\xe7\xfb\xd2\xe8\xd4\x05\xcf\x88\x74\x67\xea\x54\xca\xf3\xe2\x53\x71\xa7\x02\x94\x0d\x73\xfa\xf8\xdc\x3e\x80\xc7\x56\x07\x25\x9e\x80\xb1\x73\xfc\xae\x03\xdf\x8f\xbb\xe8\xfa\x0b\xb4\x5d\xa4\x44\x4b\xaf\x48\xd5\x50\x95\x0e\x61\xe9\x64\x9f\xf2\xb9\x80\x68\xb3\x41\x91\x06\x26\xce\x22\xbe\xe9\xbb\x39\x1f\x51\xd3\x76\x62\xbb\x88\x6f\xa8\x96\xcc\xb7\xec\x71\x92\x14\xa5\xd0\x33\xc8\xcc\x4d\xef\x8f\xa0\x81\xab\xee\x56\xd5\x7e\x33\xb7\xb8\x3d\xe8\xcd\x95\x55\xbd\xf6\xe6\x27\x97\x19\xc7\x64\x63\x74\xcf\x64\xe7\x63\x9f\x0a\x6b\xed\xca\xac\x5f\x83\x4d\xa1\x99\x13\x02\xb3\xd4\x8a\x76\xb3\xaa\x93\xec\xdd\xf5\x8e\x54\x0f\xdf\x5e\x9b\xd5\xcc\xb3\xbe\x59\x85\x7d\xd7\x95\x1b\x68\xdd\x85\x65\xc1\x8d\xb9\xa7\xfc\x7d\x5e\xb3\x74\xb9\xea\x4f\xd4\x40\x7e\xdd\xa4\xe7\x7c\x0f\xcc\x7a\x47\xff\x70\xd2\xab\x27\x7d\x76\x89\xfa\x7d\xb4\xa9\xbd\xd5\x00\xbc\x0e\x79\xc8\x5e\xbf\x29\x8c\x68\xa8\xed\x06\xd1\x2e\xfc\xce\xb4\x37\xa2\x76\x8f\xee\xb9\xd7\x18\xb5\x89\xe3\x2c\xc3\x44\x63\x3a\xea\xbb\xd0\x7e\x53\xf4\x54\xc3\xc0\xd9\xfc\x78\x06\x76\x09\xe8\x3e\x8b\x46\x8f\x88\x56\xbf\x67\x48\x64\x8c\x3d\x34\x02\x0f\x47\xd8\x5c\xb2\x4f\x0d\xd3\x8d\x83\x3f\x26\xba\xc3\xe9\xaf\x0f\xf9\xe3\x0a\xa0\xfe\xfc\x1c\x3f\xca\xfd\xd7\xdc\xf5\xfe\x47\xed\xef\x00\x00\x00\xff\xff\x0a\x0a\x9d\x67\x1f\x17\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 5919, mode: os.FileMode(420), modTime: time.Unix(1486811818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6b\xeb\x36\x14\x7f\xd7\xa7\x38\x98\xbb\x62\x97\x44\x79\xbf\x90\x87\x31\xb6\xcb\x18\x8c\xd1\x96\x3d\xac\x94\x21\xdb\xc7\xa9\x16\x5b\xca\x64\x39\x21\x18\x7d\xf7\x21\x4b\x8e\x9d\xf8\x4f\x9a\x30\xca\x7d\xaa\x2a\x4b\xe7\xf7\x47\x3f\x1d\xa5\xae\x21\xc5\x8c\x0b\x84\xa0\xd4\xaa\x4a\x74\x00\xc6\xac\x56\xc0\x2a\x2d\x61\x83\x02\x15\xd3\x98\x42\x7c\x04\x5d\x6d\x97\x1b\x14\x64\xc7\x92\x2d\xdb\x20\xd4\x35\xd0\x3f\xfc\xd8\x18\x42\x78\xb1\x93\x4a\x43\x48\x00\x00\x82\xac\xd0\x81\x1b\x69\x5e\x60\x40\xdc\x78\xc3\xf5\x7b\x15\xd3\x44\x16\x2b\x5d\x6d\x53\x2c\xb7\xab\x98\x95\xb8\x2a\xff\xcd\x57\x69\x1c\x5c\x5f\xa4\x8f\x3b\x2c\x03\x12\x11\xb2\x67\xca\x63\xfd\x0d\x59\xa1\xe9\xb3\x56\x5c\x6c\x50\xf9\x29\x8b\x4a\x5f\x78\x81\xfe\xff\x34\xa6\x4f\xf2\xf0\x9c\x30\x21\xba\x35\xb6\x18\xfd\x35\xb5\xe5\xea\x1a\xbe\xc8\xf8\x9f\xdf\x59\x81\xf0\x75\x0d\xb4\x19\x18\x43\xec\x1a\xe8\x7f\x34\x06\x9c\x51\x50\x37\x65\x1a\x1b\x14\x2f\x98\x3a\xfe\x86\xc7\x76\xdf\xe5\xf4\xcb\x71\x87\xf4\x9b\xb4\x7f\x6c\x55\xb7\x71\x09\x8a\x89\x0d\xc2\x97\x8c\x63\x9e\x36\xb0\xbf\xd8\x51\xd9\x2d\xf1\xdf\xfa\x65\x79\x76\x9a\xac\xf2\x9c\xc5\xb9\xfd\xf0\x58\xd7\x80\x22\x05\x63\xba\x3d\x13\x98\x28\x52\x63\x88\x21\x24\xab\x44\x02\xe1\xe3\xb9\xb8\x08\x1c\x85\x30\x82\xd7\xb7\xb2\xf1\xd4\x0b\x55\xa8\x2b\x25\x4e\xb3\x6e\xd2\xb3\x9c\xd2\xb1\xf4\xb8\xcd\xb9\x76\xcc\x7e\x92\x79\x55\x08\x30\x26\x58\xf4\xab\x38\x01\xcd\xcc\x55\x82\x3f\xe6\xf9\x0d\x14\x83\x8b\xe3\x98\x20\xf0\xa9\x32\x3a\x3a\x61\x04\x63\x32\xa6\x49\x5f\x33\x67\x3c\x93\x77\xc1\xcc\xb8\x62\xcc\x35\x12\xe7\xe1\x9d\xc1\x1f\x18\xea\xa1\x47\xb2\xbe\x3c\xc1\xea\x77\x5e\xc2\x00\xfb\x1b\xea\x31\xe4\x70\xea\x5e\x2c\x20\x96\x32\x8f\x3c\x27\x9e\x81\x2d\x4b\x87\x37\x6f\xbd\x06\xc1\x73\xe8\x32\xe5\xe9\x0f\xea\xfe\x85\x4a\x36\x75\x33\x96\x97\xe8\x63\xd0\xdb\xf0\x38\x0e\xb0\x00\xad\x2a\xec\x4e\x76\x5c\xdd\xf3\x88\xba\x17\x69\xcd\x09\x5b\x09\x53\xfc\x2d\xfd\x7b\xca\x87\xfb\xa1\x46\xef\xdd\x55\xc8\xa9\x76\xf5\x70\xba\x26\x7b\x62\x88\xef\x4a\x36\x50\xdd\xf5\x99\xa3\xf9\x27\xcb\x2b\x0c\x5d\x20\x5d\xa4\x22\xe0\x42\xa3\xca\x58\x82\xb5\xf1\xac\xca\x03\xd7\xc9\x3b\xb8\x65\x6e\x2a\x61\x25\xce\x04\xfe\xeb\xe5\xe1\xb6\xc2\x46\x6e\x13\x21\x1f\x6c\x1a\x27\xcc\x41\xc8\x27\xe1\xce\x7d\x3c\x21\xf5\x1a\x4b\x8a\x19\xab\x72\xdd\x55\xd8\x31\xc1\x93\xd0\x3e\x84\x3f\x2b\x25\x55\x16\x06\x95\xd8\x0a\x79\x10\x5e\xff\x0f\x65\xb0\x70\xc3\x28\xba\x6c\x4d\x33\x26\xbb\x77\x60\xe8\xed\xa9\xd3\x0e\x3f\xdd\xd0\x4b\x27\x6e\xc2\xf5\x66\x3a\xc3\xb8\x7d\x18\x6e\xe6\x3c\x73\xd6\x37\x3f\x12\xff\xb3\xb0\x27\x4c\x90\xef\x51\x7d\x46\xe4\x1f\x3e\x39\xf3\x0f\xdf\x55\xe8\x5b\xa7\xef\x4e\xd1\x9c\x7d\x37\xc7\x68\xc2\x9b\xbb\x73\x64\x7f\xfe\x86\x4a\x1e\xce\x7f\x0d\x7b\x8b\x4a\xa0\x94\xb6\xd1\x42\xeb\x67\xab\x38\xd9\xab\xd2\x52\x2c\xd8\x16\xc3\x33\xe1\x0b\xc8\x51\xb8\x54\x96\xde\xe2\x4c\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xde\xeb\x69\x8b\xbe\xf2\x37\x58\xbb\xcb\x72\x1e\xf1\xf6\xb4\xfa\x8e\x2b\x79\xa0\x4e\x80\xdd\x4a\x29\x8d\x3e\x22\xd7\x1e\xe4\x40\xf1\x84\xbe\x33\x22\x4d\x02\xae\xe2\xf7\x9e\xae\xff\x02\x00\x00\xff\xff\x68\xf2\x51\x67\x4a\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1485582894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

