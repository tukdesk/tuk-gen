// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\xeb\x08\x92\x51\x8b\x29\xcc\xcc\xe2\x3c\xfc\xba\xa0\xd9\x59\xd9\xfe\x29\x5b\x67\x31\x98\x72\x99\xa5\x06\xfd\x23\x96\x2a\xbf\xb6\xa5\xcb\x1e\xf7\xe5\xe9\x3b\x00\x00\xff\xff\xe2\xda\x6e\x23\xac\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 428, mode: os.FileMode(420), modTime: time.Unix(1495873250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1495873250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdb\x6e\xdc\x36\x10\x7d\xdf\xaf\x98\x2e\xd2\x40\x0a\x14\xda\x01\x8a\x3e\xa4\x70\x01\xc7\x97\xc2\x68\x62\x27\x71\xda\x3e\x18\x46\xa0\xcb\x68\x23\xaf\x96\x92\x49\xca\xce\x62\xa1\x7f\x2f\x86\xa4\xae\x2b\xad\x15\x27\x01\x9a\xe6\x21\xd6\x92\xc3\x99\xc3\xe1\x39\xc3\x91\x36\x1b\x88\x30\x4e\x38\xc2\x5c\xde\xa6\xab\x85\x98\x43\x59\xee\xed\x81\x5f\xa8\x0c\x16\xc8\x51\xf8\x0a\x23\x08\xd6\xa0\x8a\xe5\xf3\x05\xf2\xd9\x66\x03\x4f\xb2\xe0\xe6\xdc\x5f\x21\xbc\x3c\x00\xa6\x1f\x9e\x97\xa5\x9e\x90\x4a\x14\xa1\xaa\xe6\x72\x91\x70\x15\xc3\x5c\xfe\x2c\x2f\xdf\xbd\x7e\x43\xce\xeb\xa5\xb4\x22\xf7\xc3\xa5\xbf\x40\xd8\x6c\x80\xbd\xb5\xcf\x65\x39\x9b\x25\xab\x3c\x13\x0a\x9c\x19\x00\xc0\x3c\xf2\x95\x1f\xf8\x12\xf7\xe4\x6d\x3a\x9f\x99\xb1\x45\xa2\x3e\x15\x01\x0b\xb3\xd5\xde\x22\x0b\x85\x1f\xab\xbd\x28\x10\xf3\xad\x49\x55\x2c\x23\x94\xcb\x3d\x0b\x9e\x5c\xec\x45\xc1\x34\x3b\xb5\xce\x51\xce\x67\xee\x6c\x76\xe7\x0b\x0b\xe6\x23\xc8\xdb\x94\xbd\x47\x59\xa4\xca\x0e\x44\x01\x3b\xca\x38\xb7\xbf\xf4\x22\x76\x16\xd5\x93\x82\x1d\x27\x7e\x8a\xa1\x32\xc8\x13\x2e\xdb\x09\x2c\x4b\x93\x18\x38\x80\x73\xbc\x1f\x9a\x71\x78\x92\xba\x04\x22\x2e\x78\x38\x6a\x84\x9f\x31\x2c\x54\x26\x08\xcd\x89\x7d\x76\xe1\x59\xef\x48\xca\x12\x36\x1a\x85\x40\x55\x08\x0e\x4f\xb7\xe6\xcd\x34\xfd\xab\x3c\xbe\xac\x9f\x3c\x3d\x57\xce\x4a\x8b\x65\x10\xc8\xc3\x41\x47\x32\x40\x6e\x29\x79\xb0\xbd\xdc\xfc\xb2\x5e\x2e\x82\x1b\x0c\x95\x89\xd2\xf8\x98\xb5\x21\xb7\x93\x50\xa3\x75\xb6\x71\xb9\xf0\xc1\x0f\x52\x74\x5c\x8a\x90\xf0\x45\x17\xe7\x9c\x58\xa9\x0d\xce\x22\xe4\x2a\x89\x13\x14\x50\x96\xf3\xdd\x1e\x4f\xf8\x22\xe1\x5b\x2e\x37\x1b\x48\x62\xe0\x08\xcc\xcc\xc3\x7c\xae\x05\xd0\x0f\x67\x67\x29\x8a\x5d\x86\xa9\xc4\xbe\x69\x14\xb0\x63\x8c\xfd\x22\x55\x55\xb4\xda\x9a\x47\xda\xb8\x86\xa8\x3e\x25\x72\xe0\x44\x5c\x20\xca\x3a\x2e\x38\xcf\x2c\x7d\x3d\x40\x21\x88\x33\x06\x70\x12\x43\xc2\x39\x0a\x9a\x82\x9f\x0e\x80\x27\x29\x34\xdc\xa8\x4f\xd2\x5a\x78\x34\x6f\xd9\xa1\xff\x84\x95\x47\xaa\x02\x51\xc0\xfe\x40\xa5\xa1\xb0\x0a\xb0\x5b\x45\x21\x9b\x31\xff\x3c\x49\xb5\x93\xb6\x67\x3b\x15\xd6\x51\x1f\xde\xea\x9b\x42\x2a\xbb\xdd\x6a\xb7\x8f\xda\xe5\x00\x8c\x28\x60\xe4\x7d\x60\x7b\x0f\xc3\xaa\x18\xea\xb8\x6d\xbe\x36\xc8\xb4\xc3\x9a\xd2\x63\xe8\x3a\x56\x03\x08\xf5\x7c\x93\x81\x09\xb8\x2e\xdf\xbd\xb6\x99\x7a\x55\x24\x69\x84\xa2\x2b\x0b\xb3\xcf\x1a\x3b\xd3\xe6\x53\xdc\xaa\x95\x3a\xe3\x12\x85\x3a\xe3\x2a\x73\xc2\x2c\x2d\x56\x1c\x18\x63\x46\x28\x3a\xa2\x60\xc6\x82\x6c\x07\xa2\xea\x50\xac\xe5\x44\x8f\x5a\x0d\xbb\xec\x48\xbb\x94\xd6\x35\x63\x6c\x2a\xac\x4b\xa4\xfa\x3c\x06\xc9\xcc\xee\x84\xd4\x71\x40\x81\xd9\xa9\xc8\x56\x5d\x78\x13\xb1\xfc\x95\x47\xbe\x42\xc7\xc6\x36\xbf\x76\xc6\xb6\x0b\x1e\x13\xeb\x18\x53\x6c\x62\x99\x5f\x3b\x63\x19\x93\x47\xed\xed\x9f\x4f\x28\xd0\xb9\xa7\xff\xf5\xa5\x68\xb9\xa5\xb9\xaf\xe7\x46\x83\xb6\x56\x4e\x09\x64\xe8\xe1\x64\xc1\x8d\xa4\xa3\xec\xdd\x13\x2e\x38\xcd\x05\xbe\x5d\xf3\x52\xe4\x7a\xa5\x0b\x07\x07\xb0\x3f\x52\x91\x7a\xb5\x8e\xc4\x47\x65\xae\x27\x0c\x33\x29\x29\x9d\xd5\x64\x4f\x02\x7a\xcc\x5c\x67\xec\x34\xc1\x34\x92\x8e\xab\x59\x4b\x0b\xe3\x4c\xc0\x47\x0f\xb2\xe0\x86\x96\x0b\x9f\x2f\x10\xf4\x9e\x1a\x4c\xda\xf7\x81\xfe\xc3\xfe\xf6\xd3\x02\x25\x61\xaf\x1e\x1b\x57\xdd\x82\x40\x70\x35\x4c\x42\xe3\xd0\xe2\x49\x74\xf1\xef\xf0\x87\xcc\xe9\x61\x9a\x7e\xbb\xac\x76\x9d\x7d\x8b\xbc\x9e\x26\x3c\xba\xe0\xf8\x6a\xfd\x56\x24\x2b\x5f\xac\xff\xc4\xb5\x13\x6b\x2e\xc0\xd5\xb5\x29\x43\x9e\x69\x8f\xeb\x79\x76\x5a\xf0\xf0\xc3\x3a\xc7\xe8\x50\x2c\xa4\xc9\x7f\xef\x44\x7a\x87\xe0\xf3\xa8\xc9\x97\xd6\xd4\x21\x8f\x9c\x7a\xc7\x9b\x8d\xcd\xc4\x93\x7c\xa9\x3b\xfa\x26\x56\xdd\x79\xd0\xbf\xd6\xfa\x93\x5b\x87\xfa\x95\x27\xf9\xd2\x56\x5d\x6a\x59\x34\x50\x1a\xaa\x76\xe7\xb5\x43\x50\x6b\x62\x9d\x99\xf4\x99\x5a\x50\xe1\x32\x2a\xf7\x79\xe4\x6e\x5f\x5f\x36\x49\x36\x31\x9e\x59\xe9\xc1\xfe\xd4\x04\x9f\x16\x69\xda\x4f\xf2\xd7\xe4\x74\x0c\x60\x27\x80\xa6\xf5\x40\x94\x2a\xc0\x74\x72\x6c\x13\xa2\x2a\xa3\x26\x6b\x1e\x64\x71\x2c\x51\x41\x91\x70\xf5\xeb\x2f\x1e\x64\x22\x42\xa1\x95\x1a\x05\xec\x42\xe8\x32\xfb\x00\x45\x76\x0a\xce\x8a\xd8\xc0\xd8\x92\xb1\x45\x67\xd7\x6e\x69\xaf\x2d\x95\x2d\xe5\xda\x8b\xd3\xb8\xd0\x17\xe7\xeb\x64\x95\x28\xe7\x45\xa7\xec\x57\x97\x05\xdd\x34\x15\x20\xbb\xe5\xdf\x3b\x50\xda\xda\xbd\xd0\x06\x8e\xb1\xeb\xa0\xa8\x8a\x00\x25\xa6\x55\x06\x4c\xd2\x1a\x67\x14\x84\xc6\xd8\xf1\xc9\xe5\x51\x6b\x7c\x2b\x10\x19\x1d\xa3\x0c\x1d\x63\x6e\x04\xe1\x76\xec\xc3\x8c\xab\x84\x17\x58\x0f\x5a\x28\x83\xbe\x0e\x07\x5d\x55\xd5\x26\xbb\x27\xcc\xba\xda\xbc\x2b\x50\xac\xdf\x67\xf7\xad\x8a\x63\x98\x29\xc9\xe4\x69\xf7\xc0\x37\x65\xbb\xe5\xa6\x6d\xa3\x64\x97\xa1\xcf\x1d\x91\xdd\x7b\xd0\x1c\xc1\x6f\x8f\xed\xc9\x05\xca\xa9\x2d\x39\x31\x7b\x2a\xad\x3d\x48\x89\x13\xbb\xd9\x7d\x75\xfd\x83\xf0\xfb\xfb\xd1\x9a\x76\xa1\x13\x35\xbe\xd8\x88\x4b\x5b\xfd\x8f\x14\x61\xe8\xbe\xf2\x97\x38\x44\x83\x7d\xb7\x16\x8e\xac\x5f\x49\x1b\xf9\xf4\xb4\x93\xc4\xc4\xbf\x33\x79\x22\xc4\x79\xf6\x3e\xbb\x97\x0e\x8a\x9a\x44\x43\x5c\xef\x1e\xc0\x97\x2a\x27\xc2\x18\x85\x86\xc6\x8e\xd2\x4c\x62\xc5\x48\x3a\x10\x3d\x7a\x8e\x9f\x95\xd3\x8e\x6f\x5b\x97\x61\x71\x77\x05\x4e\x6d\x4b\x25\x70\x39\x41\xe1\x63\x58\x7b\xa7\x43\xf9\x3e\x00\x3f\xcf\x91\x47\x8e\xce\x43\x16\xdc\x0c\x75\x44\x5f\x50\x0f\x8e\xb2\x82\x2b\xa7\xab\x7f\x17\x1c\xab\xf8\xe9\x4a\x1e\x13\xe0\x3c\xd4\x01\x5e\xb8\xf3\xdd\x0a\x9c\x50\x5d\xef\x7c\x01\xda\x1b\x68\x74\x06\x93\xad\xa8\xd9\xbd\x49\xf8\x53\x6d\xe0\xf6\xbe\x58\x14\xdc\x74\xc7\x13\xf2\x61\x5e\xea\x4c\xad\xa1\xf6\xb3\xff\xb9\xab\x3a\xcd\xf6\xcb\xea\x60\xb6\xee\x74\x07\x6b\xf4\x91\x5f\x19\xd3\xeb\x84\x2b\x14\xb1\x1f\xe2\xa6\x22\x8e\x2d\x00\xda\x69\x53\x00\x6c\x8c\x86\x21\xc6\xdb\x95\x1e\xbf\x06\xc3\x30\xdd\x18\x9b\x0a\xd7\x21\x81\xe9\x25\xc9\xa2\xd5\x14\xd9\x94\xd4\xad\x9f\x15\x6d\xeb\x85\xd0\x83\x7d\x4f\x57\xe3\x7c\xe9\x76\x7b\x76\x8e\x0d\xb2\x7c\xd9\x42\x65\xbc\xd5\x94\xb4\xdd\x61\xb7\x5b\xcd\x38\x7a\x2d\xb8\x19\x47\xd7\x1d\xe2\xac\x5e\xd5\x7e\xa5\x6e\xbf\x83\xf6\x1a\x68\x43\x21\xc6\x5c\xd7\xb3\x99\x99\xd2\xd4\x59\xe7\xfd\xbb\xce\x1e\xd4\xf0\x29\x8d\x1c\xae\xbd\xb7\x6c\xec\x91\xd7\xab\xfd\xaf\x7c\xb9\xaa\x3e\x48\xb0\x4b\x54\x6f\xfc\xbc\x8a\xb6\x5b\x46\xd8\x2b\xb5\xbd\xf7\xa2\x09\xd5\x72\x7f\x47\x97\xc1\xa8\x30\x1f\xc6\x31\x86\x0a\xa3\x49\x1f\x9f\xcc\x87\x8b\x71\x3d\x8d\x24\xf8\x07\xe6\xb0\xfd\xb6\x33\x9d\xc3\xd3\xd3\xf8\x3d\xea\x74\xf5\x29\xea\xbf\x45\xab\xd6\x17\xf5\x7f\x03\x00\x00\xff\xff\x06\x90\xd6\xaa\x28\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 6952, mode: os.FileMode(420), modTime: time.Unix(1495873256, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x8b\xe3\x36\x14\x7d\xd7\xaf\xb8\x98\xed\x60\x0f\x89\xf2\xbe\x90\x87\x52\xda\xa5\x14\xca\xb2\x33\xf4\xa1\xcb\x52\x14\xfb\x3a\xa3\xc6\x96\x52\x59\x4e\x08\x46\xff\xbd\xc8\x92\x13\x7f\x4f\xb2\xcd\x30\x7d\x8a\x2c\xcb\xf7\x9c\x7b\x74\xee\x95\x52\x55\x90\x60\xca\x05\x42\x50\x68\x55\xc6\x3a\x00\x63\x56\x2b\x60\xa5\x96\xb0\x45\x81\x8a\x69\x4c\x60\x73\x02\x5d\xee\x96\x5b\x14\x64\xcf\xe2\x1d\xdb\x22\x54\x15\xd0\xcf\x7e\x6c\x0c\x21\x3c\xdf\x4b\xa5\x21\x24\x00\x00\x41\x9a\xeb\xc0\x8d\x34\xcf\x31\x20\x6e\xbc\xe5\xfa\xa5\xdc\xd0\x58\xe6\x2b\x5d\xee\x12\x2c\x76\x2b\x1f\x76\x55\xfc\x93\xad\x92\x4d\x70\xd5\x3a\x7d\xda\x63\x11\x90\x88\x90\x03\x53\x1e\xf1\x2f\x48\x73\x4d\x9f\xb4\xe2\x62\x8b\xca\x4f\x59\x6c\xfa\xcc\x73\xf4\xcf\xc9\x86\x7e\x91\xc7\xa7\x98\x09\x71\x59\x63\x83\xd1\x5f\x13\x1b\xae\xaa\xe0\x83\xdc\xfc\xfd\x3b\xcb\x11\x3e\xae\x81\xd6\x03\x63\x88\x5d\x03\xed\x97\xc6\x80\x93\x0b\xaa\x3a\x4c\x55\x2d\x41\x31\xb1\x45\xf8\xb0\xdf\xd5\x9f\x7e\x56\x3c\x67\xea\xf4\x1b\x9e\x6c\x00\xb7\xc6\xbe\x6c\x62\xda\x47\x9e\xba\x99\x32\xcb\xd8\x26\xb3\xb3\x8f\x55\x05\x28\x12\x30\xc6\xaf\x7e\x3e\xed\x91\x7e\x92\xf6\xe7\x12\x67\x69\xd7\xb4\x9e\x3c\x72\xca\x31\x4b\x6a\xf0\x5f\xec\xa8\x68\x03\xd7\xef\xfa\xd8\x7e\x72\x0a\xde\xbd\x9e\x65\x60\x08\x49\x4b\x11\x43\xf8\xd8\x55\x27\x82\x4b\xfe\x61\x04\x5f\xbf\x15\xf5\xc6\x78\xb5\x14\xea\x52\x89\xf3\xac\x9b\xf4\x4c\x27\x55\x5c\x7a\xf0\xda\x20\x5e\x9d\x9f\x64\x56\xe6\x02\x8c\x09\x16\xed\x18\x2e\x85\x7a\x66\x8e\xa2\x53\xe9\xbb\xe8\x0d\xa4\x1e\xb0\x73\xe2\xdd\x81\xe0\x8f\x59\xf6\x3e\x0a\xb6\x97\xbf\x59\xe6\x73\x7c\x8d\x99\x15\xa6\x5b\x4f\x61\x04\x63\x0a\x0d\xf3\xf4\xa8\xfd\xda\x5b\x9e\xd1\xf4\x0b\x2f\x60\x00\xf9\x09\xf5\x00\x30\x1c\x2d\xd2\x05\x6c\xa4\xcc\x22\xcf\x83\xa7\x60\x03\xd2\x5e\xf5\xaf\xd7\x20\x78\x06\x97\x8d\xf3\x7c\xbb\x11\xff\x44\x25\xeb\x88\x29\xcb\x0a\xf4\xaa\xb5\x56\x3f\x8e\x84\x5e\x80\x56\x25\x5e\x5c\x35\x9e\xce\x53\x3f\x9d\x67\x69\xa5\x08\x1b\xda\xa3\x9c\x2d\xe5\x9b\x03\x87\x07\x18\x95\x69\x1e\x69\xb4\x3b\x3e\x9c\x0d\x74\x20\x86\xf8\x2e\x64\x6d\xd2\x1a\x92\x19\xab\x5e\x61\xa8\x4e\x9f\x9c\xf3\x54\xdf\xe5\x2d\x5b\xf5\xda\xea\x95\xce\xea\x23\x87\x53\x2d\x78\xda\x5f\xdd\x26\x3f\x67\xb1\x4e\xdc\xeb\x5d\xd6\x01\xb8\xc9\x68\x9d\x2f\xa7\xbc\xd6\xe3\x7f\x83\xdd\xba\xe2\x1d\x86\x39\x4e\x99\xae\x0f\x39\x75\x32\xce\x58\xaf\x19\xcd\xd1\xfc\x83\x65\x25\x86\xce\x90\xce\x52\x11\x70\xa1\x51\xa5\x2c\xc6\xca\x78\x56\xc5\x91\xeb\xf8\x05\xdc\xb2\xe6\x62\xf1\x7a\x3f\x8f\x59\x81\x23\x8d\xee\x63\x7f\xe3\x47\x2a\x8d\x90\x61\x5f\xbe\xa2\xd7\x5f\x10\xfb\x65\x30\x0d\xda\x51\x7a\x0c\x37\xc1\x94\x95\x99\xbe\x44\xd8\x33\xc1\xe3\xd0\x5e\xeb\x7e\x56\x4a\xaa\x34\x0c\x4a\xb1\x13\xf2\x28\xbc\x42\x3f\x14\xc1\xc2\x0d\xa3\xa8\x7f\x96\xce\x6c\x83\x3b\xf1\x87\xea\x9f\xcf\xd4\xe1\xab\x1b\x8e\xc0\x89\x5a\x79\xfd\xf4\x9f\x61\xdc\x5c\x01\xfe\x03\xe7\xf9\xdb\xc0\xd8\x31\x72\x87\xeb\xc0\x9d\xb5\xf8\x82\x31\xf2\x03\xaa\xf7\xae\xa3\x87\x77\x29\xa4\x87\xff\x55\x25\x35\x7b\xf1\xe6\xd6\x1c\x13\xfb\x1e\xde\x9c\x90\xf3\xbb\xcd\x69\xff\x54\x86\x4a\x1e\xbb\xff\x31\xbd\xaa\x05\x50\x4a\x1b\xbf\xa2\xdd\x82\x46\xa4\xf8\xa0\x0a\x4b\x31\x67\x3b\x0c\x3b\x5a\x2d\x20\x43\xe1\xac\x5e\xf8\x5d\x49\xa5\x02\xee\x43\xda\x8f\x5c\x9e\x1e\xa1\x75\xce\xdb\xa0\x5f\xf9\x37\x58\xbb\x0a\xec\xd6\x4d\xb3\xc1\xed\x4d\x52\xf2\x48\x5d\x02\xf6\x53\x4a\x69\x74\x4d\xba\x76\xef\x07\x19\x4f\xe4\xd7\x21\x52\x9b\xe6\x55\xfc\xd6\x21\xfb\x6f\x00\x00\x00\xff\xff\x73\xc3\xdc\x6a\xa6\x10\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 4262, mode: os.FileMode(420), modTime: time.Unix(1495873250, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

