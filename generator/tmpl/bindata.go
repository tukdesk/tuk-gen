// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1488558326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1488291231, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdb\x6e\xdc\x36\x13\xbe\xdf\xa7\x98\x7f\x91\x3f\x90\x02\x85\x76\x80\xa2\x17\x29\x5c\xc0\xf1\xa1\x30\x9a\xd8\x49\x9c\xb6\x17\x86\x11\xe8\x30\xda\xd0\xab\xa5\xd6\x24\x15\xc7\x58\xe8\xdd\x8b\x21\xa9\xe3\x4a\x6b\xc5\x41\x80\x26\xbe\xf0\x4a\x9c\xe1\xcc\xc7\xe1\x7c\xc3\xa1\x36\x1b\x48\x30\xe5\x02\x61\xae\x6e\xb3\xd5\x42\xce\xa1\x2c\xf7\xf6\x20\x2c\x74\x0e\x0b\x14\x28\x43\x8d\x09\x44\xf7\xa0\x8b\xe5\xf3\x05\x8a\xd9\x66\x03\x4f\xf2\xe8\xe6\x3c\x5c\x21\xbc\x3c\x00\x66\x1e\x9e\x97\xa5\x11\x28\x2d\x8b\x58\x57\xb2\xb5\xe4\x42\xa7\x30\x57\xff\x57\x97\xef\x5e\xbf\x21\xe3\xf5\x54\x9a\xb1\x0e\xe3\x65\xb8\x40\xd8\x6c\x80\xbd\x75\xcf\x65\x39\x9b\xf1\xd5\x3a\x97\x1a\xbc\x19\x00\xc0\x3c\x09\x75\x18\x85\x0a\xf7\xd4\x6d\x36\x9f\xd9\xb1\x05\xd7\x9f\x8a\x88\xc5\xf9\x6a\x6f\x91\xc7\x32\x4c\xf5\x5e\x12\xc9\xf9\x96\x50\x17\xcb\x04\xd5\x72\xcf\x81\x27\x13\x7b\x49\x34\x4d\x4f\xdf\xaf\x51\xcd\x67\xfe\x6c\xf6\x39\x94\x0e\xcc\x47\x50\xb7\x19\x7b\x8f\xaa\xc8\xb4\x1b\x48\x22\x76\x94\x0b\xe1\xde\xcc\x24\x76\x96\xd4\x42\xc9\x8e\x79\x98\x61\xac\x2d\x72\x2e\x54\x3b\x80\x65\x69\x03\x03\x07\x70\x8e\x77\x43\x12\x4f\xf0\xcc\x27\x10\x69\x21\xe2\x51\x25\xfc\x82\x71\xa1\x73\x49\x68\x4e\xdc\xb3\x0f\xcf\x7a\x5b\x52\x96\xb0\x31\x28\x24\xea\x42\x0a\x78\xba\x25\xb7\x62\xfa\xab\x2c\xbe\xac\x9f\x02\x23\x2b\x67\xa5\xc3\x32\x08\xe4\x61\xa7\x23\x11\x20\xb3\x14\x3c\xd8\x9e\x6e\xdf\x9c\x95\x8b\xe8\x06\x63\x6d\xbd\x34\x36\x66\x6d\xc8\xed\x20\xd4\x68\xbd\x6d\x5c\x3e\x7c\x08\xa3\x0c\x3d\x9f\x3c\x70\xb1\xe8\xe2\x9c\x53\x56\x1a\x85\xb3\x04\x85\xe6\x29\x47\x09\x65\x39\xdf\x6d\xf1\x44\x2c\xb8\xd8\x32\xb9\xd9\x00\x4f\x41\x20\x30\x2b\x87\xf9\xdc\x10\xa0\xef\xce\x49\xc9\x8b\x9b\x86\x99\xc2\xbe\x6a\x12\xb1\x63\x4c\xc3\x22\xd3\x95\xb7\x5a\x5b\x24\x46\xb9\x86\xa8\x3f\x71\x35\xb0\x23\x3e\x50\xca\x7a\x3e\x78\xcf\x5c\xfa\x06\x80\x52\x52\xce\x58\xc0\x3c\x05\x2e\x04\x4a\x12\xc1\xff\x0e\x40\xf0\x0c\x9a\xdc\xa8\x77\xd2\x69\x04\x24\x77\xd9\x61\x7e\xe2\xca\x22\x55\x81\x24\x62\x7f\xa0\x36\x50\x58\x05\xd8\xaf\xbc\x90\xce\x98\x7d\xc1\x33\x63\xa4\x6d\xd9\x89\xe2\xda\xeb\xc3\x4b\x7d\x53\x28\xed\x96\x5b\xad\xf6\x51\xab\x1c\x80\x91\x44\x8c\xac\x0f\x2c\xef\x61\x58\x55\x86\x7a\x7e\x3b\x5f\x1b\x64\xc6\x60\x9d\xd2\x63\xe8\x3a\x5a\x03\x08\x8d\xbc\x89\xc0\x04\x5c\x97\xef\x5e\xbb\x48\xbd\x2a\x78\x96\xa0\xec\xd2\xc2\xae\xb3\xc6\xce\x8c\xfa\x14\xb3\x7a\xa5\xcf\x84\x42\xa9\xcf\x84\xce\xbd\x38\xcf\x8a\x95\x00\xc6\x98\x25\x8a\xf1\x28\x99\xd5\x20\xdd\x01\xaf\xc6\x15\x6b\x19\x31\xa3\x8e\xc3\x3e\x3b\x32\x26\x95\x33\xcd\x18\x9b\x0a\xeb\x12\xa9\x3e\x8f\x41\xb2\xd2\x9d\x90\x3a\x06\xc8\x31\x3b\x95\xf9\xaa\x0b\x6f\x22\x96\xbf\xd6\x49\xa8\xd1\x73\xbe\xed\xdb\x4e\xdf\x6e\xc2\x63\x7c\x1d\x63\x86\x8d\x2f\xfb\xb6\xd3\x97\x55\x79\xd4\xda\xfe\xf9\x84\x12\xbd\x3b\xfa\x0f\x5c\x68\x94\x69\x18\xe3\xa6\x0c\x88\xc9\x89\xa2\xa0\xb7\x46\x0d\x23\xcc\x8c\x51\x28\x2d\x7b\xce\xc6\xc4\x0d\xb7\xe9\xe3\xe5\xd1\x8d\xf1\xda\x3b\x47\x7c\xf0\x9a\x03\x7e\xbb\x26\x66\x28\xcc\x4c\x1f\x0e\x0e\x60\x7f\xa4\x62\xf5\x6a\x21\x91\x93\xca\x60\x8f\x38\x56\xa8\x28\xdc\x95\xb0\x47\x11\x33\x66\x8f\x3b\x76\xca\x31\x4b\x94\xe7\x9b\x45\xd2\xc4\x34\x97\xf0\x31\x80\x3c\xba\xa1\xe9\x32\x14\x0b\x04\xb3\xa6\x06\x93\xb1\x7d\x60\x7e\xd8\xdf\x61\x56\xa0\x22\xec\xd5\x63\x63\xaa\x5b\x30\x08\xae\x81\x49\x68\x3c\x9a\x3c\x25\xaa\xa7\x5c\x24\x17\x02\x5f\xdd\xbf\x95\x7c\x15\xca\xfb\x3f\xf1\xde\x4b\x0d\x66\xb8\xba\xb6\x74\x0a\x6c\x9b\x57\xcb\xd9\x69\x21\xe2\x0f\xf7\x6b\x4c\x0e\xe5\x42\xd9\xd8\xf7\x76\xa3\xb7\x01\xa1\x48\x9a\x58\x99\x2c\x38\x14\x89\x57\xaf\x77\xb3\x71\x71\x78\xb2\x5e\x9a\xce\xb4\xf1\x55\x9f\xa0\xf4\xd7\x9a\x7f\x72\xeb\xd1\xb9\xfb\x64\xbd\x74\xd5\x83\x8e\x5e\x03\x94\x86\xaa\xd5\x05\x6d\x17\x74\xc4\x3a\x63\x36\x7c\x36\xa7\x2b\x5c\x36\x2f\x43\x91\xf8\xdb\x65\xd8\x05\xc9\x05\x26\x00\x97\xbd\xfb\x53\x03\x7c\x5a\x64\x59\x3f\xc8\xdf\x12\xd3\x31\x80\x1d\x07\x26\xa5\x07\xbc\x54\x0e\xa6\x27\xc7\x76\x42\xd8\xd0\x55\x5c\x0f\x20\x4f\x53\x85\x1a\x0a\x2e\xf4\xaf\xbf\x04\x90\xcb\x04\xa5\x61\x69\x12\xb1\x0b\x7a\x79\x30\x45\x76\x92\xcd\x11\xd8\xc2\xd8\xa2\xb0\x43\xe7\xe6\xb6\x79\x77\x98\x65\x5e\x87\x2a\x5b\xac\x75\x07\x80\x35\x61\x0e\x80\xd7\x7c\xc5\xb5\xf7\xa2\xee\x73\xcc\x52\x5d\x4d\xdb\x3a\xcb\xdb\x4c\x6d\x15\xb6\x2a\x2c\xf6\xe5\xa8\x2e\x72\x2d\x24\x3c\xad\x82\xf6\x7b\x67\x31\x6d\x8b\x17\x46\xc1\xb3\x7a\x9d\xd9\x55\x11\xa1\xd0\xb6\xca\x88\x0d\x7b\x63\x8c\x9c\xd0\x18\x3b\x3e\xb9\x3c\x6a\x8d\x6f\x39\x22\xa5\x63\x54\xb1\x67\xd5\x2d\xa5\xfc\x8e\x7e\x9c\x0b\xcd\x45\x81\xf5\xa0\x83\x32\x68\xeb\x70\xd0\x54\x55\xaf\xf2\x3b\xc2\x6c\xea\xd5\xbb\x02\xe5\xfd\xfb\xfc\xae\x55\xb3\x6c\x6e\x2b\x52\x79\xda\x4d\x99\x4d\xd9\x6e\x3e\x69\xd9\xa8\xd8\x65\x1c\x0a\x4f\xe6\x77\x01\x34\x9b\xf8\xdb\x63\xbb\x53\x89\x6a\x6a\x73\x4a\xdc\x98\x4a\x8c\x00\x32\xca\xaa\xdd\xfc\xb8\xba\xfe\x31\x18\xf2\x9f\x26\x06\xc5\xc1\x84\x7a\x7c\xb2\x25\xb8\xd1\xfa\x89\x38\x65\x09\xb3\x0a\x97\x38\x94\x48\xfb\x7e\x4d\x3d\x55\x5f\xef\x1a\x02\xf6\xd8\xc7\x53\xca\xe0\x33\x75\x22\xe5\x79\xfe\x3e\xbf\x53\x1e\xca\x3a\x0d\x87\xd8\xd2\xdd\x80\xaf\xe5\x5e\x82\x29\x4a\x03\x8d\x1d\x65\xb9\xc2\x2a\xa7\x69\x43\xcc\xe8\x39\x7e\xd1\x5e\xdb\xbf\x6b\x9e\x86\xcb\x43\xb7\x44\x50\xe3\x54\x95\x08\x35\xa1\x46\x8c\x61\xed\xed\x0e\xc5\xfb\x00\xc2\xf5\x1a\x45\xe2\x99\x38\xe4\xd1\xcd\x50\x57\xf6\x15\x15\xe5\x28\x2f\x84\xf6\xba\x15\xc4\x07\xcf\xd5\x8c\xe9\xb5\x60\x8c\xc2\xf3\xd8\x38\x78\xe1\xcf\xbf\x37\x87\x27\x54\xf8\xcf\xa1\x04\x83\x07\xcc\xfa\xec\xaa\x5c\x55\xcf\xef\xec\x96\x3d\x35\x0a\x7e\xef\xfb\x41\x21\x6c\x7f\x3f\x21\xa2\xf6\x8a\x65\xeb\x1d\xb5\xd0\xfd\x8f\x4f\x55\x3e\xb4\xaf\x8e\x83\xf1\xfe\x6c\x5a\x6f\xcb\xb0\xf5\x95\x55\xbd\x6e\xdd\x7b\x5c\xea\xb9\x12\x62\x8c\x36\x25\xc4\xf9\x68\x02\x6b\xad\x5d\x99\xf1\x6b\xb0\x39\x6a\x9a\x7b\x5b\x65\x3b\xa1\xb4\x1d\x31\x69\xb4\x5a\x3b\x17\x92\xba\x81\x75\xb4\xa7\xcb\xa0\xbb\xfa\x07\xb0\x1f\x98\x13\x61\xbd\xf4\xbb\xf7\x0e\x81\x0d\xb2\xf5\xb2\x85\xca\x5a\xab\x93\xda\xf5\xb8\xdd\x9e\x3b\x17\x18\xb4\xe0\xe6\x02\x7d\x7f\x28\xeb\xcd\xac\xf6\x05\x77\xeb\xee\xe7\x07\x2e\x0c\x53\xfa\x50\x67\xa9\x7f\xb8\xba\x5d\x19\xde\x92\x91\x9d\x74\x07\xa5\xf3\x3d\x72\x1b\xdc\xff\xc6\xbb\x60\xf5\x2d\x80\x5d\xa2\x7e\x13\xae\x2b\x6f\xdf\x9b\x75\xd8\xab\xed\xbd\xcb\xe0\x84\xf2\xbc\xbf\xa3\x31\x62\x74\x12\x1c\xa6\x29\xc6\x1a\x93\x49\x5f\x8e\xec\x57\x87\x71\xfa\x8d\x6c\xd1\x0f\x9c\xf2\xee\xc3\xcc\x48\xca\x4f\x8f\xd9\xf7\x38\x05\xaa\x8f\x46\x3f\x5b\x16\xb6\xbe\x9e\xff\x1b\x00\x00\xff\xff\x0c\x89\x31\x1b\x14\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 6932, mode: os.FileMode(420), modTime: time.Unix(1488560082, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x8b\xe3\x36\x14\x7d\xd7\xaf\xb8\x98\xed\x60\x0f\x89\xf2\xbe\x90\x87\x52\xda\xa5\x14\xca\xb2\x33\xf4\xa1\xcb\x52\x14\xfb\x3a\xa3\xc6\x96\x52\x59\x4e\x08\x46\xff\xbd\xc8\x92\x13\x7f\x4f\xb2\x9d\x21\x7d\x8a\x2c\xcb\xf7\x9c\x7b\x74\xee\x95\x52\x55\x90\x60\xca\x05\x42\x50\x68\x55\xc6\x3a\x00\x63\x56\x2b\x60\xa5\x96\xb0\x45\x81\x8a\x69\x4c\x60\x73\x02\x5d\xee\x96\x5b\x14\x64\xcf\xe2\x1d\xdb\x22\x54\x15\xd0\xcf\x7e\x6c\x0c\x21\x3c\xdf\x4b\xa5\x21\x24\x00\x00\x41\x9a\xeb\xc0\x8d\x34\xcf\x31\x20\x6e\xbc\xe5\xfa\xa5\xdc\xd0\x58\xe6\x2b\x5d\xee\x12\x2c\x76\x2b\x1f\x76\x55\xfc\x93\xad\x92\x4d\x70\xd5\x3a\x7d\xda\x63\x11\x90\x88\x90\x03\x53\x1e\xf1\x2f\x48\x73\x4d\x9f\xb4\xe2\x62\x8b\xca\x4f\x59\x6c\xfa\xcc\x73\xf4\xcf\xc9\x86\x7e\x91\xc7\xa7\x98\x09\x71\x59\x63\x83\xd1\x5f\x13\x1b\xae\xaa\xe0\x83\xdc\xfc\xfd\x3b\xcb\x11\x3e\xae\x81\xd6\x03\x63\x88\x5d\x03\xed\x97\xc6\x80\x93\x0b\xaa\x3a\x4c\x55\x2d\x41\x31\xb1\x45\xf8\xb0\xdf\xd5\x9f\x7e\x56\x3c\x67\xea\xf4\x1b\x9e\x6c\x00\xb7\xc6\xbe\x6c\x62\xda\x47\x9e\xba\x99\x32\xcb\xd8\x26\xb3\xb3\x8f\x55\x05\x28\x12\x30\xc6\xaf\x7e\x3e\xed\x91\x7e\x92\xf6\xe7\x12\x67\x69\xd7\xb4\x9e\x3c\x72\xca\x31\x4b\x6a\xf0\x5f\xec\xa8\x68\x03\xd7\xef\xfa\xd8\x7e\x72\x0a\xde\xbd\x9e\x65\x60\x08\x49\x4b\x11\x43\xf8\xd8\x55\x27\x82\x4b\xfe\x61\x04\x5f\xbf\x15\xf5\xc6\x78\xb5\x14\xea\x52\x89\xf3\xac\x9b\xf4\x4c\x27\x55\x5c\x7a\xf0\xda\x20\x5e\x9d\x9f\x64\x56\xe6\x02\x8c\x09\x16\xed\x18\x2e\x85\x7a\x66\x8e\xa2\x53\xe9\xbb\xe8\x0d\xa4\x1e\xb0\x73\xe2\xbd\x01\xc1\x1f\xb3\xec\x3e\x0a\xb6\x97\xbf\x5b\xe6\x73\x7c\x8d\x99\x15\xa6\x5b\x4f\x61\x04\x63\x0a\x0d\xf3\xf4\xa8\xfd\xda\x5b\x9e\xd1\xf4\x0b\x2f\x60\x00\xf9\x09\xf5\x00\x30\x1c\x2d\xd2\x05\x6c\xa4\xcc\x22\xcf\x83\xa7\x60\x03\xd2\x5e\xf5\xaf\xd7\x20\x78\x06\x97\x8d\xf3\x7c\xbb\x11\xff\x44\x25\xeb\x88\x29\xcb\x0a\xf4\xaa\xb5\x56\x3f\x8e\x84\x5e\x80\x56\x25\x5e\x5c\x35\x9e\xce\x53\x3f\x9d\x67\x69\xa5\x08\x1b\xda\xa3\x9c\x2d\xe5\x9b\x03\x87\x07\x18\x95\x69\x1e\x69\xb4\x3b\x3e\x9c\x0d\x74\x20\x86\xf8\x2e\x64\x6d\xd2\x1a\x92\x19\xab\x5e\x61\xa8\x4e\x9f\x9c\xf3\x54\xdf\xe5\x2d\x5b\xf5\xda\xea\x95\xce\xea\x23\x87\x53\x2d\x78\xda\x5f\xdd\x26\x3f\x67\xb1\x4e\xdc\xeb\x5d\xd6\x01\xb8\xc9\x68\x9d\x2f\xa7\xbc\xd6\xe3\x7f\x83\xdd\xba\xe2\x1d\x86\x39\x4e\x99\xae\x0f\x39\x75\x32\xce\x58\xaf\x19\xcd\xd1\xfc\x83\x65\x25\x86\xce\x90\xce\x52\x11\x70\xa1\x51\xa5\x2c\xc6\xca\x78\x56\xc5\x91\xeb\xf8\x05\xdc\xb2\xe6\x62\xf1\x7a\x3f\x8f\x59\x81\x23\x8d\xee\x63\x7f\xe3\x47\x2a\x8d\x90\x61\x5f\xbe\xa2\xd7\x5f\x10\xfb\x65\x30\x0d\xda\x51\x7a\x0c\x37\xc1\x94\x95\x99\xbe\x44\xd8\x33\xc1\xe3\xd0\x5e\xeb\x7e\x56\x4a\xaa\x34\x0c\x4a\xb1\x13\xf2\x28\xbc\x42\x3f\x14\xc1\xc2\x0d\xa3\xa8\x7f\x96\xce\x6c\x83\x3b\xf1\x87\xea\x9f\xcf\xd4\xe1\xab\x1b\x8e\xc0\x89\x5a\x79\xfd\xf4\x9f\x61\xdc\x5c\x01\xfe\x03\xe7\xf9\xdb\xc0\xd8\x31\x32\xc1\xf8\x7e\x52\x7c\xc1\x18\xf9\x01\xd5\xbd\xcb\xe8\xe1\x2e\x75\xf4\xf0\xbf\x2a\xa4\x66\x2f\xde\xdd\x99\x63\x62\xbf\xc5\x4d\x75\x42\xce\xef\x36\xa7\xfd\x4f\x19\x2a\x79\xec\xfe\xc5\xf4\xaa\x16\x40\x29\x6d\xfc\x8a\x76\x0b\x1a\x91\xe2\x83\x2a\x2c\xc5\x9c\xed\x30\xec\x68\xb5\x80\x0c\x85\xb3\x7a\xe1\x77\x25\x95\x0a\xb8\x0f\x69\x3f\x72\x79\x7a\x84\xd6\x31\x6f\x83\x7e\xe5\xdf\x60\xed\x2a\xb0\x5b\x37\xcd\x06\xb7\x37\x49\xc9\x23\x75\x09\xd8\x4f\x29\xa5\xd1\x35\xe9\xda\xbd\x1f\x64\x3c\x91\x5f\x87\x48\x6d\x9a\x57\xf1\x5b\x67\xec\xbf\x01\x00\x00\xff\xff\xd0\x98\x2c\xb2\xa5\x10\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 4261, mode: os.FileMode(420), modTime: time.Unix(1488560395, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

