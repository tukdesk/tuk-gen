// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\xeb\x08\x92\x51\x8b\x29\xcc\xcc\xe2\x3c\xfc\xba\xa0\xd9\x59\xd9\xfe\x29\x5b\x67\x31\x98\x72\x99\xa5\x06\xfd\x23\x96\x2a\xbf\xb6\xa5\xcb\x1e\xf7\xe5\xe9\x3b\x00\x00\xff\xff\xe2\xda\x6e\x23\xac\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 428, mode: os.FileMode(420), modTime: time.Unix(1488782067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1488782067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\xdf\x6f\xd4\xb8\x13\x7f\xdf\xbf\x62\xbe\x2b\xbe\x28\x41\xc1\x2d\xd2\xe9\x1e\x38\xf5\xa4\xd2\x1f\xa7\xea\xa0\x05\xca\xdd\x3d\x54\x15\xca\x8f\xc9\x92\x6e\xd6\xd9\xda\x4e\x4b\xb5\xca\xff\x7e\x1a\xdb\x49\x9c\x6c\xd2\x86\x02\xd2\x41\x1f\xd8\xc4\x33\x9e\xf9\x78\x3c\x9f\xf1\x38\x6c\x36\x90\x60\x9a\x71\x84\xb9\xbc\xce\x57\x0b\x31\x87\xaa\xda\xd9\x81\xb0\x54\x05\x2c\x90\xa3\x08\x15\x26\x10\xdd\x81\x2a\x97\xcf\x17\xc8\x67\x9b\x0d\x3c\x29\xa2\xab\xd3\x70\x85\xf0\x72\x0f\x98\x7e\x78\x5e\x55\x5a\x20\x95\x28\x63\x55\xcb\xd6\x22\xe3\x2a\x85\xb9\xfc\xbf\x3c\x7f\xf7\xfa\x0d\x19\x6f\xa6\xd2\x8c\x75\x18\x2f\xc3\x05\xc2\x66\x03\xec\xad\x7d\xae\xaa\xd9\x2c\x5b\xad\x0b\xa1\xc0\x9b\x01\x00\xcc\x93\x50\x85\x51\x28\x71\x47\x5e\xe7\xf3\x99\x19\x5b\x64\xea\x53\x19\xb1\xb8\x58\xed\x2c\x8a\x58\x84\xa9\xda\x49\x22\x31\xdf\x12\xaa\x72\x99\xa0\x5c\xee\x58\xf0\x64\x62\x27\x89\xa6\xe9\xa9\xbb\x35\xca\xf9\xcc\x9f\xcd\x6e\x42\x61\xc1\x7c\x04\x79\x9d\xb3\xf7\x28\xcb\x5c\xd9\x81\x24\x62\x07\x05\xe7\xf6\x4d\x4f\x62\x27\x49\x23\x14\xec\x30\x0b\x73\x8c\x95\x41\x9e\x71\xe9\x06\xb0\xaa\x4c\x60\x60\x0f\x4e\xf1\x76\x48\xe2\xf1\x2c\xf7\x09\x44\x5a\xf2\x78\x54\x09\x3f\x63\x5c\xaa\x42\x10\x9a\x23\xfb\xec\xc3\xb3\xde\x96\x54\x15\x6c\x34\x0a\x81\xaa\x14\x1c\x9e\x6e\xc9\x8d\x98\xfe\x6a\x8b\x2f\x9b\xa7\x40\xcb\xaa\x59\x65\xb1\x0c\x02\x79\xd8\xe9\x48\x04\xc8\x2c\x05\x0f\xb6\xa7\x9b\x37\x6b\xe5\x2c\xba\xc2\x58\x19\x2f\xad\x8d\x99\x0b\xd9\x0d\x42\x83\xd6\xdb\xc6\xe5\xc3\x87\x30\xca\xd1\xf3\xc9\x43\xc6\x17\x5d\x9c\x73\xca\x4a\xad\x70\x92\x20\x57\x59\x9a\xa1\x80\xaa\x9a\xdf\x6f\xf1\x88\x2f\x32\xbe\x65\x72\xb3\x81\x2c\x05\x8e\xc0\x8c\x1c\xe6\x73\x4d\x80\xbe\x3b\x2b\x25\x2f\x76\x1a\xe6\x12\xfb\xaa\x49\xc4\x0e\x31\x0d\xcb\x5c\xd5\xde\x1a\x6d\x9e\x68\xe5\x06\xa2\xfa\x94\xc9\x81\x1d\xf1\x81\x52\xd6\xf3\xc1\x7b\x66\xd3\x37\x00\x14\x82\x72\xc6\x00\xce\x52\xc8\x38\x47\x41\x22\xf8\xdf\x1e\xf0\x2c\x87\x36\x37\x9a\x9d\xb4\x1a\x01\xc9\x6d\x76\xe8\x9f\xb8\xb6\x48\x55\x20\x89\xd8\x1f\xa8\x34\x14\x56\x03\xf6\x6b\x2f\xa4\x33\x66\x9f\x67\xb9\x36\xe2\x5a\xb6\xa2\xb8\xf1\xfa\xf0\x52\xdf\x94\x52\xd9\xe5\xd6\xab\x7d\xd4\x2a\x07\x60\x24\x11\x23\xeb\x03\xcb\x7b\x18\x56\x9d\xa1\x9e\xef\xe6\x6b\x8b\x4c\x1b\x6c\x52\x7a\x0c\x5d\x47\x6b\x00\xa1\x96\xb7\x11\x98\x80\xeb\xfc\xdd\x6b\x1b\xa9\x57\x65\x96\x27\x28\xba\xb4\x30\xeb\x6c\xb0\x33\xad\x3e\xc5\xac\x5a\xa9\x13\x2e\x51\xa8\x13\xae\x0a\x2f\x2e\xf2\x72\xc5\x81\x31\x66\x88\xa2\x3d\x0a\x66\x34\x48\x77\xc0\xab\x76\xc5\x1c\x23\x7a\xd4\x72\xd8\x67\x07\xda\xa4\xb4\xa6\x19\x63\x53\x61\x9d\x23\xd5\xe7\x31\x48\x46\x7a\x2f\xa4\x8e\x01\x72\xcc\x8e\x45\xb1\xea\xc2\x9b\x88\xe5\xaf\x75\x12\x2a\xf4\xac\x6f\xf3\x76\xaf\x6f\x3b\xe1\x31\xbe\x0e\x31\xc7\xd6\x97\x79\xbb\xd7\x97\x51\x79\xd4\xda\xfe\xf9\x84\x02\xbd\x5b\xfa\x17\x32\xae\x50\xa4\x61\x8c\x9b\x2a\x20\x26\x27\x92\x82\xee\x8c\x6a\x46\xe8\x19\xa3\x50\x1c\x7b\xd6\xc6\xc4\x0d\x37\xe9\xe3\x15\xd1\x95\xf6\xda\x3b\x47\x7c\xf0\xda\x03\x7e\xbb\x26\xe6\xc8\xf5\x4c\x1f\xf6\xf6\x60\x77\xa4\x62\xf5\x6a\x21\x91\x93\xca\x60\x8f\x38\x46\x28\x29\xdc\xb5\xb0\x47\x11\x3d\x66\x8e\x3b\x76\x9c\x61\x9e\x48\xcf\xd7\x8b\xa4\x89\x69\x21\xe0\x63\x00\x45\x74\x45\xd3\x45\xc8\x17\x08\x7a\x4d\x2d\x26\x6d\x7b\x4f\xff\xb0\xbf\xc3\xbc\x44\x49\xd8\xeb\xc7\xd6\x54\xb7\x60\x10\x5c\x0d\x93\xd0\x78\x34\x79\x52\x3a\x85\x37\xf8\x43\xc6\x74\x3f\xcf\xbf\x5d\x54\xbb\xc6\xbe\x45\x5c\x8f\x33\x9e\x9c\x71\x7c\x75\xf7\x56\x64\xab\x50\xdc\xfd\x89\x77\x5e\xaa\x73\x01\x2e\x2e\x4d\x99\x0a\x4c\xfb\xdc\xc8\xd9\x71\xc9\xe3\x0f\x77\x6b\x4c\xf6\xc5\x42\x9a\xf8\xf7\x76\xa4\xb7\x09\x21\x4f\xda\x78\x69\x76\xed\xf3\xc4\x6b\x56\xbc\xd9\xd8\x48\x3c\x59\x2f\x75\xc7\xdf\xfa\x6a\x3a\x13\xfa\x73\xe6\x1f\x5d\x7b\xd4\xcf\x3c\x59\x2f\x6d\x55\xa6\x96\x46\x03\xa5\xa1\x7a\x75\x81\xeb\x82\x5a\x17\x6b\xcc\x84\xcf\xd4\x8a\x1a\x97\xe1\x7b\xc8\x13\x7f\xfb\x78\xb3\x41\xb2\x81\x09\xc0\x56\x85\xdd\xa9\x01\x3e\x2e\xf3\xbc\x1f\xe4\xaf\x89\xe9\x18\xc0\x8e\x03\x9d\xd6\x03\x5e\x6a\x07\xd3\x93\x63\x3b\x21\x4c\xe8\xea\x1a\x1a\x40\x91\xa6\x12\x15\x94\x19\x57\xbf\xfe\x12\x40\x21\x12\x14\x9a\xa9\x49\xc4\xce\xe8\xe5\xc1\x14\xb9\x97\x70\x96\xc4\x06\xc6\x16\x8d\x2d\x3a\x3b\x77\x8b\x7b\x2e\x55\xb6\x98\x6b\x0f\x56\x63\x42\x1f\xac\xaf\xb3\x55\xa6\xbc\x17\x4d\xff\xa8\x97\x6a\xcf\x8a\xad\x1e\xc9\xe5\xaa\x73\x60\xd4\x61\x31\x2f\x07\xcd\xe1\xe1\x20\xc9\xd2\x3a\x68\xbf\x77\x16\xe3\x5a\x3c\xd3\x0a\x9e\xd1\xeb\xcc\xae\xcb\x08\x85\xd6\x29\x24\x26\xec\xad\x31\x72\x42\x63\xec\xf0\xe8\xfc\xc0\x19\xdf\x72\x44\x4a\x87\x28\x63\xcf\xa8\x1b\x4a\xf9\x1d\xfd\xb8\xe0\x2a\xe3\x25\x36\x83\x16\xca\xa0\xad\xfd\x41\x53\x75\xbd\x2a\x6e\x09\xb3\xae\x57\xef\x4a\x14\x77\xef\x8b\x5b\xa7\x66\x99\xdc\x96\xa4\xf2\xb4\x9b\x32\x9b\xca\x6d\xea\x69\xd9\x28\xd9\x79\x1c\x72\x4f\x14\xb7\x01\xb4\x9b\xf8\xdb\x63\xbb\x7e\x81\x72\x6a\xd3\x4f\xdc\x98\x4a\x8c\x00\x72\xca\xaa\xfb\xf9\x71\x71\xf9\x63\x30\xe4\x3f\x4d\x0c\x8a\x83\x0e\xf5\xf8\x64\x43\x70\xad\xf5\x13\x71\xca\x10\x66\x15\x2e\x71\x28\x91\x76\xfd\x86\x7a\xb2\xb9\x36\xb7\x04\xec\xb1\x2f\x4b\x29\x83\x4f\xe4\x91\x10\xa7\xc5\xfb\xe2\x56\x7a\x28\x9a\x34\x1c\x62\x4b\x77\x03\xbe\x94\x7b\x09\xa6\x28\x34\x34\x76\x90\x17\x12\xeb\x9c\xa6\x0d\xd1\xa3\xa7\xf8\x59\x79\xae\x7f\xdb\x3e\x0d\x97\x87\x6e\x89\xa0\xd6\xa9\x2e\x11\x72\x42\x8d\x18\xc3\xda\xdb\x1d\x8a\xf7\x1e\x84\xeb\x35\xf2\xc4\xd3\x71\x28\xa2\xab\xa1\xae\xec\x0b\x2a\xca\x41\x51\x72\xe5\x75\x2b\x88\x0f\x9e\xad\x19\xd3\x6b\xc1\x18\x85\xe7\xb1\x76\xf0\xc2\x9f\x7f\x6f\x0e\x4f\xa8\xf0\x37\xa1\x00\x8d\x07\xf4\xfa\xcc\xaa\x6c\x55\x2f\x6e\xcd\x96\x3d\xd5\x0a\x7e\xef\xbb\x4c\xc9\x4d\x8f\x3f\x21\xa2\xe6\xea\x6a\xea\x1d\x35\xd1\xfd\x8f\x7a\x75\x3e\xb8\x57\xf2\xc1\x78\xdf\xe8\x3e\xdc\x30\x6c\x7d\x61\x54\x2f\x9d\xfb\xa4\x4d\x3d\x5b\x42\xb4\xd1\xb6\x84\x58\x1f\x6d\x60\x8d\xb5\x0b\x3d\x7e\x09\x26\x47\x75\x7b\x6f\xaa\x6c\x27\x94\xa6\x23\x26\x0d\xa7\xb5\xb3\x21\x69\x1a\x58\x4b\x7b\xba\x64\xdb\x4f\x2a\x01\xec\x06\xfa\x44\x58\x2f\xfd\xee\xcd\x83\x63\x8b\x6c\xbd\x74\x50\x19\x6b\x4d\x52\xdb\x1e\xb7\xdb\x73\x17\x1c\x03\x07\x6e\xc1\xd1\xf7\x87\xb2\x5e\xcf\x72\x3f\x1c\xb8\x77\xea\xde\x35\xc0\xe4\x11\x63\xbe\x1f\xd8\xc8\x4c\x69\x4d\xad\xf1\xfe\x79\x6b\x37\x6a\x78\x97\x46\x36\xd7\x9e\x9d\xd6\xf7\xc8\x25\x71\xf7\x2b\xaf\x88\xf5\x67\x17\x76\x8e\xea\x4d\xb8\xae\xbd\x7d\x6f\x22\x62\xaf\xdc\xf7\xee\x87\x13\x2a\xf6\xee\x3d\xbd\x12\xa3\xc3\x61\x3f\x4d\x31\x56\x98\x4c\xfa\x48\x67\x3e\xf0\x8c\x33\x72\x64\x8b\x7e\x60\x16\xd8\x6f\x60\xd3\x59\x30\x3d\x8c\xdf\xe3\xac\xa8\x3f\xd9\xfd\x6c\x89\xe9\xfc\xdf\xc5\xbf\x01\x00\x00\xff\xff\x20\x8a\xe7\x3b\x92\x1c\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7314, mode: os.FileMode(420), modTime: time.Unix(1489040367, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x5d\x8b\xe3\x36\x14\x7d\xd7\xaf\xb8\x98\xed\x60\x0f\x89\xf2\xbe\x90\x87\x52\xda\xa5\x14\xca\xb2\x33\xf4\xa1\xcb\x52\x14\xfb\x3a\xa3\xc6\x96\x52\x59\x4e\x08\x46\xff\xbd\xc8\x92\x13\x7f\x4f\xb2\xcd\x30\x7d\x8a\x2c\xcb\xf7\x9c\x7b\x74\xee\x95\x52\x55\x90\x60\xca\x05\x42\x50\x68\x55\xc6\x3a\x00\x63\x56\x2b\x60\xa5\x96\xb0\x45\x81\x8a\x69\x4c\x60\x73\x02\x5d\xee\x96\x5b\x14\x64\xcf\xe2\x1d\xdb\x22\x54\x15\xd0\xcf\x7e\x6c\x0c\x21\x3c\xdf\x4b\xa5\x21\x24\x00\x00\x41\x9a\xeb\xc0\x8d\x34\xcf\x31\x20\x6e\xbc\xe5\xfa\xa5\xdc\xd0\x58\xe6\x2b\x5d\xee\x12\x2c\x76\x2b\x1f\x76\x55\xfc\x93\xad\x92\x4d\x70\xd5\x3a\x7d\xda\x63\x11\x90\x88\x90\x03\x53\x1e\xf1\x2f\x48\x73\x4d\x9f\xb4\xe2\x62\x8b\xca\x4f\x59\x6c\xfa\xcc\x73\xf4\xcf\xc9\x86\x7e\x91\xc7\xa7\x98\x09\x71\x59\x63\x83\xd1\x5f\x13\x1b\xae\xaa\xe0\x83\xdc\xfc\xfd\x3b\xcb\x11\x3e\xae\x81\xd6\x03\x63\x88\x5d\x03\xed\x97\xc6\x80\x93\x0b\xaa\x3a\x4c\x55\x2d\x41\x31\xb1\x45\xf8\xb0\xdf\xd5\x9f\x7e\x56\x3c\x67\xea\xf4\x1b\x9e\x6c\x00\xb7\xc6\xbe\x6c\x62\xda\x47\x9e\xba\x99\x32\xcb\xd8\x26\xb3\xb3\x8f\x55\x05\x28\x12\x30\xc6\xaf\x7e\x3e\xed\x91\x7e\x92\xf6\xe7\x12\x67\x69\xd7\xb4\x9e\x3c\x72\xca\x31\x4b\x6a\xf0\x5f\xec\xa8\x68\x03\xd7\xef\xfa\xd8\x7e\x72\x0a\xde\xbd\x9e\x65\x60\x08\x49\x4b\x11\x43\xf8\xd8\x55\x27\x82\x4b\xfe\x61\x04\x5f\xbf\x15\xf5\xc6\x78\xb5\x14\xea\x52\x89\xf3\xac\x9b\xf4\x4c\x27\x55\x5c\x7a\xf0\xda\x20\x5e\x9d\x9f\x64\x56\xe6\x02\x8c\x09\x16\xed\x18\x2e\x85\x7a\x66\x8e\xa2\x53\xe9\xbb\xe8\x0d\xa4\x1e\xb0\x73\xe2\xdd\x81\xe0\x8f\x59\xf6\x3e\x0a\xb6\x97\xbf\x59\xe6\x73\x7c\x8d\x99\x15\xa6\x5b\x4f\x61\x04\x63\x0a\x0d\xf3\xf4\xa8\xfd\xda\x5b\x9e\xd1\xf4\x0b\x2f\x60\x00\xf9\x09\xf5\x00\x30\x1c\x2d\xd2\x05\x6c\xa4\xcc\x22\xcf\x83\xa7\x60\x03\xd2\x5e\xf5\xaf\xd7\x20\x78\x06\x97\x8d\xf3\x7c\xbb\x11\xff\x44\x25\xeb\x88\x29\xcb\x0a\xf4\xaa\xb5\x56\x3f\x8e\x84\x5e\x80\x56\x25\x5e\x5c\x35\x9e\xce\x53\x3f\x9d\x67\x69\xa5\x08\x1b\xda\xa3\x9c\x2d\xe5\x9b\x03\x87\x07\x18\x95\x69\x1e\x69\xb4\x3b\x3e\x9c\x0d\x74\x20\x86\xf8\x2e\x64\x6d\xd2\x1a\x92\x19\xab\x5e\x61\xa8\x4e\x9f\x9c\xf3\x54\xdf\xe5\x2d\x5b\xf5\xda\xea\x95\xce\xea\x23\x87\x53\x2d\x78\xda\x5f\xdd\x26\x3f\x67\xb1\x4e\xdc\xeb\x5d\xd6\x01\xb8\xc9\x68\x9d\x2f\xa7\xbc\xd6\xe3\x7f\x83\xdd\xba\xe2\x1d\x86\x39\x4e\x99\xae\x0f\x39\x75\x32\xce\x58\xaf\x19\xcd\xd1\xfc\x83\x65\x25\x86\xce\x90\xce\x52\x11\x70\xa1\x51\xa5\x2c\xc6\xca\x78\x56\xc5\x91\xeb\xf8\x05\xdc\xb2\xe6\x62\xf1\x7a\x3f\x8f\x59\x81\x23\x8d\xee\x63\x7f\xe3\x47\x2a\x8d\x90\x61\x5f\xbe\xa2\xd7\x5f\x10\xfb\x65\x30\x0d\xda\x51\x7a\x0c\x37\xc1\x94\x95\x99\xbe\x44\xd8\x33\xc1\xe3\xd0\x5e\xeb\x7e\x56\x4a\xaa\x34\x0c\x4a\xb1\x13\xf2\x28\xbc\x42\x3f\x14\xc1\xc2\x0d\xa3\xa8\x7f\x96\xce\x6c\x83\x3b\xf1\x87\xea\x9f\xcf\xd4\xe1\xab\x1b\x8e\xc0\x89\x5a\x79\xfd\xf4\x9f\x61\xdc\x5c\x01\xfe\x03\xe7\xf9\xdb\xc0\xd8\x31\x72\x87\xeb\xc0\x9d\xb5\xf8\x82\x31\xf2\x03\xaa\xf7\xae\xa3\x87\x77\x29\xa4\x87\xff\x55\x25\x35\x7b\xf1\xe6\xd6\x1c\x13\xfb\x1e\xde\x9c\x90\xf3\xbb\xcd\x69\xff\x54\x86\x4a\x1e\xbb\xff\x31\xbd\xaa\x05\x50\x4a\x1b\xbf\xa2\xdd\x82\x46\xa4\xf8\xa0\x0a\x4b\x31\x67\x3b\x0c\x3b\x5a\x2d\x20\x43\xe1\xac\x5e\xf8\x5d\x49\xa5\x02\xee\x43\xda\x8f\x5c\x9e\x1e\xa1\x75\xce\xdb\xa0\x5f\xf9\x37\x58\xbb\x0a\xec\xd6\x4d\xb3\xc1\xed\x4d\x52\xf2\x48\x5d\x02\xf6\x53\x4a\x69\x74\x4d\xba\x76\xef\x07\x19\x4f\xe4\xd7\x21\x52\x9b\xe6\x55\xfc\xd6\x21\xfb\x6f\x00\x00\x00\xff\xff\x73\xc3\xdc\x6a\xa6\x10\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 4262, mode: os.FileMode(420), modTime: time.Unix(1489040406, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

