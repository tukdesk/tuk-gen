// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1487144781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\x13\xb6\x42\x2a\x5c\x3a\x05\x86\x7d\xe8\xe0\x01\x6d\x5e\x8a\x60\x6d\xd2\x36\xdd\xf6\x21\x08\x0a\xbd\x9c\x5c\xc6\x32\xe5\x90\x54\x5d\xc3\xd0\x7f\x1f\xf8\x22\x99\x92\x25\x5b\xcd\x1a\x20\x6b\x51\xd4\x12\x79\xbc\x7b\xee\x78\xf7\x90\xa7\x6e\x36\x90\x60\x4a\x19\x82\x27\xee\xb2\xc5\x8c\x7b\x50\x96\x93\x09\x84\x85\xcc\x61\x86\x0c\x79\x28\x31\x81\x68\x0d\xb2\x98\x3f\x9b\x21\x1b\x6d\x36\xf0\x73\x1e\xdd\x5e\x84\x0b\x84\x17\x53\x20\xfa\xe1\x59\x59\xea\x09\x21\x79\x11\xcb\x6a\x6e\xc9\x29\x93\x29\x78\xe2\x17\x71\xf5\xfe\xcd\x5b\xa5\xbc\x5e\xaa\x56\x2c\xc3\x78\x1e\xce\x10\x36\x1b\x20\xef\xec\x73\x59\x8e\x46\x74\xb1\xcc\xb9\x04\x7f\x04\x00\xe0\x25\xa1\x0c\xa3\x50\xe0\x44\xdc\x65\xde\xc8\x8c\xcd\xa8\xfc\x5c\x44\x24\xce\x17\x93\x59\x1e\xf3\x30\x95\x93\x24\xe2\xde\xce\xa4\x2c\xe6\x09\x8a\xf9\xc4\x82\x57\x2a\x26\x49\x34\x4c\x4e\xae\x97\x28\xbc\x51\x30\x1a\x7d\x09\xb9\x05\xf3\x09\xc4\x5d\x46\x3e\xa0\x28\x32\x69\x07\x92\x88\x1c\xe7\x8c\xd9\x37\xbd\x88\x9c\x27\xf5\x24\x27\x27\x34\xcc\x30\x96\x06\x39\x65\xc2\x0d\x60\x59\x9a\xc0\xc0\x14\x2e\x70\xd5\x35\xe3\x33\x9a\x05\x0a\x44\x5a\xb0\xb8\x57\x08\xbf\x62\x5c\xc8\x9c\x2b\x34\xa7\xf6\x39\x80\xa7\xad\x2d\x29\x4b\xd8\x68\x14\x1c\x65\xc1\x19\x3c\xd9\x99\x37\xd3\xea\x4f\xa5\xf1\x45\xfd\x34\xd6\x73\xe5\xa8\xb4\x58\x3a\x81\x1c\x36\xda\x13\x01\xa5\x56\x05\x0f\x76\x97\x9b\x37\xab\xe5\x32\xba\xc5\x58\x1a\x2b\x5b\x1d\x23\x17\xb2\x1b\x84\x1a\xad\xbf\x8b\x2b\x80\x8f\x61\x94\xa1\x1f\x28\x0b\x94\xcd\x9a\x38\x3d\x95\x95\x5a\xe0\x3c\x41\x26\x69\x4a\x91\x43\x59\x7a\xfb\x35\x9e\xb2\x19\x65\x3b\x2a\x37\x1b\xa0\x29\x30\x04\x62\xe6\xc1\xf3\x74\x01\xb4\xcd\xd9\x59\x65\xc5\x2e\xc3\x4c\x60\x5b\x34\x89\xc8\x09\xa6\x61\x91\xc9\xca\x5a\x2d\xcd\x12\x2d\x5c\x43\x94\x9f\xa9\xe8\xd8\x91\x00\x54\xca\xfa\x01\xf8\x4f\x6d\xfa\x8e\x01\x39\x57\x39\x63\x00\xd3\x14\x28\x63\xc8\xd5\x14\xfc\x34\x05\x46\x33\xd8\xe6\x46\xbd\x93\x56\x62\xac\xe6\x6d\x76\xe8\x9f\xb8\xd2\xa8\x58\x20\x89\xc8\x6b\x94\x1a\x0a\xa9\x00\x07\x95\x15\x25\xd3\xa7\x9f\xd1\x4c\x2b\x71\x35\xdb\xa9\xb8\xb6\x7a\xd8\xd5\xb7\x85\x90\xd6\xdd\xca\xdb\x7b\x79\xd9\x01\x23\x89\x88\xd2\xde\xe1\xde\x61\x58\x55\x86\xfa\x81\x9b\xaf\x5b\x64\x5a\x61\x9d\xd2\x7d\xe8\x1a\x52\x1d\x08\xf5\xfc\x36\x02\x03\x70\x5d\xbd\x7f\x63\x23\xf5\xaa\xa0\x59\x82\xbc\x59\x16\xc6\xcf\x1a\x3b\xd1\xe2\x43\xd4\xca\x85\x3c\x67\x02\xb9\x3c\x67\x32\xf7\xe3\x3c\x2b\x16\x0c\x08\x21\xa6\x50\xb4\x45\x4e\x8c\x84\x92\xed\xb0\xaa\x4d\x11\x47\x89\x1e\xb5\x35\x1c\x90\x63\xad\x52\x58\xd5\x84\x90\xa1\xb0\xae\x50\xf1\x73\x1f\x24\x33\xbb\x17\x52\x43\x81\x32\x4c\xce\x78\xbe\x68\xc2\x1b\x88\xe5\xaf\x65\x12\x4a\xf4\xad\x6d\xf3\xb6\xd7\xb6\x5d\x70\x1f\x5b\x27\x98\xe1\xd6\x96\x79\xdb\x6b\xcb\x88\xdc\xcb\xb7\x7f\x3e\x23\x47\x7f\xa5\xfe\x05\xca\x24\xf2\x34\x8c\x71\x53\x8e\x55\x25\x27\x42\x05\xdd\x19\xd5\x15\xa1\x57\xf4\x42\x71\xf4\x59\x1d\x03\x37\xdc\xa4\x8f\x9f\x47\xb7\xda\x6a\xeb\x1c\x09\xc0\xdf\x1e\xf0\xbb\x9c\x98\x21\xd3\x2b\x03\x98\x4e\xe1\xa8\x87\xb1\x5a\x5c\xa8\x8a\x53\xd1\x60\xab\x70\xcc\xa4\x50\xe1\xae\x26\x5b\x25\xa2\xc7\xcc\x71\x47\xce\x28\x66\x89\xf0\x03\xed\xa4\x5a\x98\xe6\x1c\x3e\x8d\x21\x8f\x6e\xd5\x72\x1e\xb2\x19\x82\xf6\x69\x8b\x49\xeb\x9e\xea\x1f\xf2\x77\x98\x15\x28\x14\xf6\xea\x71\xab\xaa\x49\x18\x0a\xae\x86\xa9\xd0\xf8\x6a\xf1\x90\xa8\x9e\x51\x96\x5c\x32\x7c\xb5\x7e\xc7\xe9\x22\xe4\xeb\x3f\x71\xed\xa7\x1a\x33\x5c\xdf\x98\x72\x1a\xc3\x1c\xd7\xe6\xaa\x57\xcb\x90\x8f\xeb\x25\x92\xd7\xb9\xfa\x31\xd1\x6f\xed\x47\x6b\x0b\x4c\xfe\x54\xf1\x32\x39\xe0\x24\xc5\xe9\x9d\xef\xb5\x0c\x18\x52\x50\x27\xaa\xb6\x1f\x04\xbb\xec\x68\xb1\x5b\xbc\x63\xb0\x49\x75\x34\xd4\xef\xb3\x22\xcb\xda\xbe\x3f\x72\x57\x75\x9e\x7e\xab\x9f\xae\x83\xa2\x73\x77\xd5\xeb\x5e\xaf\xc7\x90\xf3\x04\xb9\xae\xbc\x24\x22\x97\xea\x25\x00\xff\xfa\xe6\x81\x63\x21\xfa\x82\xb1\xb3\xe9\xfa\xaf\x01\x39\x90\x50\xaa\x14\x68\x86\xe7\xff\x19\x8d\x46\x5e\xdc\x2f\x14\xdb\x4a\x72\x72\xc3\x40\xae\x48\x7d\x0c\x79\x9a\x0a\x94\x50\x50\x26\x7f\xfb\xb5\x27\x0c\xfb\x83\xb0\x97\x55\x2d\x53\x1b\x18\x3b\x5c\x6d\xd1\xd9\xb5\x2e\xc1\xbe\xcc\x32\xbf\xc1\x89\x3b\xf4\x6c\x4f\x7a\xa3\x42\x9f\xf4\x6f\xe8\x82\x4a\xff\x79\x7d\xa1\xd5\xae\xda\xc3\x6b\xe7\xd2\xe6\x52\xb2\x73\x82\x55\x61\x31\x2f\xc7\xf5\x69\xe6\x20\xa1\x69\x15\xb4\x3f\x1a\xce\xb8\x1a\x2f\xb5\x80\x6f\xe4\x1a\xab\xab\xd3\x42\x85\xd6\x39\x2f\x4c\xd8\xb7\xca\x94\x11\x35\x46\x4e\x4e\xaf\x8e\x9d\xf1\x1d\x43\x4a\xe8\x04\x45\xec\x1b\x71\x93\x5f\x41\x43\x3e\xce\x99\xa4\xac\xc0\x7a\xd0\x42\xe9\xd4\xf5\xb2\x53\x55\x75\x30\xe5\x2b\x85\x59\x1f\x4c\xef\x0b\xe4\xeb\x0f\xf9\xca\x39\x9c\x4c\x22\x0b\x25\xf2\xa4\x99\x32\x9b\xd2\xed\x32\x94\xdb\x28\xc8\x55\x1c\x32\xb5\xcf\x3c\x5f\x05\xbf\xdf\xb7\xfd\xe0\x28\x86\x76\x1f\x0e\xcb\x1c\x2c\x88\x31\x64\x2a\x9b\xf6\xd7\xc5\x21\x7a\x78\x2c\x95\xf1\xa8\x0b\x42\xc5\x41\x87\xba\x7f\xb1\x29\x6c\x2d\xf5\x03\xd5\x92\x29\x94\x45\x38\xc7\xae\x44\x3a\x0a\xea\x92\x13\x75\xff\xbe\x2d\xbc\x56\xd5\xd1\x54\x65\xf0\xb9\x38\xe5\xfc\x22\xff\x90\xaf\x84\x8f\xbc\x4e\xc3\xae\x6a\x69\x6e\xc0\xb7\xd6\x9e\x0a\xbc\x02\x46\x2e\xf0\xab\xf4\x5d\x3b\xf6\x16\xdc\x5d\xfe\x4d\x0a\x50\x37\x60\x87\x02\x44\x1f\x07\xf4\x61\x69\x45\x5f\xc5\x73\x0a\xe1\x72\x89\x2c\xf1\xb5\x9f\x79\x74\xdb\x75\xad\xfe\x06\xc6\x38\xce\x0b\x26\xfd\x26\x43\x04\xe0\x5b\x4e\x18\x5e\xeb\x7d\x25\xea\xc5\xda\xc0\xf3\xc0\x7b\xe8\x1a\x1d\xc0\xdc\x5f\x42\x0e\x1a\x0f\x68\xff\x8c\x57\x96\xad\xf3\x95\xde\x2a\xff\x89\x16\x08\x5a\x1f\x80\x0a\x66\x1a\xb4\x01\x11\x35\x3d\xb2\xe1\x33\xd5\x03\xb5\xbf\x1e\x8e\x2b\xe6\x73\x7a\xff\xce\x78\x7f\xd1\xbd\x93\xa9\xa0\xe5\xb5\x11\xbd\x71\x1a\x57\x9b\x72\x96\x22\xb4\xd2\x2d\x45\x58\x1b\xdb\xc0\x1a\x6d\xd7\x7a\xfc\x06\x4c\x6e\xea\xee\xcc\xb0\x68\x23\x94\xcb\x79\x95\xbd\x4e\x97\x61\x43\x72\xf8\x42\xb8\x9c\x8f\x1d\xed\xcb\x79\xd0\x75\x03\xb4\x5f\x12\xec\xf5\xcf\x80\x1b\x72\xeb\x73\xd7\x39\x47\x9a\x8d\x55\x77\xa0\x7a\xe2\x6b\x8f\x27\x6b\xbb\xa7\xc9\x3e\xfa\x8f\x2d\x76\xf5\x89\x85\x5c\xa1\x7c\x1b\x2e\x2b\x6b\x0f\x5d\x0b\xd8\x62\xd4\x56\x8f\x3d\x80\x14\x8f\xf6\x5c\x47\x88\xe2\xdf\x97\x69\x8a\xb1\xc4\x64\xd0\x07\x39\xf3\x31\xa7\xbf\x28\x7a\xb6\xe8\xfb\x27\x62\x3b\x0f\xed\x67\x29\xad\x6c\xb8\x23\x1d\xed\x17\x21\xe4\x50\x0f\xde\xef\xa1\x7b\x05\xba\xaf\xa7\xb6\xd7\xfa\x3e\x0e\x3e\xc4\x89\x50\x7d\x01\xfc\xd1\x72\xdf\xf9\xaf\x90\x7f\x03\x00\x00\xff\xff\xc6\x24\xb9\xc7\xe1\x1c\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7393, mode: os.FileMode(420), modTime: time.Unix(1487150807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x6b\xf3\x36\x14\xbe\xd7\xaf\x38\x98\xae\xd8\x25\x51\xee\x0b\xb9\x18\x63\x2b\x63\x30\x46\x5b\x76\xb1\x52\x86\x62\x1f\xa7\x5a\x6c\x29\x93\xe5\x84\x60\xf4\xdf\x5f\x64\xc9\xb1\x13\x7f\xa4\x09\x2f\xe5\xbd\xaa\x2a\x4b\xe7\xf9\xd0\xa3\xa3\x54\x15\x24\x98\x72\x81\x10\x14\x5a\x95\xb1\x0e\xc0\x98\xc5\x02\x58\xa9\x25\xac\x51\xa0\x62\x1a\x13\x58\x1d\x40\x97\x9b\xf9\x1a\x05\xd9\xb2\x78\xc3\xd6\x08\x55\x05\xf4\x2f\x3f\x36\x86\x10\x9e\x6f\xa5\xd2\x10\x12\x00\x80\x20\xcd\x75\xe0\x46\x9a\xe7\x18\x10\x37\x5e\x73\xfd\x51\xae\x68\x2c\xf3\x85\x2e\x37\x09\x16\x9b\x85\x2f\xbb\x28\xfe\xcf\x16\xc9\x2a\xf8\xd4\x3a\x7d\xd8\x62\x11\x90\x88\x90\x1d\x53\x1e\xf1\x5f\x48\x73\x4d\x5f\xb4\xe2\x62\x8d\xca\x4f\x59\x6c\xfa\xca\x73\xf4\xff\x27\x2b\xfa\x2c\xf7\x2f\x31\x13\xa2\x5d\x63\x8b\xd1\xdf\x13\x5b\xae\xaa\xe0\x4e\xae\xfe\xfb\x93\xe5\x08\x8f\x4b\xa0\xf5\xc0\x18\x62\xd7\x40\xf7\xa3\x31\xe0\xec\x82\xaa\x2e\x53\x9b\xa1\x78\xce\xd4\xe1\x0f\x3c\x34\xfb\xce\xa7\x5f\x0f\x5b\xa4\x4f\xd2\xfe\xb1\x55\xdd\xc6\x39\x28\x26\xd6\x08\x77\x29\xc7\x2c\xa9\x61\x7f\xb3\xa3\xa2\x5d\xe2\xbf\x75\xcb\xf2\xf4\x38\x59\x66\x19\x5b\x65\xf6\xc3\x43\x55\x01\x8a\x04\x8c\x69\xf7\x8c\x60\xa2\x48\x8c\x21\x86\x90\xb4\x14\x31\x84\x0f\xa7\xe2\x22\x70\x14\xc2\x08\xde\xde\x8b\xda\x53\x2f\x54\xa1\x2e\x95\x38\xce\xba\x49\xcf\x72\x4c\xc7\xdc\xe3\xd6\x47\xdb\x32\xfb\x45\x66\x65\x2e\xc0\x98\x60\xd6\xad\xe2\x04\xd4\x33\x17\x09\xfe\x9c\x65\x57\x50\x0c\xce\x8e\x63\x84\xc0\x97\xca\x68\xe9\x84\x11\x0c\xc9\x18\x27\x7d\xc9\x9c\xe1\x4c\xde\x04\x33\xe1\x8a\x31\x97\x48\x9c\x86\x77\x02\xbf\x67\xa8\x87\x1e\xc8\xfa\xfc\x08\xab\x3f\x78\x01\x3d\xec\x27\xd4\x43\xc8\xe1\xd8\xbd\x98\xc1\x4a\xca\x2c\xf2\x9c\x78\x0a\xb6\x2c\xed\xdf\xbc\xe5\x12\x04\xcf\xa0\xcd\x94\xa7\xdf\xab\xfb\x0f\x2a\x59\xd7\x4d\x59\x56\xa0\x8f\x41\x67\xc3\xc3\x30\xc0\x0c\xb4\x2a\xb1\x3d\xd9\x61\x75\x2f\x03\xea\x5e\xa5\x35\x27\x6c\x24\x8c\xf1\xb7\xf4\x6f\x29\x1f\xee\xfa\x1a\xbd\x77\x17\x21\xc7\xda\xd5\xfd\xf1\x9a\xec\x88\x21\xbe\x2b\xd9\x40\xb5\xd7\x67\x8a\xe6\xdf\x2c\x2b\x31\x74\x81\x74\x91\x8a\x80\x0b\x8d\x2a\x65\x31\x56\xc6\xb3\x2a\xf6\x5c\xc7\x1f\xe0\x96\xb9\xa9\x98\x15\x38\x11\xf8\xc7\xf3\xc3\x6d\x84\x0d\xdc\x26\x42\x3e\xd9\x34\x8e\x98\xbd\x90\x8f\xc2\x9d\xfa\x78\x44\xea\x34\x96\x04\x53\x56\x66\xba\xad\xb0\x65\x82\xc7\xa1\x7d\x08\x7f\x55\x4a\xaa\x34\x0c\x4a\xb1\x11\x72\x2f\xbc\xfe\x9f\x8a\x60\xe6\x86\x51\x74\xde\x9a\x26\x4c\x76\xef\x40\xdf\xdb\x63\xa7\xed\x7f\xba\xa2\x97\x8e\xdc\x84\xcb\xcd\x74\x82\x71\xf3\x30\x5c\xcd\x79\xe2\xac\xaf\x7e\x24\xbe\xb3\xb0\x67\x8c\x91\xef\x50\x7d\x45\xe4\xef\xbf\x38\xf3\xf7\x3f\x54\xe8\x1b\xa7\x6f\x4e\xd1\x94\x7d\x57\xc7\x68\xc4\x9b\x9b\x73\x64\x7f\xfe\x86\x4a\xee\x4f\x7f\x0d\x7b\x8b\x0a\xa0\x94\x36\xd1\x42\xeb\x67\xa3\x38\xde\xa9\xc2\x52\xcc\xd9\x06\xc3\x13\xe1\x33\xc8\x50\xb8\x54\x16\xde\xe2\x54\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xce\xeb\x69\x8b\xbe\xf1\x77\x58\xba\xcb\x72\x1a\xf1\xe6\xb4\xba\x8e\x2b\xb9\xa7\x4e\x80\xdd\x4a\x29\x8d\x3e\x23\xd7\x1e\x64\x4f\xf1\x88\xbe\x13\x22\x75\x02\x2e\xe2\x77\x9e\xae\x6f\x01\x00\x00\xff\xff\x2f\xa1\x45\x6c\x50\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3408, mode: os.FileMode(420), modTime: time.Unix(1487144780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

