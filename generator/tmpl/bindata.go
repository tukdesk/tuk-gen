// Code generated by go-bindata.
// sources:
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcb\x4e\x33\x31\x0c\x85\xd7\xf1\x53\xf8\x9f\x55\xfb\xab\x24\x7b\xa4\xae\xd8\x53\x04\x0f\x80\x72\xf1\x84\x68\xa6\xce\x34\x17\x2a\x14\xe5\xdd\x51\x80\x0a\x89\xdd\x67\x9f\x73\x6c\xcb\xad\xa1\xa3\x39\x30\xe1\x94\x2f\xab\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x81\xa5\x2e\x77\x9e\x18\x36\x6d\x17\xed\x09\x5b\x43\xf9\xf4\xc3\xbd\x03\x84\xf3\x16\x53\xc1\x1d\x88\xc9\x87\xf2\x56\x8d\xb4\xf1\xac\x4a\x5d\x1c\xe5\x45\x19\x9d\x49\xe5\xcb\xaa\x9c\x99\x60\x0f\xf0\xae\xd3\xb0\xbe\xa2\x33\xf2\x39\x5e\x5f\xac\x66\xa6\x74\x53\xc2\x28\x1e\x22\x33\xfe\x77\x46\x0e\x00\x98\x2b\x5b\x3c\x6d\xc4\x3b\x62\x1f\x98\x0e\x98\x63\x4d\x96\x30\x97\x14\xd8\x1f\x30\x6e\x25\xa3\x94\xd2\x19\x79\xda\x4a\x88\xbc\x47\x4a\x29\x26\x6c\x20\xec\x61\x30\xde\x1f\xc7\xbe\x47\xba\xfe\x99\xf1\x1d\x96\x52\xee\x41\x84\xf9\xcb\xfa\xef\x88\x1c\xd6\x91\x15\x89\x4a\x4d\x3c\xba\x20\x3a\x80\xf8\xbd\xee\x88\x16\x6e\x32\x87\x15\x3a\xb4\x86\xc4\x6e\x3c\xe4\x33\x00\x00\xff\xff\x9b\x4d\x4c\x34\x5b\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 347, mode: os.FileMode(420), modTime: time.Unix(1485581465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xdb\x6e\xdb\x46\x13\xbe\xd7\x53\xcc\x2f\xfc\x0d\x96\x81\xb2\xf2\x45\xd1\x8b\x14\x2a\xe0\xc4\x4e\x60\xd4\x89\xe3\x28\x6d\x2f\x8c\x20\xe0\x61\xa8\xac\x45\xed\xd2\xbb\xcb\x38\x82\xc0\x77\x2f\xf6\xc0\x93\x44\xc9\x94\xd2\x16\x30\x20\x72\x67\x76\xe6\x9b\xf3\xd0\x9b\x0d\x24\x98\x32\x8e\x30\x56\x0f\xd9\x6a\x21\xc7\x50\x96\xd3\x29\x84\x85\x16\xb0\x40\x8e\x32\xd4\x98\x40\xb4\x06\x5d\x2c\x5f\x2c\x90\x8f\x36\x1b\xf8\xbf\x88\xee\xdf\x87\x2b\x84\x97\x33\xa0\xf6\xe1\x45\x59\x5a\x82\xd2\xb2\x88\x75\x45\xcb\x25\xe3\x3a\x85\xb1\xfa\x49\xcd\x6f\xaf\xdf\x19\xe1\xf5\x55\x73\x23\x0f\xe3\x65\xb8\x40\xd8\x6c\x80\x7e\xf0\xcf\x65\x39\x1a\xb1\x55\x2e\xa4\x06\x32\x02\x00\x18\x27\xa1\x0e\xa3\x50\xe1\x54\x3d\x64\xe3\x91\x3b\x5b\x30\xfd\xb5\x88\x68\x2c\x56\xd3\x85\x88\x65\x98\xea\x69\x12\xc9\xf1\x0e\x51\x17\xcb\x04\xd5\x72\x5a\xdd\x9f\x26\xd1\x00\x26\xbd\xce\x51\x8d\x47\xc1\x68\xf4\x2d\x94\x1e\xc6\x17\x50\x0f\x19\xfd\x88\xaa\xc8\xb4\x3f\x48\x22\xfa\x5a\x70\xee\xdf\xec\x25\x7a\x95\xd4\x44\x49\x2f\x58\x98\x61\xac\x1d\x66\xc6\x55\xdb\x75\x65\xe9\x5c\x02\x33\x78\xb6\xe5\xb9\xb2\xdc\x94\x46\x79\x5a\xf0\x18\xfa\xee\x90\x00\x9e\xef\xdc\x81\x8d\x55\x23\x51\x17\x92\xef\xd3\x36\x2a\x47\x23\x03\x14\x76\xaf\xbb\x37\x2f\x45\x44\xf7\x4e\x45\x23\xc0\x5c\xb5\x88\xc8\xae\xee\x00\x3e\x85\x51\x86\x24\x30\x52\x18\x5f\x74\xb1\x8c\x4d\x7c\x2d\xc3\x55\x82\x5c\xb3\x94\xa1\x84\xb2\x1c\x1f\x96\x78\xc9\x17\x8c\x1f\x14\xe9\x38\xba\x92\xf4\x57\xa6\x7a\x9c\x13\x80\x89\x14\x09\x80\x3c\xf7\x51\x9b\x00\x4a\x29\x64\xe0\xe5\xb2\x14\x18\xe7\x28\x0d\x09\xfe\x37\x03\xce\x32\x4f\xe9\x38\xd5\x73\x4c\x0c\xdd\x52\x4b\x17\xdc\xb8\x92\x68\xd2\x3e\x89\xe8\x5b\xd4\x16\x0a\xad\xac\x08\x2a\x2d\x86\x67\x9f\x7c\xce\x32\x2b\xa4\x2d\xd9\x93\xe2\x5a\xeb\xd3\xa6\xbe\x2b\x94\xf6\xe6\x56\xd6\x9e\x64\x65\x0f\x8c\x24\xa2\x46\x7a\x8f\x79\x4f\xc3\x9a\xeb\x95\xbe\xe2\x0a\xa5\xbe\xe2\x5a\x90\x58\x64\xc5\x8a\x03\xa5\xd4\x05\xd8\x82\x95\xd4\x71\x18\x5e\x8f\x4c\x19\x97\x5a\x65\x8d\x5d\x74\x7e\x7b\xdd\x86\xa5\x68\x4b\xb0\xe5\xf5\xf9\x18\xd0\xd7\x56\x8d\xf2\xea\x28\xa5\x43\xa1\xce\xd1\xd4\xee\x3e\x98\x8e\x7a\x34\xcc\x8e\x50\x03\x86\xbe\x91\x62\xd5\x85\x3c\x10\xdf\x1f\x79\x12\x6a\x24\x1e\x8f\x7b\x3b\x1a\x8f\x17\x72\x8a\xfe\x0b\xcc\xb0\xd1\xef\xde\x8e\xd6\xef\xae\x9d\xe4\x03\x17\x71\x22\xa2\x7b\x65\xa2\xb3\xd5\xad\x02\x20\x4d\xbf\xde\xad\xf5\x0c\xb9\xbd\x19\xc0\x6c\x06\x67\x7b\x2a\xb1\xa7\xc6\x7b\x8c\x72\x44\x65\x2c\xaf\x88\x5b\x99\x6e\xcf\x44\x74\x4f\xdf\x30\xcc\x12\x45\x02\x9b\x85\xe6\x56\x2a\x24\x7c\x99\xd8\x6e\xfb\x72\x06\x32\xe4\x0b\x04\x6b\x50\x03\xc8\x0a\x9e\xd9\x1f\xfa\x67\x98\x15\xa8\x0c\xf0\xea\xb1\x11\xb5\xdb\x2e\xe8\xe5\x77\x8c\x0d\x14\x62\x2e\x0f\x71\xe9\x1b\xc6\x93\x1b\x8e\xaf\xd6\x1f\x24\x5b\x85\x72\xfd\x3b\xae\xc9\x12\xd7\x6e\x3e\xd7\x47\xf4\xd3\x3a\x47\xfa\x56\x98\x1f\xe7\xe9\x2d\xdf\x6f\xb9\xfb\xa0\xdf\x3c\x5e\x4b\xf3\xea\x89\x05\x3f\xbf\xbd\xa6\x97\x0f\x64\xbc\xa5\xdb\x95\xb3\xe9\xf9\x13\x58\xe2\x3a\xb0\x51\x1a\x6a\x5b\xdb\x30\x65\x2c\x53\x70\xf7\xf9\xa0\x71\x13\x10\x32\x41\x69\xf8\x92\x88\xde\x98\xe7\x00\xc8\xdd\xe7\x7f\xd0\xe2\x63\xcc\x55\xce\xde\x09\x9c\xd9\x3f\x87\xed\x88\xc8\x92\xc7\xaf\x28\xd1\xee\x26\xaf\x0a\x96\x25\x28\x27\x10\xca\x85\x31\x8f\x71\x8d\x32\x0d\x63\xdc\xfc\x60\x44\xab\x4a\xa8\xcd\xf2\x3d\xaf\x5b\x05\xe7\x59\xe6\x92\xb7\xa7\x01\xd2\xbf\x0c\x4a\x87\xd5\xe1\xb3\x59\xee\xbc\x27\x1e\x6b\xe1\xb7\x05\xca\xf5\x47\xf1\xd8\xca\x71\xe7\x60\xdb\x7b\x9e\x75\x4d\xd8\x94\xed\x09\x6c\xaa\x0d\x15\x9d\xc7\x21\x37\x48\xa4\x78\x0c\x7e\x3d\x75\x34\x4b\x54\x43\x27\xb3\x8d\xf7\xa0\x18\x4c\x40\xa4\xa9\x42\x3d\x81\x8c\xad\x98\x86\x82\x71\xfd\xcb\xcf\xff\x42\x3a\x1e\x1b\xae\xda\x31\x3d\x71\xab\x69\x07\x02\xc8\x52\x6f\x19\xfc\xd6\x69\xbc\xed\x3e\x77\x63\x19\x88\xe3\xeb\xb4\x37\xd3\xba\xad\x3f\xf6\x5f\xbe\x36\x74\x62\xb9\x3a\x57\xab\x5e\x6b\x9c\xd6\xea\xb6\xce\x9f\x8d\x28\x83\xcf\x9c\xd1\x8b\xcb\xf9\xeb\xd6\xf9\x0e\x46\xc3\x74\x81\x2a\x26\x8e\xdd\x55\x6a\xd0\xe1\x8f\x05\xd7\x8c\x17\x58\x1f\x7a\x28\xbd\xb2\xce\x7b\x45\xd5\xa9\x66\x73\x7a\x15\x2e\xb1\x2f\xdc\x67\x4d\x75\xa8\x7a\x0d\x6d\x6a\x64\xab\x40\x58\x6a\xf6\xb8\x2b\x75\x29\xe5\x7b\xf1\x51\x3c\x2a\x82\xb2\x4e\x96\xbe\xc4\xee\x06\xe0\xd8\x32\x31\x8e\x37\xc0\xe8\x7b\xfc\xae\x49\x5b\x8f\x9f\x7b\xfd\x95\xda\xad\x56\x93\x89\xad\x6a\x55\xfb\xca\x75\x1f\x96\x2d\xef\x1b\x7f\xce\x20\xcc\x73\xe4\x09\xb1\x76\x8a\xe8\xbe\x6f\x90\x1e\x51\xdc\x6e\x97\xba\x89\xee\x4d\xf9\xd8\x0f\xa8\xf3\x38\x16\x05\xd7\x13\x48\xed\xe0\x6f\x2f\x91\xc4\xd7\xf3\xf0\x42\xfd\x66\x27\xbe\xcb\x82\xfc\xce\xc9\x69\x77\x0c\xef\x36\x9f\xe6\x56\x63\x93\xe6\x1e\x40\xe3\x27\x27\xed\xce\x9e\x7f\x06\xe7\x5f\xbb\x53\x10\x7b\xd4\x71\x45\xbe\xac\x22\xd0\xda\x0b\x7a\xa6\x99\x5f\x26\xdb\xf3\x2c\x5f\x4e\x5a\xa2\xf3\x65\x50\x0d\x30\xa7\x7f\xc8\xe8\xf2\x52\x07\x76\x4d\xef\xa5\x7e\x17\xed\x71\xbb\xdf\x07\x3d\xa4\x3d\x1b\xe1\xd9\x0f\xee\x83\xd5\xba\x4e\xe7\xa8\xdf\x85\x79\xa5\xad\x02\xe0\xcc\xdb\x49\xe7\x76\x97\xe8\x6f\xaa\xdd\x26\xd1\x2d\xfe\xad\x05\x70\x40\xfd\x9e\x1d\x18\x72\xd4\xb4\x8a\xf3\x34\xc5\x58\x63\x42\x86\x84\xce\x6d\xf7\x3d\x15\x71\x4a\xfe\x0f\xcd\x42\xff\x5d\x32\x20\x0b\x87\x9b\xd0\xb3\x38\x52\x4a\x9f\x5a\x8b\x4f\x34\xb1\x9e\xbc\x27\xd9\xd9\x6c\x89\xc3\xcd\x1b\xbc\x16\x1e\x6d\xd1\x4e\x19\x54\x5f\x8d\x07\x77\xbc\xff\x3a\x8f\x37\x1b\x40\x9e\xd8\x7f\x49\xfe\x1d\x00\x00\xff\xff\xa8\xb1\x70\xb9\x10\x15\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 5392, mode: os.FileMode(420), modTime: time.Unix(1485605389, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6b\xeb\x36\x14\x7f\xd7\xa7\x38\x98\xbb\x62\x97\x44\x79\xbf\x90\x87\x31\xb6\xcb\x18\x8c\xd1\x96\x3d\xac\x94\x21\xdb\xc7\xa9\x16\x5b\xca\x64\x39\x21\x18\x7d\xf7\x21\x4b\x8e\x9d\xf8\x4f\x9a\x30\xca\x7d\xaa\x2a\x4b\xe7\xf7\x47\x3f\x1d\xa5\xae\x21\xc5\x8c\x0b\x84\xa0\xd4\xaa\x4a\x74\x00\xc6\xac\x56\xc0\x2a\x2d\x61\x83\x02\x15\xd3\x98\x42\x7c\x04\x5d\x6d\x97\x1b\x14\x64\xc7\x92\x2d\xdb\x20\xd4\x35\xd0\x3f\xfc\xd8\x18\x42\x78\xb1\x93\x4a\x43\x48\x00\x00\x82\xac\xd0\x81\x1b\x69\x5e\x60\x40\xdc\x78\xc3\xf5\x7b\x15\xd3\x44\x16\x2b\x5d\x6d\x53\x2c\xb7\xab\x98\x95\xb8\x2a\xff\xcd\x57\x69\x1c\x5c\x5f\xa4\x8f\x3b\x2c\x03\x12\x11\xb2\x67\xca\x63\xfd\x0d\x59\xa1\xe9\xb3\x56\x5c\x6c\x50\xf9\x29\x8b\x4a\x5f\x78\x81\xfe\xff\x34\xa6\x4f\xf2\xf0\x9c\x30\x21\xba\x35\xb6\x18\xfd\x35\xb5\xe5\xea\x1a\xbe\xc8\xf8\x9f\xdf\x59\x81\xf0\x75\x0d\xb4\x19\x18\x43\xec\x1a\xe8\x7f\x34\x06\x9c\x51\x50\x37\x65\x1a\x1b\x14\x2f\x98\x3a\xfe\x86\xc7\x76\xdf\xe5\xf4\xcb\x71\x87\xf4\x9b\xb4\x7f\x6c\x55\xb7\x71\x09\x8a\x89\x0d\xc2\x97\x8c\x63\x9e\x36\xb0\xbf\xd8\x51\xd9\x2d\xf1\xdf\xfa\x65\x79\x76\x9a\xac\xf2\x9c\xc5\xb9\xfd\xf0\x58\xd7\x80\x22\x05\x63\xba\x3d\x13\x98\x28\x52\x63\x88\x21\x24\xab\x44\x02\xe1\xe3\xb9\xb8\x08\x1c\x85\x30\x82\xd7\xb7\xb2\xf1\xd4\x0b\x55\xa8\x2b\x25\x4e\xb3\x6e\xd2\xb3\x9c\xd2\xb1\xf4\xb8\xcd\xb9\x76\xcc\x7e\x92\x79\x55\x08\x30\x26\x58\xf4\xab\x38\x01\xcd\xcc\x55\x82\x3f\xe6\xf9\x0d\x14\x83\x8b\xe3\x98\x20\xf0\xa9\x32\x3a\x3a\x61\x04\x63\x32\xa6\x49\x5f\x33\x67\x3c\x93\x77\xc1\xcc\xb8\x62\xcc\x35\x12\xe7\xe1\x9d\xc1\x1f\x18\xea\xa1\x47\xb2\xbe\x3c\xc1\xea\x77\x5e\xc2\x00\xfb\x1b\xea\x31\xe4\x70\xea\x5e\x2c\x20\x96\x32\x8f\x3c\x27\x9e\x81\x2d\x4b\x87\x37\x6f\xbd\x06\xc1\x73\xe8\x32\xe5\xe9\x0f\xea\xfe\x85\x4a\x36\x75\x33\x96\x97\xe8\x63\xd0\xdb\xf0\x38\x0e\xb0\x00\xad\x2a\xec\x4e\x76\x5c\xdd\xf3\x88\xba\x17\x69\xcd\x09\x5b\x09\x53\xfc\x2d\xfd\x7b\xca\x87\xfb\xa1\x46\xef\xdd\x55\xc8\xa9\x76\xf5\x70\xba\x26\x7b\x62\x88\xef\x4a\x36\x50\xdd\xf5\x99\xa3\xf9\x27\xcb\x2b\x0c\x5d\x20\x5d\xa4\x22\xe0\x42\xa3\xca\x58\x82\xb5\xf1\xac\xca\x03\xd7\xc9\x3b\xb8\x65\x6e\x2a\x61\x25\xce\x04\xfe\xeb\xe5\xe1\xb6\xc2\x46\x6e\x13\x21\x1f\x6c\x1a\x27\xcc\x41\xc8\x27\xe1\xce\x7d\x3c\x21\xf5\x1a\x4b\x8a\x19\xab\x72\xdd\x55\xd8\x31\xc1\x93\xd0\x3e\x84\x3f\x2b\x25\x55\x16\x06\x95\xd8\x0a\x79\x10\x5e\xff\x0f\x65\xb0\x70\xc3\x28\xba\x6c\x4d\x33\x26\xbb\x77\x60\xe8\xed\xa9\xd3\x0e\x3f\xdd\xd0\x4b\x27\x6e\xc2\xf5\x66\x3a\xc3\xb8\x7d\x18\x6e\xe6\x3c\x73\xd6\x37\x3f\x12\xff\xb3\xb0\x27\x4c\x90\xef\x51\x7d\x46\xe4\x1f\x3e\x39\xf3\x0f\xdf\x55\xe8\x5b\xa7\xef\x4e\xd1\x9c\x7d\x37\xc7\x68\xc2\x9b\xbb\x73\x64\x7f\xfe\x86\x4a\x1e\xce\x7f\x0d\x7b\x8b\x4a\xa0\x94\xb6\xd1\x42\xeb\x67\xab\x38\xd9\xab\xd2\x52\x2c\xd8\x16\xc3\x33\xe1\x0b\xc8\x51\xb8\x54\x96\xde\xe2\x4c\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xde\xeb\x69\x8b\xbe\xf2\x37\x58\xbb\xcb\x72\x1e\xf1\xf6\xb4\xfa\x8e\x2b\x79\xa0\x4e\x80\xdd\x4a\x29\x8d\x3e\x22\xd7\x1e\xe4\x40\xf1\x84\xbe\x33\x22\x4d\x02\xae\xe2\xf7\x9e\xae\xff\x02\x00\x00\xff\xff\x68\xf2\x51\x67\x4a\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1485582894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

