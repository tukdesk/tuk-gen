// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x4d\x4e\x03\x31\x0c\x85\xd7\xf1\x29\xcc\xac\x5a\x54\x92\x3d\x52\x57\xec\x29\x82\x03\xa0\xfc\xb8\x21\x9a\xa9\x33\xcd\x0f\x15\x8a\x72\x77\x14\x68\x85\xc4\xee\xd9\xef\x7d\xb6\xe5\xd6\xd0\xd1\x31\x30\xe1\x94\xcf\x8b\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x85\xa5\xce\x0f\x9e\x18\x56\x6d\x67\xed\x09\x5b\x43\xf9\x72\xd5\xbd\x03\x84\xd3\x1a\x53\xc1\x0d\x88\xc9\x87\xf2\x51\x8d\xb4\xf1\xa4\x4a\x9d\x1d\xe5\x59\x5d\x69\x95\xcf\x8b\x72\x66\x82\x2d\xc0\xa7\x4e\x23\xfd\x8e\xce\xc8\xd7\x78\x79\xb3\x9a\x99\xd2\xcd\x09\xa3\x78\x8a\xcc\x78\xef\x8c\x1c\x02\xe0\x58\xd9\xe2\x61\x25\xde\x10\xfb\xc0\xb4\xc3\x1c\x6b\xb2\x84\xb9\xa4\xc0\x7e\x87\x71\x2d\x19\xa5\x94\xce\xc8\xc3\x5a\x42\xe4\x2d\x52\x4a\x31\x61\x03\x61\x77\x43\xe3\xe3\x7e\xec\x7b\xa6\xcb\xbf\x19\xbf\xb0\x94\x72\x0b\x22\x1c\x7f\xa2\x77\x7b\xe4\xb0\x0c\x56\x24\x2a\x35\xf1\xe8\x82\xe8\x00\xe2\xef\xba\x3d\x5a\xb8\xd9\x1c\x16\xe8\x00\xad\x21\xb1\x1b\x4f\xf9\x0e\x00\x00\xff\xff\xc0\xba\x5f\x28\x5f\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 351, mode: os.FileMode(420), modTime: time.Unix(1487144781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x6d\x6f\xdb\xb6\x13\x7f\xef\x4f\x71\x7f\xe3\xbf\x42\x2a\x5c\x26\x03\x86\xbd\xe8\x90\x01\x6d\x1e\x8a\x60\x6d\xd2\x36\xdd\xf6\x22\x08\x0a\x3d\x9c\x5c\xc6\x32\xe5\x90\x54\x53\xc3\xd0\x77\x1f\x8e\xa4\x64\x4a\x96\x6c\x27\x6b\x81\xae\x45\x11\x4b\xbc\xe3\xdd\xef\x7e\xbc\x3b\x92\x5a\xad\x20\xc5\x8c\x0b\x84\xb1\xba\xcb\xe7\x53\x39\x86\xaa\x3a\x38\x80\xa8\xd4\x05\x4c\x51\xa0\x8c\x34\xa6\x10\x2f\x41\x97\xb3\x67\x53\x14\xa3\xd5\x0a\xfe\x5f\xc4\xb7\x17\xd1\x1c\xe1\xf9\x11\x30\xf3\xf0\xac\xaa\x8c\x40\x69\x59\x26\xba\x96\x2d\x24\x17\x3a\x83\xb1\xfa\x49\x5d\xbd\x7b\xfd\x86\x8c\x37\x53\x69\xc6\x22\x4a\x66\xd1\x14\x61\xb5\x02\xf6\xd6\x3d\x57\xd5\x68\xc4\xe7\x8b\x42\x6a\x08\x46\x00\x00\xe3\x34\xd2\x51\x1c\x29\x3c\x50\x77\xf9\x78\x64\xc7\xa6\x5c\x7f\x2a\x63\x96\x14\xf3\x83\x69\x91\xc8\x28\xd3\x07\x69\x2c\xc7\x1b\x42\x5d\xce\x52\x54\xb3\x03\x07\x9e\x4c\x1c\xa4\xf1\x7e\x7a\x7a\xb9\x40\x35\x1e\x85\xa3\xd1\xe7\x48\x3a\x30\x1f\x41\xdd\xe5\xec\x3d\xaa\x32\xd7\x6e\x20\x8d\xd9\x71\x21\x84\x7b\x33\x93\xd8\x79\xda\x08\x25\x3b\xe1\x51\x8e\x89\xb6\xc8\xb9\x50\x3e\x81\x55\x65\x89\x81\x23\xb8\xc0\xfb\x3e\x49\x20\x78\x1e\x12\x88\xac\x14\xc9\xa0\x12\x7e\xc1\xa4\xd4\x85\x24\x34\xa7\xee\x39\x84\xa7\x9d\x25\xa9\x2a\x58\x19\x14\x12\x75\x29\x05\x3c\xd9\x90\x5b\x31\xfd\xab\x2d\x3e\x6f\x9e\x26\x46\x56\x8d\x2a\x87\xa5\x17\xc8\x6e\xa7\x03\x0c\x90\x59\x22\x0f\x36\xa7\xdb\x37\x67\xe5\x32\xbe\xc5\x44\x5b\x2f\x6b\x1b\x23\x1f\xb2\x4f\x42\x83\x36\xd8\xc4\x15\xc2\x87\x28\xce\x31\x08\xc9\x03\x17\xd3\x36\xce\x31\x65\xa5\x51\x38\x4f\x51\x68\x9e\x71\x94\x50\x55\xe3\xed\x16\x4f\xc5\x94\x8b\x0d\x93\xab\x15\xf0\x0c\x04\x02\xb3\x72\x18\x8f\x4d\x01\x74\xdd\x39\x29\x79\x71\xd3\x30\x57\xd8\x55\x4d\x63\x76\x82\x59\x54\xe6\xba\xf6\xd6\x68\x8b\xd4\x28\x37\x10\xf5\x27\xae\x7a\x56\x24\x04\x4a\xd9\x20\x84\xe0\xa9\x4b\xdf\x09\xa0\x94\x94\x33\x16\x30\xcf\x80\x0b\x81\x92\x44\xf0\xbf\x23\x10\x3c\x87\x75\x6e\x34\x2b\xe9\x34\x26\x24\x77\xd9\x61\x7e\x92\xda\x22\x75\x81\x34\x66\xaf\x50\x1b\x28\xac\x06\x1c\xd6\x5e\x48\x67\xc8\xbe\xe0\xb9\x31\xe2\x5b\x76\xa2\xa4\xf1\xba\x3b\xd4\x37\xa5\xd2\x2e\xdc\x3a\xda\x47\x45\xd9\x03\x23\x8d\x19\x59\xef\x09\x6f\x37\xac\x3a\x43\x83\xd0\xcf\xd7\x35\x32\x63\xb0\x49\xe9\x21\x74\x2d\xad\x1e\x84\x46\xbe\x66\x60\x0f\x5c\x57\xef\x5e\x3b\xa6\x5e\x96\x3c\x4f\x51\xb6\xcb\xc2\xc6\xd9\x60\x67\x46\x7d\x1f\xb3\x7a\xae\xcf\x85\x42\xa9\xcf\x85\x2e\x82\xa4\xc8\xcb\xb9\x00\xc6\x98\x2d\x14\xe3\x51\x32\xab\x41\xba\x3d\x5e\x8d\x2b\xe6\x19\x31\xa3\xae\x86\x43\x76\x6c\x4c\x2a\x67\x9a\x31\xb6\x2f\xac\x2b\xa4\xfe\x3c\x04\xc9\x4a\xb7\x42\x6a\x19\x20\xc7\xec\x4c\x16\xf3\x36\xbc\x3d\xb1\xfc\xb9\x48\x23\x8d\x81\xf3\x6d\xdf\xb6\xfa\x76\x13\x1e\xe3\xeb\x04\x73\x5c\xfb\xb2\x6f\x5b\x7d\x59\x95\x47\xc5\xf6\xf7\x27\x94\x18\xdc\xd3\x5f\xe0\x42\xa3\xcc\xa2\x04\x57\xd5\x84\x2a\x39\x55\x44\xba\x37\x6a\x2a\xc2\xcc\x18\x84\xe2\xd9\x73\x36\xf6\x5c\x70\x9b\x3e\x41\x11\xdf\x1a\xaf\x9d\x7d\x24\x84\x60\xbd\xc1\x6f\xf6\xc4\x1c\x85\x99\x19\xc2\xd1\x11\x1c\x0e\x74\xac\x4e\x2f\xa4\xe2\xa4\x36\xd8\x29\x1c\x2b\x54\x44\x77\x2d\xec\x94\x88\x19\xb3\xdb\x1d\x3b\xe3\x98\xa7\x2a\x08\x4d\x90\x34\x31\x2b\x24\x7c\x9c\x40\x11\xdf\xd2\x74\x19\x89\x29\x82\x89\x69\x8d\xc9\xd8\x3e\x32\x3f\xec\xaf\x28\x2f\x51\x11\xf6\xfa\x71\x6d\xaa\xdd\x30\x08\xae\x81\x49\x68\x02\x9a\xbc\x0f\xab\x67\x5c\xa4\x97\x02\x5f\x2e\xdf\x4a\x3e\x8f\xe4\xf2\x0f\x5c\x06\x99\xc1\x0c\xd7\x37\xb6\x9c\x26\x30\xc3\xa5\x3d\xea\x35\x3a\xec\xc3\x72\x81\xec\x55\x41\x3f\x96\xfd\xce\x7a\x74\x96\xc0\xe6\x4f\xcd\x97\xcd\x01\x2f\x29\x4e\xef\x82\x71\xc7\x81\x6d\x0a\xb4\xa3\x1a\xff\x61\xb8\xd9\x1d\x1d\x76\x87\x77\x02\x2e\xa9\x0e\xf7\x8d\xfb\xac\xcc\xf3\x6e\xec\xdf\x79\xa8\x26\x4f\x1f\x1a\xa7\x1f\xa0\xea\x5d\x5d\x7a\xdd\x1a\xf5\x04\x0a\x99\xa2\x34\x95\x97\xc6\xec\x92\x5e\x42\x08\xae\x6f\xbe\x31\x17\x6a\x88\x8c\x8d\x45\x37\xff\x2d\xc8\x3d\x1b\x4a\x9d\x02\x6d\x7a\xfe\x9b\x6c\xb4\xf2\xe2\x71\x54\xac\x2b\xc9\xcb\x0d\x0b\xb9\x6e\xea\x13\x28\xb2\x4c\xa1\x86\x92\x0b\xfd\xeb\x2f\x03\x34\x6c\x27\x61\x6b\x57\x75\x9d\xda\xc2\xd8\xe8\xd5\x0e\x9d\x9b\xeb\x37\xd8\x17\x79\x1e\xb4\x7a\xe2\x46\x7b\x76\x3b\xbd\x35\x31\xb0\xd3\xb3\xd7\x7c\xce\x75\xf0\x73\x73\xc6\x35\xd1\xbb\xfd\x6c\xe3\x1c\xe7\x77\x69\x6f\x53\xab\x99\xb2\x2f\xc7\xcd\x06\xe7\x81\xe3\x59\xcd\xe3\xef\xad\xf8\x7c\x8b\x97\x46\x21\xb0\x7a\xad\xd9\xf5\x06\x42\x6c\x7b\x5b\x88\x5d\x89\xb5\x31\x72\x42\x63\xec\xe4\xf4\xea\xd8\x1b\xdf\x70\x44\x4a\x27\xa8\x92\xc0\xaa\xdb\x94\x0b\x5b\xfa\x49\x21\x34\x17\x25\x36\x83\x0e\x4a\xaf\xad\x17\xbd\xa6\xea\xbd\xaa\xb8\x27\xcc\x66\xaf\x7a\x57\xa2\x5c\xbe\x2f\xee\xbd\xfd\xca\xe6\xb6\x22\x95\x27\xed\x2c\x5a\x55\xfe\xc5\x83\xc2\x46\xc5\xae\x92\x48\xd0\xd2\xcb\xe2\x3e\xfc\xed\xb1\x37\x12\x89\x6a\xdf\x0b\x89\xd7\x78\x76\xd6\xc8\x04\x72\xca\xa6\xed\xa5\xb2\xab\x63\x7c\xc7\xc5\xf2\x5d\xd7\x08\x51\x63\xd8\x1f\x9e\x6c\x6b\xdd\x68\xfd\x40\xe5\x65\x6b\x67\x1e\xcd\xb0\x2f\xb7\x0e\xc3\xa6\x0a\x55\x73\xcb\x5f\xd7\x62\xa7\x10\x79\x46\x49\x7d\xae\x4e\xa5\xbc\x28\xde\x17\xf7\x2a\x40\xd9\x64\x66\x5f\x01\xb5\x17\xe0\xa1\xe5\x48\xc4\x13\x30\x76\x81\x5f\x74\xe0\xfb\x71\x67\xe5\xfe\x8e\xd0\xee\x0a\x74\x4e\xf6\xba\x82\x1a\x6a\x0b\x43\x58\x3a\xec\x13\x9f\x47\x10\x2d\x16\x28\xd2\xc0\xc4\x59\xc4\xb7\x7d\x87\xef\x07\x34\x11\x7b\xef\xb3\x05\x49\xe7\xfa\xee\x17\xb1\x49\x5d\xba\xde\x7d\x36\x70\x4d\xa4\xd5\x1c\x3e\x9b\xfb\x80\x5d\xef\xc5\xb5\x55\xbd\xf1\x2e\x63\x8e\x20\x97\xd0\xc6\xe8\x3a\xa1\x9d\x8f\x35\x23\xd6\xda\xb5\x19\xbf\x01\xcb\xa4\xb9\x71\xd8\x36\xd0\x0a\x7a\x31\xab\xb9\xf6\x4e\xce\x2e\xb7\x76\x1f\x72\x16\xb3\x89\x67\x7d\x31\x0b\xfb\x4e\x35\xee\x76\xec\x8e\x34\x16\xdc\x3e\x27\x19\x7f\x9e\xd7\x93\x1d\x57\xfd\x44\x0d\xf0\xeb\xfa\xab\xf3\x3d\x70\x71\x3c\xfc\x97\xd7\xc6\xfa\xb3\x01\xbb\x42\xfd\x26\x5a\xd4\xde\xbe\x71\x77\x35\xe9\xea\xd7\x7f\xe7\xde\xb8\x47\x09\x1f\x6e\xd9\x4f\x19\x75\x8b\x17\x59\x86\x89\xc6\x74\xaf\x8f\x4c\xf6\x03\xc5\x70\x51\x0c\x2c\xd1\xd7\x4f\xc4\x6e\x1e\xba\x4f\x2d\xc6\xd8\xfe\x81\xf4\x5c\x29\x18\x63\xbb\xee\x95\xc3\x11\xfa\x7b\xf8\x63\x23\x75\xf7\x87\xaf\x13\x60\xa7\xc0\x06\xc0\x3f\xac\x14\xea\xaf\x5a\x3f\x5a\xee\x7b\x9f\xf7\xff\x09\x00\x00\xff\xff\x39\x9d\xdb\x1e\xb5\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7093, mode: os.FileMode(420), modTime: time.Unix(1487150003, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5d\x6b\xf3\x36\x14\xbe\xd7\xaf\x38\x98\xae\xd8\x25\x51\xee\x0b\xb9\x18\x63\x2b\x63\x30\x46\x5b\x76\xb1\x52\x86\x62\x1f\xa7\x5a\x6c\x29\x93\xe5\x84\x60\xf4\xdf\x5f\x64\xc9\xb1\x13\x7f\xa4\x09\x2f\xe5\xbd\xaa\x2a\x4b\xe7\xf9\xd0\xa3\xa3\x54\x15\x24\x98\x72\x81\x10\x14\x5a\x95\xb1\x0e\xc0\x98\xc5\x02\x58\xa9\x25\xac\x51\xa0\x62\x1a\x13\x58\x1d\x40\x97\x9b\xf9\x1a\x05\xd9\xb2\x78\xc3\xd6\x08\x55\x05\xf4\x2f\x3f\x36\x86\x10\x9e\x6f\xa5\xd2\x10\x12\x00\x80\x20\xcd\x75\xe0\x46\x9a\xe7\x18\x10\x37\x5e\x73\xfd\x51\xae\x68\x2c\xf3\x85\x2e\x37\x09\x16\x9b\x85\x2f\xbb\x28\xfe\xcf\x16\xc9\x2a\xf8\xd4\x3a\x7d\xd8\x62\x11\x90\x88\x90\x1d\x53\x1e\xf1\x5f\x48\x73\x4d\x5f\xb4\xe2\x62\x8d\xca\x4f\x59\x6c\xfa\xca\x73\xf4\xff\x27\x2b\xfa\x2c\xf7\x2f\x31\x13\xa2\x5d\x63\x8b\xd1\xdf\x13\x5b\xae\xaa\xe0\x4e\xae\xfe\xfb\x93\xe5\x08\x8f\x4b\xa0\xf5\xc0\x18\x62\xd7\x40\xf7\xa3\x31\xe0\xec\x82\xaa\x2e\x53\x9b\xa1\x78\xce\xd4\xe1\x0f\x3c\x34\xfb\xce\xa7\x5f\x0f\x5b\xa4\x4f\xd2\xfe\xb1\x55\xdd\xc6\x39\x28\x26\xd6\x08\x77\x29\xc7\x2c\xa9\x61\x7f\xb3\xa3\xa2\x5d\xe2\xbf\x75\xcb\xf2\xf4\x38\x59\x66\x19\x5b\x65\xf6\xc3\x43\x55\x01\x8a\x04\x8c\x69\xf7\x8c\x60\xa2\x48\x8c\x21\x86\x90\xb4\x14\x31\x84\x0f\xa7\xe2\x22\x70\x14\xc2\x08\xde\xde\x8b\xda\x53\x2f\x54\xa1\x2e\x95\x38\xce\xba\x49\xcf\x72\x4c\xc7\xdc\xe3\xd6\x47\xdb\x32\xfb\x45\x66\x65\x2e\xc0\x98\x60\xd6\xad\xe2\x04\xd4\x33\x17\x09\xfe\x9c\x65\x57\x50\x0c\xce\x8e\x63\x84\xc0\x97\xca\x68\xe9\x84\x11\x0c\xc9\x18\x27\x7d\xc9\x9c\xe1\x4c\xde\x04\x33\xe1\x8a\x31\x97\x48\x9c\x86\x77\x02\xbf\x67\xa8\x87\x1e\xc8\xfa\xfc\x08\xab\x3f\x78\x01\x3d\xec\x27\xd4\x43\xc8\xe1\xd8\xbd\x98\xc1\x4a\xca\x2c\xf2\x9c\x78\x0a\xb6\x2c\xed\xdf\xbc\xe5\x12\x04\xcf\xa0\xcd\x94\xa7\xdf\xab\xfb\x0f\x2a\x59\xd7\x4d\x59\x56\xa0\x8f\x41\x67\xc3\xc3\x30\xc0\x0c\xb4\x2a\xb1\x3d\xd9\x61\x75\x2f\x03\xea\x5e\xa5\x35\x27\x6c\x24\x8c\xf1\xb7\xf4\x6f\x29\x1f\xee\xfa\x1a\xbd\x77\x17\x21\xc7\xda\xd5\xfd\xf1\x9a\xec\x88\x21\xbe\x2b\xd9\x40\xb5\xd7\x67\x8a\xe6\xdf\x2c\x2b\x31\x74\x81\x74\x91\x8a\x80\x0b\x8d\x2a\x65\x31\x56\xc6\xb3\x2a\xf6\x5c\xc7\x1f\xe0\x96\xb9\xa9\x98\x15\x38\x11\xf8\xc7\xf3\xc3\x6d\x84\x0d\xdc\x26\x42\x3e\xd9\x34\x8e\x98\xbd\x90\x8f\xc2\x9d\xfa\x78\x44\xea\x34\x96\x04\x53\x56\x66\xba\xad\xb0\x65\x82\xc7\xa1\x7d\x08\x7f\x55\x4a\xaa\x34\x0c\x4a\xb1\x11\x72\x2f\xbc\xfe\x9f\x8a\x60\xe6\x86\x51\x74\xde\x9a\x26\x4c\x76\xef\x40\xdf\xdb\x63\xa7\xed\x7f\xba\xa2\x97\x8e\xdc\x84\xcb\xcd\x74\x82\x71\xf3\x30\x5c\xcd\x79\xe2\xac\xaf\x7e\x24\xbe\xb3\xb0\x67\x8c\x91\xef\x50\x7d\x45\xe4\xef\xbf\x38\xf3\xf7\x3f\x54\xe8\x1b\xa7\x6f\x4e\xd1\x94\x7d\x57\xc7\x68\xc4\x9b\x9b\x73\x64\x7f\xfe\x86\x4a\xee\x4f\x7f\x0d\x7b\x8b\x0a\xa0\x94\x36\xd1\x42\xeb\x67\xa3\x38\xde\xa9\xc2\x52\xcc\xd9\x06\xc3\x13\xe1\x33\xc8\x50\xb8\x54\x16\xde\xe2\x54\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xce\xeb\x69\x8b\xbe\xf1\x77\x58\xba\xcb\x72\x1a\xf1\xe6\xb4\xba\x8e\x2b\xb9\xa7\x4e\x80\xdd\x4a\x29\x8d\x3e\x23\xd7\x1e\x64\x4f\xf1\x88\xbe\x13\x22\x75\x02\x2e\xe2\x77\x9e\xae\x6f\x01\x00\x00\xff\xff\x2f\xa1\x45\x6c\x50\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3408, mode: os.FileMode(420), modTime: time.Unix(1487144780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

