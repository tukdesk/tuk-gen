// Code generated by go-bindata.
// sources:
// generator/tmpl/sql_script_table.tmpl
// generator/tmpl/sqlconn.tmpl
// generator/tmpl/sqlmgr.tmpl
// generator/tmpl/struct.tmpl
// DO NOT EDIT!

package tmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _generatorTmplSql_script_tableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xc4\x30\x10\x85\xcf\xe6\x57\x3c\xd6\x1e\x14\xb6\xfd\x01\x8a\x87\x55\x2b\x14\xaa\x82\xdb\x83\xb7\x25\x6b\xa6\x25\x58\xa3\xa6\x59\xa8\x84\xf9\xef\x92\x64\x6d\x44\x6f\x93\xc7\xf7\xde\xbc\x8c\xf7\x50\xd4\x6b\x43\x58\x4d\x9f\xe3\x6e\x7a\xb1\xfa\xc3\xed\x9c\xdc\x8f\xb4\x02\xf3\x29\xe4\xc1\xbd\x63\x20\x43\x56\x3a\x52\xd8\x7f\xc1\x1d\x5e\xcb\x81\x8c\xb8\x14\xc2\x7b\x58\x69\x06\x42\x11\x1d\xb8\xb8\x42\x85\x92\x59\xdc\x3c\xd5\x9b\xae\x46\xb7\xb9\x6e\x6b\x34\x77\x78\x78\xec\x50\x3f\x37\xdb\x6e\x0b\xef\x51\x75\x81\x6e\x14\x19\xa7\x7b\x4d\x16\xcc\x38\x13\x27\xde\xa3\x18\xb5\xa1\x29\xe4\xa4\xc4\xea\x96\xfa\x36\x4a\x21\x35\x12\x6f\x72\x6e\xd4\x1c\x91\x08\x57\xf7\x49\xf8\x01\x8e\x85\xb4\x9a\xd7\x89\xc8\x68\x0e\x89\x7a\x7a\x94\xd0\x3d\x4c\x72\x2c\xe9\xcc\x6b\x44\x92\x8c\x5a\x5c\x61\x66\x16\xe7\xe1\xdb\x05\xcd\xce\xca\xf6\x4f\xdb\x3a\x8b\xc1\x94\xdb\x2c\x3d\xe8\x1f\xb1\x74\xf9\xb5\x2d\x9d\xf6\xb8\x2f\x4f\xdf\x01\x00\x00\xff\xff\x1b\xf0\xb5\x96\xad\x01\x00\x00")

func generatorTmplSql_script_tableTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSql_script_tableTmpl,
		"generator/tmpl/sql_script_table.tmpl",
	)
}

func generatorTmplSql_script_tableTmpl() (*asset, error) {
	bytes, err := generatorTmplSql_script_tableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sql_script_table.tmpl", size: 429, mode: os.FileMode(420), modTime: time.Unix(1486109836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlconnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\xcb\x4e\x33\x31\x0c\x85\xd7\xf1\x53\xf8\x9f\x55\xfb\xab\x24\x7b\xa4\xae\xd8\x53\x04\x0f\x80\x72\xf1\x84\x68\xa6\xce\x34\x17\x2a\x14\xe5\xdd\x51\x80\x0a\x89\xdd\x67\x9f\x73\x6c\xcb\xad\xa1\xa3\x39\x30\xe1\x94\x2f\xab\x8d\xcc\x13\xf6\xae\x14\xea\x5a\x22\x7a\x62\x4a\xba\x90\x43\xf3\x81\xa5\x2e\x77\x9e\x18\x36\x6d\x17\xed\x09\x5b\x43\xf9\xf4\xc3\xbd\x03\x84\xf3\x16\x53\xc1\x1d\x88\xc9\x87\xf2\x56\x8d\xb4\xf1\xac\x4a\x5d\x1c\xe5\x45\x19\x9d\x49\xe5\xcb\xaa\x9c\x99\x60\x0f\xf0\xae\xd3\xb0\xbe\xa2\x33\xf2\x39\x5e\x5f\xac\x66\xa6\x74\x53\xc2\x28\x1e\x22\x33\xfe\x77\x46\x0e\x00\x98\x2b\x5b\x3c\x6d\xc4\x3b\x62\x1f\x98\x0e\x98\x63\x4d\x96\x30\x97\x14\xd8\x1f\x30\x6e\x25\xa3\x94\xd2\x19\x79\xda\x4a\x88\xbc\x47\x4a\x29\x26\x6c\x20\xec\x61\x30\xde\x1f\xc7\xbe\x47\xba\xfe\x99\xf1\x1d\x96\x52\xee\x41\x84\xf9\xcb\xfa\xef\x88\x1c\xd6\x91\x15\x89\x4a\x4d\x3c\xba\x20\x3a\x80\xf8\xbd\xee\x88\x16\x6e\x32\x87\x15\x3a\x40\x6b\x48\xec\xc6\x47\x3e\x03\x00\x00\xff\xff\x58\x2f\x1e\xac\x5c\x01\x00\x00")

func generatorTmplSqlconnTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlconnTmpl,
		"generator/tmpl/sqlconn.tmpl",
	)
}

func generatorTmplSqlconnTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlconnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlconn.tmpl", size: 348, mode: os.FileMode(420), modTime: time.Unix(1485606521, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplSqlmgrTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x6d\x6f\xdb\x38\x12\xfe\xee\x5f\x31\x67\xdc\x15\x52\xe1\xd2\x39\xe0\x70\x1f\xba\xf0\x02\x69\x5e\x8a\x60\xdb\xa4\x6d\xba\xbb\x1f\x82\xa0\xd0\xcb\xc8\x65\x2c\x53\x0a\x49\x35\x35\x0c\xfd\xf7\x05\x5f\x24\x51\xb2\x64\x2b\xd9\x16\xe8\xb6\x28\x62\x89\x33\x9c\x79\xe6\xe1\xcc\x90\xd4\x76\x0b\x31\x26\x94\x21\x4c\xc5\x7d\xba\x5e\xf2\x29\x94\xe5\x7c\x0e\x41\x21\x33\x58\x22\x43\x1e\x48\x8c\x21\xdc\x80\x2c\x56\x2f\x96\xc8\x26\xdb\x2d\xfc\x3b\x0b\xef\x2e\x83\x35\xc2\xcb\x05\x10\xfd\xf0\xa2\x2c\xb5\x40\x48\x5e\x44\xb2\x92\xe5\x9c\x32\x99\xc0\x54\xfc\x47\x5c\xbf\x7f\xf3\x56\x19\xaf\xa7\xaa\x19\x79\x10\xad\x82\x25\xc2\x76\x0b\xe4\x9d\x7d\x2e\xcb\xc9\x84\xae\xf3\x8c\x4b\xf0\x26\x00\x00\xd3\x38\x90\x41\x18\x08\x9c\x8b\xfb\x74\x3a\x31\x63\x4b\x2a\x3f\x17\x21\x89\xb2\xf5\x7c\x99\x45\x3c\x48\xe4\x3c\x0e\xf9\x74\x47\x28\x8b\x55\x8c\x62\x35\xaf\xe6\xcf\xe3\x70\x84\x92\xdc\xe4\x28\xa6\x13\x7f\x32\xf9\x12\x70\x0b\xe3\x13\x88\xfb\x94\x7c\x40\x51\xa4\xd2\x0e\xc4\x21\x39\xc9\x18\xb3\x6f\x7a\x12\xb9\x88\x6b\x21\x27\xa7\x34\x48\x31\x92\x06\x33\x65\xc2\xa5\xae\x2c\x0d\x25\xb0\x80\x4b\x7c\xe8\x93\x78\x8c\xa6\xbe\x02\x91\x14\x2c\x1a\x54\xc2\xaf\x18\x15\x32\xe3\x0a\xcd\x99\x7d\xf6\xe1\x79\x67\x31\xca\x12\xb6\x1a\x05\x47\x59\x70\x06\xcf\x76\xe4\x46\xac\xfe\x55\x16\x5f\xd6\x4f\x33\x2d\x2b\x27\xa5\xc5\xd2\x0b\xe4\xb0\xd3\x01\x06\x94\x59\x45\x1e\xec\x4e\x37\x6f\xd6\xca\x55\x78\x87\x91\x34\x5e\x1a\x1b\x13\x17\xb2\x4b\x42\x8d\xd6\xdb\xc5\xe5\xc3\xc7\x20\x4c\xd1\xf3\x95\x07\xca\x96\x6d\x9c\x53\x95\x8f\x5a\xe1\x22\x46\x26\x69\x42\x91\x43\x59\x4e\xf7\x5b\x3c\x63\x4b\xca\x76\x4c\x6e\xb7\x40\x13\x60\x08\xc4\xc8\x61\x3a\xd5\xa9\xdf\x75\x67\xa5\xca\x8b\x9d\x86\xa9\xc0\xae\x6a\x1c\x92\x53\x4c\x82\x22\x95\x95\xb7\x5a\x9b\xc5\x5a\xb9\x86\x28\x3f\x53\xd1\xb3\x22\x3e\xa8\x94\xf5\x7c\xf0\x9e\xdb\xf4\x9d\x01\x72\xae\x72\xc6\x00\xa6\x09\x50\xc6\x90\x2b\x11\xfc\x6b\x01\x8c\xa6\xd0\xe4\x46\xbd\x92\x56\x63\xa6\xe4\x36\x3b\xf4\x4f\x54\x59\x54\xf5\x1f\x87\xe4\x35\x4a\x0d\x85\x54\x80\xfd\xca\x8b\xd2\x19\xb2\xcf\x68\xaa\x8d\xb8\x96\xad\x28\xaa\xbd\x1e\x0e\xf5\x6d\x21\xa4\x0d\xb7\x8a\xf6\x49\x51\xf6\xc0\x88\x43\xa2\xac\xf7\x84\x77\x18\x56\x95\xa1\x9e\xef\xe6\x6b\x83\x4c\x1b\xac\x53\x7a\x08\x5d\x4b\xab\x07\xa1\x96\x37\x0c\x8c\xc0\x75\xfd\xfe\x8d\x65\xea\x55\x41\xd3\x18\x79\xbb\x2c\x4c\x9c\x35\x76\xa2\xd5\xc7\x98\x95\x6b\x79\xc1\x04\x72\x79\xc1\x64\xe6\x45\x59\x5a\xac\x19\x10\x42\x4c\xa1\x68\x8f\x9c\x18\x0d\xa5\xdb\xe3\x55\xbb\x22\x8e\x11\x3d\x6a\x6b\xd8\x27\x27\xda\xa4\xb0\xa6\x09\x21\x63\x61\x5d\xa3\xea\xcf\x43\x90\x8c\x74\x2f\xa4\x96\x01\xe5\x98\x9c\xf3\x6c\xdd\x86\x37\x12\xcb\xef\x79\x1c\x48\xf4\xac\x6f\xf3\xb6\xd7\xb7\x9d\xf0\x14\x5f\xa7\x98\x62\xe3\xcb\xbc\xed\xf5\x65\x54\x9e\x14\xdb\x9f\x9f\x91\xa3\xf7\xa0\xfe\x02\x65\x12\x79\x12\x44\xb8\x2d\x67\xaa\x92\x63\xa1\x48\x77\x46\x75\x45\xe8\x19\x83\x50\x1c\x7b\xd6\xc6\xc8\x05\x37\xe9\xe3\x65\xe1\x9d\xf6\xda\xd9\x47\x7c\xf0\x9a\x0d\x7e\xb7\x27\xa6\xc8\xf4\x4c\x1f\x16\x0b\x38\x1a\xe8\x58\x9d\x5e\xa8\x8a\x53\xb5\xc1\x4e\xe1\x18\xa1\x50\x74\x57\xc2\x4e\x89\xe8\x31\xb3\xdd\x91\x73\x8a\x69\x2c\x3c\x5f\x07\xa9\x26\x26\x19\x87\x4f\x33\xc8\xc2\x3b\x35\x9d\x07\x6c\x89\xa0\x63\x6a\x30\x69\xdb\x0b\xfd\x43\xfe\x08\xd2\x02\x85\xc2\x5e\x3d\x36\xa6\xda\x0d\x43\xc1\xd5\x30\x15\x1a\x4f\x4d\x1e\xc3\xea\x39\x65\xf1\x15\xc3\x57\x9b\x77\x9c\xae\x03\xbe\xf9\x0d\x37\x5e\xa2\x31\xc3\xcd\xad\x29\xa7\x19\xac\x70\x63\x0e\x79\xb5\x0e\xf9\xb8\xc9\x91\xbc\xce\xd4\x8f\x61\xbf\xb3\x1e\x9d\x25\x30\xf9\x53\xf1\x65\x72\xc0\x49\x8a\xb3\x7b\x6f\xda\x71\x60\x9a\x82\xda\x51\xb5\x7f\xdf\xdf\xed\x8e\x16\xbb\xc5\x3b\x03\x9b\x54\x47\x63\xe3\x3e\x2f\xd2\xb4\x1b\xfb\x0f\x1e\xaa\xce\xd3\xc7\xc6\xe9\x06\x28\x7a\x57\x57\xbd\xee\x8d\x7a\x06\x19\x8f\x91\xeb\xca\x8b\x43\x72\xa5\x5e\x7c\xf0\x6e\x6e\xbf\x33\x17\x62\x88\x8c\x9d\x45\xd7\xff\x0d\xc8\x91\x0d\xa5\x4a\x81\x36\x3d\xff\x4c\x36\x5a\x79\xf1\x34\x2a\x9a\x4a\x72\x72\xc3\x40\xae\x9a\xfa\x0c\xb2\x24\x11\x28\xa1\xa0\x4c\xfe\xff\x7f\x03\x34\xec\x27\x61\x6f\x57\xb5\x9d\xda\xc0\xd8\xe9\xd5\x16\x9d\x9d\xeb\x36\xd8\xe3\x34\xf5\x5a\x3d\x71\xa7\x3d\xdb\x9d\xde\x98\x18\xd8\xe9\xc9\x1b\xba\xa6\xd2\xfb\x6f\x7d\xc6\xd5\xd1\xdb\xfd\x6c\xe7\x1c\xe7\x76\x69\x67\x53\xab\x98\x32\x2f\x27\xf5\x06\xe7\x80\xa3\x49\xc5\xe3\xaf\xad\xf8\x5c\x8b\x57\x5a\xc1\x33\x7a\xad\xd9\xd5\x06\xa2\xd8\x76\xb6\x10\xb3\x12\x8d\x31\xe5\x44\x8d\x91\xd3\xb3\xeb\x13\x67\x7c\xc7\x91\x52\x3a\x45\x11\x79\x46\xdd\xa4\x9c\xdf\xd2\x8f\x32\x26\x29\x2b\xb0\x1e\xb4\x50\x7a\x6d\x1d\xf7\x9a\xaa\xf6\xaa\xec\x41\x61\xd6\x7b\xd5\xfb\x02\xf9\xe6\x43\xf6\xe0\xec\x57\x26\xb7\x85\x52\x79\xd6\xce\xa2\x6d\xe9\x5e\x3c\x54\xd8\x28\xc8\x75\x14\x30\xb5\xf4\x3c\x7b\xf0\x7f\x79\xea\x8d\x84\xa3\x18\x7b\x21\x71\x1a\xcf\xc1\x1a\x99\x41\xaa\xb2\x69\x7f\xa9\x1c\xea\x18\x3f\x70\xb1\xfc\xd0\x35\xa2\xa8\xd1\xec\x0f\x4f\x36\xb5\xae\xb5\x7e\xa2\xf2\x32\xb5\xb3\x0e\x56\xd8\x97\x5b\x47\x7e\x5d\x85\xa2\xbe\xe5\x37\xb5\xd8\x29\x44\x9a\xa8\xa4\xbe\x10\x67\x9c\x5f\x66\x1f\xb2\x07\xe1\x21\xaf\x33\xb3\xaf\x80\xda\x0b\xf0\xd8\x72\x54\xc4\x2b\x60\xe4\x12\xbf\x4a\xcf\xf5\x63\xcf\xca\xfd\x1d\xa1\xdd\x15\xd4\x39\xd9\xe9\x0a\x62\xa8\x2d\x0c\x61\xe9\xb0\xaf\xf8\x5c\x40\x90\xe7\xc8\x62\x4f\xc7\x99\x85\x77\x7d\x87\xef\x47\x34\x11\x73\xef\x33\x05\xa9\xce\xf5\xf0\xfc\x38\x8a\xb2\x82\xc9\x59\x55\xb3\xce\x45\xd6\xb3\xdd\xa3\xd5\x15\xbe\xe8\x8b\x80\x59\xe8\xfc\xc6\xa8\xde\x3a\xb7\x30\xcb\x8c\xcd\x64\x6d\xb4\xc9\x64\xeb\xa3\xa1\xc2\x58\xbb\xd1\xe3\xb7\x60\x28\xd4\x57\x0d\x53\xff\xad\x68\xf3\x55\x45\xb2\x73\x64\xb6\x49\x75\xf8\x74\x93\xaf\x66\x8e\xf5\x7c\xe5\xf7\x1d\x67\xec\xb5\xd8\x9e\x65\x0c\xb8\x31\x47\x18\x77\x9e\xd3\x8c\x2d\x57\xfd\x44\x0d\xf0\x6b\x1b\xab\xf5\x3d\x70\x63\x3c\xfa\x9b\xf7\xc5\xea\x7b\x01\xb9\x46\xf9\x36\xc8\x2b\x6f\xdf\xb9\xad\xea\x3c\x75\x0b\xbf\x73\x61\x1c\x51\xbb\x47\x7b\x36\x52\xa2\xda\xc4\x71\x92\x60\x24\x31\x1e\xf5\x75\xc9\x7c\x99\xe8\xa9\x86\x81\xb5\xf9\xf6\x19\xd8\x4d\x40\xfb\x71\x45\x1b\x1b\x1f\x41\xcf\x25\x82\x10\x72\xe8\x26\x39\x1c\xa1\xbb\x6b\x3f\x35\x52\x7b\x63\xf8\x36\x01\x76\x2a\x6b\x00\xfc\xe3\x6a\xa0\xfa\x8e\xf5\xb3\x25\xbd\xf3\x41\xff\xaf\x00\x00\x00\xff\xff\xb3\x5b\x29\xb7\xa1\x1b\x00\x00")

func generatorTmplSqlmgrTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplSqlmgrTmpl,
		"generator/tmpl/sqlmgr.tmpl",
	)
}

func generatorTmplSqlmgrTmpl() (*asset, error) {
	bytes, err := generatorTmplSqlmgrTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/sqlmgr.tmpl", size: 7073, mode: os.FileMode(420), modTime: time.Unix(1487139217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _generatorTmplStructTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\x5f\x6b\xeb\x36\x14\x7f\xd7\xa7\x38\x98\xbb\x62\x97\x44\x79\xbf\x90\x87\x31\xb6\xcb\x18\x8c\xd1\x96\x3d\xac\x94\x21\xdb\xc7\xa9\x16\x5b\xca\x64\x39\x21\x18\x7d\xf7\x21\x4b\x8e\x9d\xf8\x4f\x9a\x30\xca\x7d\xaa\x2a\x4b\xe7\xf7\x47\x3f\x1d\xa5\xae\x21\xc5\x8c\x0b\x84\xa0\xd4\xaa\x4a\x74\x00\xc6\xac\x56\xc0\x2a\x2d\x61\x83\x02\x15\xd3\x98\x42\x7c\x04\x5d\x6d\x97\x1b\x14\x64\xc7\x92\x2d\xdb\x20\xd4\x35\xd0\x3f\xfc\xd8\x18\x42\x78\xb1\x93\x4a\x43\x48\x00\x00\x82\xac\xd0\x81\x1b\x69\x5e\x60\x40\xdc\x78\xc3\xf5\x7b\x15\xd3\x44\x16\x2b\x5d\x6d\x53\x2c\xb7\xab\x98\x95\xb8\x2a\xff\xcd\x57\x69\x1c\x5c\x5f\xa4\x8f\x3b\x2c\x03\x12\x11\xb2\x67\xca\x63\xfd\x0d\x59\xa1\xe9\xb3\x56\x5c\x6c\x50\xf9\x29\x8b\x4a\x5f\x78\x81\xfe\xff\x34\xa6\x4f\xf2\xf0\x9c\x30\x21\xba\x35\xb6\x18\xfd\x35\xb5\xe5\xea\x1a\xbe\xc8\xf8\x9f\xdf\x59\x81\xf0\x75\x0d\xb4\x19\x18\x43\xec\x1a\xe8\x7f\x34\x06\x9c\x51\x50\x37\x65\x1a\x1b\x14\x2f\x98\x3a\xfe\x86\xc7\x76\xdf\xe5\xf4\xcb\x71\x87\xf4\x9b\xb4\x7f\x6c\x55\xb7\x71\x09\x8a\x89\x0d\xc2\x97\x8c\x63\x9e\x36\xb0\xbf\xd8\x51\xd9\x2d\xf1\xdf\xfa\x65\x79\x76\x9a\xac\xf2\x9c\xc5\xb9\xfd\xf0\x58\xd7\x80\x22\x05\x63\xba\x3d\x13\x98\x28\x52\x63\x88\x21\x24\xab\x44\x02\xe1\xe3\xb9\xb8\x08\x1c\x85\x30\x82\xd7\xb7\xb2\xf1\xd4\x0b\x55\xa8\x2b\x25\x4e\xb3\x6e\xd2\xb3\x9c\xd2\xb1\xf4\xb8\xcd\xb9\x76\xcc\x7e\x92\x79\x55\x08\x30\x26\x58\xf4\xab\x38\x01\xcd\xcc\x55\x82\x3f\xe6\xf9\x0d\x14\x83\x8b\xe3\x98\x20\xf0\xa9\x32\x3a\x3a\x61\x04\x63\x32\xa6\x49\x5f\x33\x67\x3c\x93\x77\xc1\xcc\xb8\x62\xcc\x35\x12\xe7\xe1\x9d\xc1\x1f\x18\xea\xa1\x47\xb2\xbe\x3c\xc1\xea\x77\x5e\xc2\x00\xfb\x1b\xea\x31\xe4\x70\xea\x5e\x2c\x20\x96\x32\x8f\x3c\x27\x9e\x81\x2d\x4b\x87\x37\x6f\xbd\x06\xc1\x73\xe8\x32\xe5\xe9\x0f\xea\xfe\x85\x4a\x36\x75\x33\x96\x97\xe8\x63\xd0\xdb\xf0\x38\x0e\xb0\x00\xad\x2a\xec\x4e\x76\x5c\xdd\xf3\x88\xba\x17\x69\xcd\x09\x5b\x09\x53\xfc\x2d\xfd\x7b\xca\x87\xfb\xa1\x46\xef\xdd\x55\xc8\xa9\x76\xf5\x70\xba\x26\x7b\x62\x88\xef\x4a\x36\x50\xdd\xf5\x99\xa3\xf9\x27\xcb\x2b\x0c\x5d\x20\x5d\xa4\x22\xe0\x42\xa3\xca\x58\x82\xb5\xf1\xac\xca\x03\xd7\xc9\x3b\xb8\x65\x6e\x2a\x61\x25\xce\x04\xfe\xeb\xe5\xe1\xb6\xc2\x46\x6e\x13\x21\x1f\x6c\x1a\x27\xcc\x41\xc8\x27\xe1\xce\x7d\x3c\x21\xf5\x1a\x4b\x8a\x19\xab\x72\xdd\x55\xd8\x31\xc1\x93\xd0\x3e\x84\x3f\x2b\x25\x55\x16\x06\x95\xd8\x0a\x79\x10\x5e\xff\x0f\x65\xb0\x70\xc3\x28\xba\x6c\x4d\x33\x26\xbb\x77\x60\xe8\xed\xa9\xd3\x0e\x3f\xdd\xd0\x4b\x27\x6e\xc2\xf5\x66\x3a\xc3\xb8\x7d\x18\x6e\xe6\x3c\x73\xd6\x37\x3f\x12\xff\xb3\xb0\x27\x4c\x90\xef\x51\x7d\x46\xe4\x1f\x3e\x39\xf3\x0f\xdf\x55\xe8\x5b\xa7\xef\x4e\xd1\x9c\x7d\x37\xc7\x68\xc2\x9b\xbb\x73\x64\x7f\xfe\x86\x4a\x1e\xce\x7f\x0d\x7b\x8b\x4a\xa0\x94\xb6\xd1\x42\xeb\x67\xab\x38\xd9\xab\xd2\x52\x2c\xd8\x16\xc3\x33\xe1\x0b\xc8\x51\xb8\x54\x96\xde\xe2\x4c\x2a\xe0\xbe\xa4\xdd\xe4\x74\x7a\x84\xde\xeb\x69\x8b\xbe\xf2\x37\x58\xbb\xcb\x72\x1e\xf1\xf6\xb4\xfa\x8e\x2b\x79\xa0\x4e\x80\xdd\x4a\x29\x8d\x3e\x22\xd7\x1e\xe4\x40\xf1\x84\xbe\x33\x22\x4d\x02\xae\xe2\xf7\x9e\xae\xff\x02\x00\x00\xff\xff\x68\xf2\x51\x67\x4a\x0d\x00\x00")

func generatorTmplStructTmplBytes() ([]byte, error) {
	return bindataRead(
		_generatorTmplStructTmpl,
		"generator/tmpl/struct.tmpl",
	)
}

func generatorTmplStructTmpl() (*asset, error) {
	bytes, err := generatorTmplStructTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "generator/tmpl/struct.tmpl", size: 3402, mode: os.FileMode(420), modTime: time.Unix(1487137285, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"generator/tmpl/sql_script_table.tmpl": generatorTmplSql_script_tableTmpl,
	"generator/tmpl/sqlconn.tmpl": generatorTmplSqlconnTmpl,
	"generator/tmpl/sqlmgr.tmpl": generatorTmplSqlmgrTmpl,
	"generator/tmpl/struct.tmpl": generatorTmplStructTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"generator": &bintree{nil, map[string]*bintree{
		"tmpl": &bintree{nil, map[string]*bintree{
			"sql_script_table.tmpl": &bintree{generatorTmplSql_script_tableTmpl, map[string]*bintree{}},
			"sqlconn.tmpl": &bintree{generatorTmplSqlconnTmpl, map[string]*bintree{}},
			"sqlmgr.tmpl": &bintree{generatorTmplSqlmgrTmpl, map[string]*bintree{}},
			"struct.tmpl": &bintree{generatorTmplStructTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

