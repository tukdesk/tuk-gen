{{ define "sqlmgr" }}// auto generated by tuk-gen
{{ $objName := .Name -}}
{{ $structName := printf "s%sSQLMgr" $objName }}
package {{ .Package }}

import (
    "github.com/tukdesk/base/sql/db"
    "github.com/tukdesk/base/sql/types"
)

var (
    _ db.Conn
    _ types.Id

    ins{{ $objName }}SQLMgr = &{{ $structName }}{}
)

func {{ $objName }}SQLMgr() *{{ $structName }} {
    return ins{{ $objName }}SQLMgr
}

type {{ $structName }} struct {
}

func (*{{ $structName }}) Table() string {
    return "{{ .Table }}"
}

func (*{{ $structName }}) Engine() string {
    return "{{ .Engine }}"
}

func (this *{{ $structName }}) Conn() (*db.Conn, error) {
    conn, err := db.Get(this.Engine())
    if err != nil {
        return nil, err
    }

    return conn, nil
}

func (this *{{ $structName }}) FindOneByPrimaryKey(key {{ .PrimaryKey.Type.GoType }}) (*{{ $objName }}, error) {
    conn, err := this.Conn()
    if err != nil {
        return nil, err
    }

    res := &{{ $objName }}{}
    fields := res.Fields()
    stmt := conn.Select(fields...).
        From(this.Table()).
        Where(conn.Eq("{{ .PrimaryKey.Column }}", key))

    query, err := conn.BuildSQL(stmt)
    if err != nil {
        return nil, err
    }

    row := conn.QueryRow(query)

    if err := res.Scan(row); err != nil {
        return nil, err
    }

    return res, nil
}
{{ end -}}
