{{ define "sqlmgr" }}// auto generated by tuk-gen
{{ $objName := .Name -}}
{{ $structName := printf "s%sSQLMgr" $objName -}}
package {{ .Package }}

import (
    "database/sql"

    "github.com/gocraft/dbr"
    "github.com/tukdesk/base/sql/db"
    "github.com/tukdesk/base/sql/types"
)

var (
    _ sql.Result
    _ db.Conn
    _ types.Id
    _ dbr.Dialect

    ins{{ $objName }}SQLMgr = &{{ $structName }}{}
)

func {{ $objName }}SQLMgr() *{{ $structName }} {
    return ins{{ $objName }}SQLMgr
}

type {{ $structName }} struct {
    obj *{{ $objName }}
}

func (*{{ $structName }}) Table() string {
    return "{{ .TableIdentifier }}"
}

func (*{{ $structName }}) Engine() string {
    return "{{ .Engine }}"
}

func (this *{{ $structName }}) Conn() (*db.Conn, error) {
    if innerConn != nil {
        return innerConn, nil
    }

    conn, err := db.Get(this.Engine())
    if err != nil {
        return nil, err
    }

    return conn, nil
}

func (this *{{ $structName }}) MustConn() *db.Conn {
    if innerConn != nil {
        return innerConn
    }

    return db.MustGet(this.Engine())
}

func (this *{{ $structName }}) StmtInsertInto(column ...string) *dbr.InsertStmt {
    s := this.MustConn().SQL
    return s.InsertInto(this.Table()).Columns(column...)
}

func (this *{{ $structName }}) StmtSelect(column ...string) *dbr.SelectStmt {
    s := this.MustConn().SQL
    return s.Select(column...).From(this.Table())
}

func (this *{{ $structName }}) Insert(objs ...*{{ $objName }}) (sql.Result, error) {
    if len(objs) == 0 {
        return nil, nil
    }

    conn := this.MustConn()

    stmt := this.StmtInsertInto(this.obj.Fields()...)
    for _, obj := range objs {
        stmt = stmt.Values(obj.Values()...)
    }

    query, err := conn.SQL.Build(stmt)
    if err != nil {
        return nil, err
    }

    return conn.Exec(query)
}

func (this *{{ $structName }}) FindOneByPrimaryKey(key {{ .PrimaryKey.Type.GoType }}) (*{{ $objName }}, error) {
    conn := this.MustConn()

    res := &{{ $objName }}{}
    fields := this.obj.FieldAll()
    stmt := this.StmtSelect(fields...).
        Where(conn.SQL.Eq("{{ .PrimaryKey.Column }}", key))

    query, err := conn.SQL.Build(stmt)
    if err != nil {
        return nil, err
    }

    row := conn.QueryRow(query)

    if err := res.ScanAll(row); err != nil {
        return nil, err
    }

    return res, nil
}

func (this *{{ $structName }}) FindByPrimaryKeys(keys []{{ .PrimaryKey.Type.GoType }}, orders ...db.Order) ([]*{{ $objName }}, error) {
    conn := this.MustConn()

    res := make([]*{{ $objName }}, 0, len(keys))
    fields := this.obj.FieldAll()
    stmt := this.StmtSelect(fields...).
        Where(conn.SQL.Eq("{{ .PrimaryKey.Column }}", keys))

    for _, order := range orders {
        if order.DESC {
            stmt = stmt.OrderDesc(order.Column)
            continue
        }

        stmt = stmt.OrderAsc(order.Column)
    }

    query, err := conn.SQL.Build(stmt)
    if err != nil {
        return nil, err
    }

    rows, err := conn.Query(query)
    if db.IsErrNoRows(err) {
        return res, nil
    }

    if err != nil {
        return nil, err
    }

    for rows.Next() {
        obj := &{{ $objName }}{}
        if err := obj.ScanAll(rows); err != nil {
            return nil, err
        }

        res = append(res, obj)
    }

    return res, nil
}
{{ end -}}
